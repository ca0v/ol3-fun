{"version":3,"file":"Circle.js","sources":["../../../src/ol/style/Circle.js"],"sourcesContent":["/**\r\n * @module ol/style/Circle\r\n */\r\n\r\nimport RegularShape from '../style/RegularShape.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/style/Fill} [fill] Fill style.\r\n * @property {number} radius Circle radius.\r\n * @property {boolean} [snapToPixel=true] If `true` integral numbers of pixels are used as the X and Y pixel coordinate\r\n * when drawing the circle in the output canvas. If `false` fractional numbers may be used. Using `true` allows for\r\n * \"sharp\" rendering (no blur), while using `false` allows for \"accurate\" rendering. Note that accuracy is important if\r\n * the circle's position is animated. Without it, the circle may jitter noticeably.\r\n * @property {module:ol/style/Stroke} [stroke] Stroke style.\r\n * @property {module:ol/style/AtlasManager} [atlasManager] The atlas manager to use for this circle.\r\n * When using WebGL it is recommended to use an atlas manager to avoid texture switching. If an atlas manager is given,\r\n * the circle is added to an atlas. By default no atlas manager is used.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Set circle style for vector features.\r\n * @api\r\n */\r\nclass CircleStyle extends RegularShape {\r\n  /**\r\n   * @param {module:ol/style/Circle~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options || {};\r\n\r\n    super({\r\n      points: Infinity,\r\n      fill: options.fill,\r\n      radius: options.radius,\r\n      snapToPixel: options.snapToPixel,\r\n      stroke: options.stroke,\r\n      atlasManager: options.atlasManager\r\n    });\r\n\r\n  }\r\n\r\n  /**\r\n  * Clones the style.  If an atlasmanager was provided to the original style it will be used in the cloned style, too.\r\n  * @return {module:ol/style/Circle} The cloned style.\r\n  * @override\r\n  * @api\r\n  */\r\n  clone() {\r\n    const style = new CircleStyle({\r\n      fill: this.getFill() ? this.getFill().clone() : undefined,\r\n      stroke: this.getStroke() ? this.getStroke().clone() : undefined,\r\n      radius: this.getRadius(),\r\n      snapToPixel: this.getSnapToPixel(),\r\n      atlasManager: this.atlasManager_\r\n    });\r\n    style.setOpacity(this.getOpacity());\r\n    style.setScale(this.getScale());\r\n    return style;\r\n  }\r\n\r\n  /**\r\n  * Set the circle radius.\r\n  *\r\n  * @param {number} radius Circle radius.\r\n  * @api\r\n  */\r\n  setRadius(radius) {\r\n    this.radius_ = radius;\r\n    this.render_(this.atlasManager_);\r\n  }\r\n}\r\n\r\n\r\nexport default CircleStyle;\r\n"],"names":["const","super"],"mappings":"AAAA;;;;AAIA,OAAO,YAAY,MAAM,0BAA0B,CAAC;;;;;;;;;;;;;;;;;;;;;;;AAuBpD,IAAM,WAAW,GAAqB;EAIpC,oBAAW,CAAC,WAAW,EAAE;;IAEvBA,GAAK,CAAC,OAAO,GAAG,WAAW,IAAI,EAAE,CAAC;;IAElCC,iBAAK,OAAC;MACJ,MAAM,EAAE,QAAQ;MAChB,IAAI,EAAE,OAAO,CAAC,IAAI;MAClB,MAAM,EAAE,OAAO,CAAC,MAAM;MACtB,WAAW,EAAE,OAAO,CAAC,WAAW;MAChC,MAAM,EAAE,OAAO,CAAC,MAAM;MACtB,YAAY,EAAE,OAAO,CAAC,YAAY;KACnC,CAAC,CAAC;;;;;;kDAEJ;;;;;;;;wBAQD,uBAAK,GAAG;IACND,GAAK,CAAC,KAAK,GAAG,IAAI,WAAW,CAAC;MAC5B,IAAI,EAAE,IAAI,CAAC,OAAO,EAAE,GAAG,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,GAAG,SAAS;MACzD,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,GAAG,SAAS;MAC/D,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE;MACxB,WAAW,EAAE,IAAI,CAAC,cAAc,EAAE;MAClC,YAAY,EAAE,IAAI,CAAC,aAAa;KACjC,CAAC,CAAC;IACH,KAAK,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;IACpC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;IAChC,OAAO,KAAK,CAAC;IACd;;;;;;;;wBAQD,+BAAS,CAAC,MAAM,EAAE;IAChB,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;IACtB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;GAClC;;;EA/CuB,eAgDzB;;;AAGD,eAAe,WAAW,CAAC;"}