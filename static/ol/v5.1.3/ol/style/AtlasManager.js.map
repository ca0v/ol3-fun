{"version":3,"file":"AtlasManager.js","sources":["../../../src/ol/style/AtlasManager.js"],"sourcesContent":["/**\r\n * @module ol/style/AtlasManager\r\n */\r\nimport {MAX_TEXTURE_SIZE as WEBGL_MAX_TEXTURE_SIZE} from '../webgl.js';\r\nimport {UNDEFINED} from '../functions.js';\r\nimport Atlas from '../style/Atlas.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [initialSize=256] The size in pixels of the first atlas image.\r\n * @property {number} [maxSize] The maximum size in pixels of atlas images. Default is\r\n * `webgl/MAX_TEXTURE_SIZE` or 2048 if WebGL is not supported.\r\n * @property {number} [space=1] The space in pixels between images.\r\n */\r\n\r\n\r\n/**\r\n * Provides information for an image inside an atlas manager.\r\n * `offsetX` and `offsetY` is the position of the image inside\r\n * the atlas image `image` and the position of the hit-detection image\r\n * inside the hit-detection atlas image `hitImage`.\r\n * @typedef {Object} AtlasManagerInfo\r\n * @property {number} offsetX\r\n * @property {number} offsetY\r\n * @property {HTMLCanvasElement} image\r\n * @property {HTMLCanvasElement} hitImage\r\n */\r\n\r\n\r\n/**\r\n * The size in pixels of the first atlas image.\r\n * @type {number}\r\n */\r\nconst INITIAL_ATLAS_SIZE = 256;\r\n\r\n/**\r\n * The maximum size in pixels of atlas images.\r\n * @type {number}\r\n */\r\nconst MAX_ATLAS_SIZE = -1;\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Manages the creation of image atlases.\r\n *\r\n * Images added to this manager will be inserted into an atlas, which\r\n * will be used for rendering.\r\n * The `size` given in the constructor is the size for the first\r\n * atlas. After that, when new atlases are created, they will have\r\n * twice the size as the latest atlas (until `maxSize` is reached).\r\n *\r\n * If an application uses many images or very large images, it is recommended\r\n * to set a higher `size` value to avoid the creation of too many atlases.\r\n * @api\r\n */\r\nclass AtlasManager {\r\n  /**\r\n   * @param {module:ol/style/AtlasManager~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options || {};\r\n\r\n    /**\r\n     * The size in pixels of the latest atlas image.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.currentSize_ = options.initialSize !== undefined ?\r\n      options.initialSize : INITIAL_ATLAS_SIZE;\r\n\r\n    /**\r\n     * The maximum size in pixels of atlas images.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxSize_ = options.maxSize !== undefined ?\r\n      options.maxSize : MAX_ATLAS_SIZE != -1 ?\r\n        MAX_ATLAS_SIZE : WEBGL_MAX_TEXTURE_SIZE !== undefined ?\r\n          WEBGL_MAX_TEXTURE_SIZE : 2048;\r\n\r\n    /**\r\n     * The size in pixels between images.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.space_ = options.space !== undefined ? options.space : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/style/Atlas>}\r\n     */\r\n    this.atlases_ = [new Atlas(this.currentSize_, this.space_)];\r\n\r\n    /**\r\n     * The size in pixels of the latest atlas image for hit-detection images.\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.currentHitSize_ = this.currentSize_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/style/Atlas>}\r\n     */\r\n    this.hitAtlases_ = [new Atlas(this.currentHitSize_, this.space_)];\r\n  }\r\n\r\n  /**\r\n   * @param {string} id The identifier of the entry to check.\r\n   * @return {?module:ol/style/AtlasManager~AtlasManagerInfo} The position and atlas image for the\r\n   *    entry, or `null` if the entry is not part of the atlas manager.\r\n   */\r\n  getInfo(id) {\r\n    /** @type {?module:ol/style/Atlas~AtlasInfo} */\r\n    const info = this.getInfo_(this.atlases_, id);\r\n\r\n    if (!info) {\r\n      return null;\r\n    }\r\n    const hitInfo = /** @type {module:ol/style/Atlas~AtlasInfo} */ (this.getInfo_(this.hitAtlases_, id));\r\n\r\n    return this.mergeInfos_(info, hitInfo);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Array.<module:ol/style/Atlas>} atlases The atlases to search.\r\n   * @param {string} id The identifier of the entry to check.\r\n   * @return {?module:ol/style/Atlas~AtlasInfo} The position and atlas image for the entry,\r\n   *    or `null` if the entry is not part of the atlases.\r\n   */\r\n  getInfo_(atlases, id) {\r\n    for (let i = 0, ii = atlases.length; i < ii; ++i) {\r\n      const atlas = atlases[i];\r\n      const info = atlas.get(id);\r\n      if (info) {\r\n        return info;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {module:ol/style/Atlas~AtlasInfo} info The info for the real image.\r\n   * @param {module:ol/style/Atlas~AtlasInfo} hitInfo The info for the hit-detection\r\n   *    image.\r\n   * @return {?module:ol/style/AtlasManager~AtlasManagerInfo} The position and atlas image for the\r\n   *    entry, or `null` if the entry is not part of the atlases.\r\n   */\r\n  mergeInfos_(info, hitInfo) {\r\n    return (\r\n      /** @type {module:ol/style/AtlasManager~AtlasManagerInfo} */ ({\r\n        offsetX: info.offsetX,\r\n        offsetY: info.offsetY,\r\n        image: info.image,\r\n        hitImage: hitInfo.image\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Add an image to the atlas manager.\r\n   *\r\n   * If an entry for the given id already exists, the entry will\r\n   * be overridden (but the space on the atlas graphic will not be freed).\r\n   *\r\n   * If `renderHitCallback` is provided, the image (or the hit-detection version\r\n   * of the image) will be rendered into a separate hit-detection atlas image.\r\n   *\r\n   * @param {string} id The identifier of the entry to add.\r\n   * @param {number} width The width.\r\n   * @param {number} height The height.\r\n   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback\r\n   *    Called to render the new image onto an atlas image.\r\n   * @param {function(CanvasRenderingContext2D, number, number)=}\r\n   *    opt_renderHitCallback Called to render a hit-detection image onto a hit\r\n   *    detection atlas image.\r\n   * @param {Object=} opt_this Value to use as `this` when executing\r\n   *    `renderCallback` and `renderHitCallback`.\r\n   * @return {?module:ol/style/AtlasManager~AtlasManagerInfo}  The position and atlas image for the\r\n   *    entry, or `null` if the image is too big.\r\n   */\r\n  add(id, width, height, renderCallback, opt_renderHitCallback, opt_this) {\r\n    if (width + this.space_ > this.maxSize_ ||\r\n        height + this.space_ > this.maxSize_) {\r\n      return null;\r\n    }\r\n\r\n    /** @type {?module:ol/style/Atlas~AtlasInfo} */\r\n    const info = this.add_(false, id, width, height, renderCallback, opt_this);\r\n    if (!info) {\r\n      return null;\r\n    }\r\n\r\n    // even if no hit-detection entry is requested, we insert a fake entry into\r\n    // the hit-detection atlas, to make sure that the offset is the same for\r\n    // the original image and the hit-detection image.\r\n    const renderHitCallback = opt_renderHitCallback !== undefined ?\r\n      opt_renderHitCallback : UNDEFINED;\r\n\r\n    const hitInfo = /** @type {module:ol/style/Atlas~AtlasInfo} */ (this.add_(true,\r\n      id, width, height, renderHitCallback, opt_this));\r\n\r\n    return this.mergeInfos_(info, hitInfo);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {boolean} isHitAtlas If the hit-detection atlases are used.\r\n   * @param {string} id The identifier of the entry to add.\r\n   * @param {number} width The width.\r\n   * @param {number} height The height.\r\n   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback\r\n   *    Called to render the new image onto an atlas image.\r\n   * @param {Object=} opt_this Value to use as `this` when executing\r\n   *    `renderCallback` and `renderHitCallback`.\r\n   * @return {?module:ol/style/Atlas~AtlasInfo}  The position and atlas image for the entry,\r\n   *    or `null` if the image is too big.\r\n   */\r\n  add_(isHitAtlas, id, width, height, renderCallback, opt_this) {\r\n    const atlases = (isHitAtlas) ? this.hitAtlases_ : this.atlases_;\r\n    let atlas, info, i, ii;\r\n    for (i = 0, ii = atlases.length; i < ii; ++i) {\r\n      atlas = atlases[i];\r\n      info = atlas.add(id, width, height, renderCallback, opt_this);\r\n      if (info) {\r\n        return info;\r\n      } else if (!info && i === ii - 1) {\r\n        // the entry could not be added to one of the existing atlases,\r\n        // create a new atlas that is twice as big and try to add to this one.\r\n        let size;\r\n        if (isHitAtlas) {\r\n          size = Math.min(this.currentHitSize_ * 2, this.maxSize_);\r\n          this.currentHitSize_ = size;\r\n        } else {\r\n          size = Math.min(this.currentSize_ * 2, this.maxSize_);\r\n          this.currentSize_ = size;\r\n        }\r\n        atlas = new Atlas(size, this.space_);\r\n        atlases.push(atlas);\r\n        // run the loop another time\r\n        ++ii;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n}\r\n\r\nexport default AtlasManager;\r\n"],"names":["const","let","this"],"mappings":"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"}