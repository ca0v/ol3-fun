{"version":3,"file":"Atlas.js","sources":["../../../src/ol/style/Atlas.js"],"sourcesContent":["/**\r\n * @module ol/style/Atlas\r\n */\r\nimport {createCanvasContext2D} from '../dom.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} AtlasBlock\r\n * @property {number} x\r\n * @property {number} y\r\n * @property {number} width\r\n * @property {number} height\r\n */\r\n\r\n/**\r\n * Provides information for an image inside an atlas.\r\n * `offsetX` and `offsetY` are the position of the image inside the atlas image `image`.\r\n * @typedef {Object} AtlasInfo\r\n * @property {number} offsetX\r\n * @property {number} offsetY\r\n * @property {HTMLCanvasElement} image\r\n */\r\n\r\n\r\n/**\r\n * @classesc\r\n * This class facilitates the creation of image atlases.\r\n *\r\n * Images added to an atlas will be rendered onto a single\r\n * atlas canvas. The distribution of images on the canvas is\r\n * managed with the bin packing algorithm described in:\r\n * http://www.blackpawn.com/texts/lightmaps/\r\n *\r\n * @param {number} size The size in pixels of the sprite image.\r\n * @param {number} space The space in pixels between images.\r\n *    Because texture coordinates are float values, the edges of\r\n *    images might not be completely correct (in a way that the\r\n *    edges overlap when being rendered). To avoid this we add a\r\n *    padding around each image.\r\n */\r\nclass Atlas {\r\n\r\n  /**\r\n   * @param {number} size The size in pixels of the sprite image.\r\n   * @param {number} space The space in pixels between images.\r\n   *    Because texture coordinates are float values, the edges of\r\n   *    images might not be completely correct (in a way that the\r\n   *    edges overlap when being rendered). To avoid this we add a\r\n   *    padding around each image.\r\n   */\r\n  constructor(size, space) {\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.space_ = space;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/style/Atlas~AtlasBlock>}\r\n     */\r\n    this.emptyBlocks_ = [{x: 0, y: 0, width: size, height: size}];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Object.<string, module:ol/style/Atlas~AtlasInfo>}\r\n     */\r\n    this.entries_ = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {CanvasRenderingContext2D}\r\n     */\r\n    this.context_ = createCanvasContext2D(size, size);\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement}\r\n     */\r\n    this.canvas_ = this.context_.canvas;\r\n  }\r\n\r\n  /**\r\n   * @param {string} id The identifier of the entry to check.\r\n   * @return {?module:ol/style/Atlas~AtlasInfo} The atlas info.\r\n   */\r\n  get(id) {\r\n    return this.entries_[id] || null;\r\n  }\r\n\r\n  /**\r\n   * @param {string} id The identifier of the entry to add.\r\n   * @param {number} width The width.\r\n   * @param {number} height The height.\r\n   * @param {function(CanvasRenderingContext2D, number, number)} renderCallback\r\n   *    Called to render the new image onto an atlas image.\r\n   * @param {Object=} opt_this Value to use as `this` when executing\r\n   *    `renderCallback`.\r\n   * @return {?module:ol/style/Atlas~AtlasInfo} The position and atlas image for the entry.\r\n   */\r\n  add(id, width, height, renderCallback, opt_this) {\r\n    for (let i = 0, ii = this.emptyBlocks_.length; i < ii; ++i) {\r\n      const block = this.emptyBlocks_[i];\r\n      if (block.width >= width + this.space_ &&\r\n          block.height >= height + this.space_) {\r\n        // we found a block that is big enough for our entry\r\n        const entry = {\r\n          offsetX: block.x + this.space_,\r\n          offsetY: block.y + this.space_,\r\n          image: this.canvas_\r\n        };\r\n        this.entries_[id] = entry;\r\n\r\n        // render the image on the atlas image\r\n        renderCallback.call(opt_this, this.context_,\r\n          block.x + this.space_, block.y + this.space_);\r\n\r\n        // split the block after the insertion, either horizontally or vertically\r\n        this.split_(i, block, width + this.space_, height + this.space_);\r\n\r\n        return entry;\r\n      }\r\n    }\r\n\r\n    // there is no space for the new entry in this atlas\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {number} index The index of the block.\r\n   * @param {module:ol/style/Atlas~AtlasBlock} block The block to split.\r\n   * @param {number} width The width of the entry to insert.\r\n   * @param {number} height The height of the entry to insert.\r\n   */\r\n  split_(index, block, width, height) {\r\n    const deltaWidth = block.width - width;\r\n    const deltaHeight = block.height - height;\r\n\r\n    /** @type {module:ol/style/Atlas~AtlasBlock} */\r\n    let newBlock1;\r\n    /** @type {module:ol/style/Atlas~AtlasBlock} */\r\n    let newBlock2;\r\n\r\n    if (deltaWidth > deltaHeight) {\r\n      // split vertically\r\n      // block right of the inserted entry\r\n      newBlock1 = {\r\n        x: block.x + width,\r\n        y: block.y,\r\n        width: block.width - width,\r\n        height: block.height\r\n      };\r\n\r\n      // block below the inserted entry\r\n      newBlock2 = {\r\n        x: block.x,\r\n        y: block.y + height,\r\n        width: width,\r\n        height: block.height - height\r\n      };\r\n      this.updateBlocks_(index, newBlock1, newBlock2);\r\n    } else {\r\n      // split horizontally\r\n      // block right of the inserted entry\r\n      newBlock1 = {\r\n        x: block.x + width,\r\n        y: block.y,\r\n        width: block.width - width,\r\n        height: height\r\n      };\r\n\r\n      // block below the inserted entry\r\n      newBlock2 = {\r\n        x: block.x,\r\n        y: block.y + height,\r\n        width: block.width,\r\n        height: block.height - height\r\n      };\r\n      this.updateBlocks_(index, newBlock1, newBlock2);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the old block and insert new blocks at the same array position.\r\n   * The new blocks are inserted at the same position, so that splitted\r\n   * blocks (that are potentially smaller) are filled first.\r\n   * @private\r\n   * @param {number} index The index of the block to remove.\r\n   * @param {module:ol/style/Atlas~AtlasBlock} newBlock1 The 1st block to add.\r\n   * @param {module:ol/style/Atlas~AtlasBlock} newBlock2 The 2nd block to add.\r\n   */\r\n  updateBlocks_(index, newBlock1, newBlock2) {\r\n    const args = [index, 1];\r\n    if (newBlock1.width > 0 && newBlock1.height > 0) {\r\n      args.push(newBlock1);\r\n    }\r\n    if (newBlock2.width > 0 && newBlock2.height > 0) {\r\n      args.push(newBlock2);\r\n    }\r\n    this.emptyBlocks_.splice.apply(this.emptyBlocks_, args);\r\n  }\r\n}\r\n\r\nexport default Atlas;\r\n"],"names":["let","const","this"],"mappings":"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"}