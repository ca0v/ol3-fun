{"version":3,"file":"condition.js","sources":["../../../src/ol/events/condition.js"],"sourcesContent":["/**\r\n * @module ol/events/condition\r\n */\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport {assert} from '../asserts.js';\r\nimport {TRUE, FALSE} from '../functions.js';\r\nimport {WEBKIT, MAC} from '../has.js';\r\n\r\n\r\n/**\r\n * A function that takes an {@link module:ol/MapBrowserEvent} and returns a\r\n * `{boolean}`. If the condition is met, true should be returned.\r\n *\r\n * @typedef {function(this: ?, module:ol/MapBrowserEvent): boolean} Condition\r\n */\r\n\r\n\r\n/**\r\n * Return `true` if only the alt-key is pressed, `false` otherwise (e.g. when\r\n * additionally the shift-key is pressed).\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt key is pressed.\r\n * @api\r\n */\r\nexport const altKeyOnly = function(mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    originalEvent.altKey &&\r\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n      !originalEvent.shiftKey);\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if only the alt-key and shift-key is pressed, `false` otherwise\r\n * (e.g. when additionally the platform-modifier-key is pressed).\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the alt and shift keys are pressed.\r\n * @api\r\n */\r\nexport const altShiftKeysOnly = function(mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    originalEvent.altKey &&\r\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n      originalEvent.shiftKey);\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the map has the focus. This condition requires a map target\r\n * element with a `tabindex` attribute, e.g. `<div id=\"map\" tabindex=\"1\">`.\r\n *\r\n * @param {module:ol/MapBrowserEvent} event Map browser event.\r\n * @return {boolean} The map has the focus.\r\n * @api\r\n */\r\nexport const focus = function(event) {\r\n  return event.target.getTargetElement() === document.activeElement;\r\n};\r\n\r\n\r\n/**\r\n * Return always true.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True.\r\n * @function\r\n * @api\r\n */\r\nexport const always = TRUE;\r\n\r\n\r\n/**\r\n * Return `true` if the event is a `click` event, `false` otherwise.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `click` event.\r\n * @api\r\n */\r\nexport const click = function(mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.CLICK;\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the event has an \"action\"-producing mouse button.\r\n *\r\n * By definition, this includes left-click on windows/linux, and left-click\r\n * without the ctrl key on Macs.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} The result.\r\n */\r\nexport const mouseActionButton = function(mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return originalEvent.button == 0 &&\r\n      !(WEBKIT && MAC && originalEvent.ctrlKey);\r\n};\r\n\r\n\r\n/**\r\n * Return always false.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} False.\r\n * @function\r\n * @api\r\n */\r\nexport const never = FALSE;\r\n\r\n\r\n/**\r\n * Return `true` if the browser event is a `pointermove` event, `false`\r\n * otherwise.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the browser event is a `pointermove` event.\r\n * @api\r\n */\r\nexport const pointerMove = function(mapBrowserEvent) {\r\n  return mapBrowserEvent.type == 'pointermove';\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the event is a map `singleclick` event, `false` otherwise.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `singleclick` event.\r\n * @api\r\n */\r\nexport const singleClick = function(mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.SINGLECLICK;\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the event is a map `dblclick` event, `false` otherwise.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event is a map `dblclick` event.\r\n * @api\r\n */\r\nexport const doubleClick = function(mapBrowserEvent) {\r\n  return mapBrowserEvent.type == MapBrowserEventType.DBLCLICK;\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if no modifier key (alt-, shift- or platform-modifier-key) is\r\n * pressed.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if there no modifier keys are pressed.\r\n * @api\r\n */\r\nexport const noModifierKeys = function(mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n      !originalEvent.shiftKey);\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if only the platform-modifier-key (the meta-key on Mac,\r\n * ctrl-key otherwise) is pressed, `false` otherwise (e.g. when additionally\r\n * the shift-key is pressed).\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the platform modifier key is pressed.\r\n * @api\r\n */\r\nexport const platformModifierKeyOnly = function(mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return !originalEvent.altKey &&\r\n    (MAC ? originalEvent.metaKey : originalEvent.ctrlKey) &&\r\n    !originalEvent.shiftKey;\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if only the shift-key is pressed, `false` otherwise (e.g. when\r\n * additionally the alt-key is pressed).\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if only the shift key is pressed.\r\n * @api\r\n */\r\nexport const shiftKeyOnly = function(mapBrowserEvent) {\r\n  const originalEvent = mapBrowserEvent.originalEvent;\r\n  return (\r\n    !originalEvent.altKey &&\r\n      !(originalEvent.metaKey || originalEvent.ctrlKey) &&\r\n      originalEvent.shiftKey);\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the target element is not editable, i.e. not a `<input>`-,\r\n * `<select>`- or `<textarea>`-element, `false` otherwise.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True only if the target element is not editable.\r\n * @api\r\n */\r\nexport const targetNotEditable = function(mapBrowserEvent) {\r\n  const target = mapBrowserEvent.originalEvent.target;\r\n  const tagName = target.tagName;\r\n  return (\r\n    tagName !== 'INPUT' &&\r\n      tagName !== 'SELECT' &&\r\n      tagName !== 'TEXTAREA');\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the event originates from a mouse device.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a mouse device.\r\n * @api\r\n */\r\nexport const mouseOnly = function(mapBrowserEvent) {\r\n  assert(mapBrowserEvent.pointerEvent, 56); // mapBrowserEvent must originate from a pointer event\r\n  // see http://www.w3.org/TR/pointerevents/#widl-PointerEvent-pointerType\r\n  return (\r\n    /** @type {module:ol/MapBrowserEvent} */ (mapBrowserEvent).pointerEvent.pointerType == 'mouse'\r\n  );\r\n};\r\n\r\n\r\n/**\r\n * Return `true` if the event originates from a primary pointer in\r\n * contact with the surface or if the left mouse button is pressed.\r\n * See http://www.w3.org/TR/pointerevents/#button-states.\r\n *\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} True if the event originates from a primary pointer.\r\n * @api\r\n */\r\nexport const primaryAction = function(mapBrowserEvent) {\r\n  const pointerEvent = mapBrowserEvent.pointerEvent;\r\n  return pointerEvent.isPrimary && pointerEvent.button === 0;\r\n};\r\n"],"names":["const"],"mappings":"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"}