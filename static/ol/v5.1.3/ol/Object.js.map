{"version":3,"file":"Object.js","sources":["../../src/ol/Object.js"],"sourcesContent":["/**\r\n * @module ol/Object\r\n */\r\nimport {getUid} from './util.js';\r\nimport ObjectEventType from './ObjectEventType.js';\r\nimport Observable from './Observable.js';\r\nimport Event from './events/Event.js';\r\nimport {assign} from './obj.js';\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/Object~BaseObject} instances are instances of this type.\r\n  */\r\nclass ObjectEvent extends Event {\r\n\r\n  /**\r\n   * @param {string} type The event type.\r\n   * @param {string} key The property name.\r\n   * @param {*} oldValue The old value for `key`.\r\n   */\r\n  constructor(type, key, oldValue) {\r\n    super(type);\r\n\r\n    /**\r\n     * The name of the property whose value is changing.\r\n     * @type {string}\r\n     * @api\r\n     */\r\n    this.key = key;\r\n\r\n    /**\r\n     * The old value. To get the new value use `e.target.get(e.key)` where\r\n     * `e` is the event object.\r\n     * @type {*}\r\n     * @api\r\n     */\r\n    this.oldValue = oldValue;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Most non-trivial classes inherit from this.\r\n *\r\n * This extends {@link module:ol/Observable} with observable\r\n * properties, where each property is observable as well as the object as a\r\n * whole.\r\n *\r\n * Classes that inherit from this have pre-defined properties, to which you can\r\n * add your owns. The pre-defined properties are listed in this documentation as\r\n * 'Observable Properties', and have their own accessors; for example,\r\n * {@link module:ol/Map~Map} has a `target` property, accessed with\r\n * `getTarget()` and changed with `setTarget()`. Not all properties are however\r\n * settable. There are also general-purpose accessors `get()` and `set()`. For\r\n * example, `get('target')` is equivalent to `getTarget()`.\r\n *\r\n * The `set` accessors trigger a change event, and you can monitor this by\r\n * registering a listener. For example, {@link module:ol/View~View} has a\r\n * `center` property, so `view.on('change:center', function(evt) {...});` would\r\n * call the function whenever the value of the center property changes. Within\r\n * the function, `evt.target` would be the view, so `evt.target.getCenter()`\r\n * would return the new center.\r\n *\r\n * You can add your own observable properties with\r\n * `object.set('prop', 'value')`, and retrieve that with `object.get('prop')`.\r\n * You can listen for changes on that property value with\r\n * `object.on('change:prop', listener)`. You can get a list of all\r\n * properties with {@link module:ol/Object~BaseObject#getProperties}.\r\n *\r\n * Note that the observable properties are separate from standard JS properties.\r\n * You can, for example, give your map object a title with\r\n * `map.title='New title'` and with `map.set('title', 'Another title')`. The\r\n * first will be a `hasOwnProperty`; the second will appear in\r\n * `getProperties()`. Only the second is observable.\r\n *\r\n * Properties can be deleted by using the unset method. E.g.\r\n * object.unset('foo').\r\n *\r\n * @fires module:ol/Object~ObjectEvent\r\n * @api\r\n */\r\nclass BaseObject extends Observable {\r\n\r\n  /**\r\n   * @param {Object.<string, *>=} opt_values An object with key-value pairs.\r\n   */\r\n  constructor(opt_values) {\r\n    super();\r\n\r\n    // Call {@link module:ol/util~getUid} to ensure that the order of objects' ids is\r\n    // the same as the order in which they were created.  This also helps to\r\n    // ensure that object properties are always added in the same order, which\r\n    // helps many JavaScript engines generate faster code.\r\n    getUid(this);\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object.<string, *>}\r\n     */\r\n    this.values_ = {};\r\n\r\n    if (opt_values !== undefined) {\r\n      this.setProperties(opt_values);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Gets a value.\r\n   * @param {string} key Key name.\r\n   * @return {*} Value.\r\n   * @api\r\n   */\r\n  get(key) {\r\n    let value;\r\n    if (this.values_.hasOwnProperty(key)) {\r\n      value = this.values_[key];\r\n    }\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Get a list of object property names.\r\n   * @return {Array.<string>} List of property names.\r\n   * @api\r\n   */\r\n  getKeys() {\r\n    return Object.keys(this.values_);\r\n  }\r\n\r\n  /**\r\n   * Get an object of all property names and values.\r\n   * @return {Object.<string, *>} Object.\r\n   * @api\r\n   */\r\n  getProperties() {\r\n    return assign({}, this.values_);\r\n  }\r\n\r\n  /**\r\n   * @param {string} key Key name.\r\n   * @param {*} oldValue Old value.\r\n   */\r\n  notify(key, oldValue) {\r\n    let eventType;\r\n    eventType = getChangeEventType(key);\r\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n    eventType = ObjectEventType.PROPERTYCHANGE;\r\n    this.dispatchEvent(new ObjectEvent(eventType, key, oldValue));\r\n  }\r\n\r\n  /**\r\n   * Sets a value.\r\n   * @param {string} key Key name.\r\n   * @param {*} value Value.\r\n   * @param {boolean=} opt_silent Update without triggering an event.\r\n   * @api\r\n   */\r\n  set(key, value, opt_silent) {\r\n    if (opt_silent) {\r\n      this.values_[key] = value;\r\n    } else {\r\n      const oldValue = this.values_[key];\r\n      this.values_[key] = value;\r\n      if (oldValue !== value) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets a collection of key-value pairs.  Note that this changes any existing\r\n   * properties and adds new ones (it does not remove any existing properties).\r\n   * @param {Object.<string, *>} values Values.\r\n   * @param {boolean=} opt_silent Update without triggering an event.\r\n   * @api\r\n   */\r\n  setProperties(values, opt_silent) {\r\n    for (const key in values) {\r\n      this.set(key, values[key], opt_silent);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Unsets a property.\r\n   * @param {string} key Key name.\r\n   * @param {boolean=} opt_silent Unset without triggering an event.\r\n   * @api\r\n   */\r\n  unset(key, opt_silent) {\r\n    if (key in this.values_) {\r\n      const oldValue = this.values_[key];\r\n      delete this.values_[key];\r\n      if (!opt_silent) {\r\n        this.notify(key, oldValue);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @type {Object.<string, string>}\r\n */\r\nconst changeEventTypeCache = {};\r\n\r\n\r\n/**\r\n * @param {string} key Key name.\r\n * @return {string} Change name.\r\n */\r\nexport function getChangeEventType(key) {\r\n  return changeEventTypeCache.hasOwnProperty(key) ?\r\n    changeEventTypeCache[key] :\r\n    (changeEventTypeCache[key] = 'change:' + key);\r\n}\r\n\r\n\r\nexport default BaseObject;\r\n"],"names":["super","let","const","this"],"mappings":"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"}