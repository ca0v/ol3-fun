{"version":3,"file":"resolutionconstraint.js","sources":["../../src/ol/resolutionconstraint.js"],"sourcesContent":["/**\r\n * @module ol/resolutionconstraint\r\n */\r\nimport {linearFindNearest} from './array.js';\r\nimport {clamp} from './math.js';\r\n\r\n\r\n/**\r\n * @typedef {function((number|undefined), number, number): (number|undefined)} Type\r\n */\r\n\r\n\r\n/**\r\n * @param {Array.<number>} resolutions Resolutions.\r\n * @return {module:ol/resolutionconstraint~Type} Zoom function.\r\n */\r\nexport function createSnapToResolutions(resolutions) {\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} delta Delta.\r\n     * @param {number} direction Direction.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function(resolution, delta, direction) {\r\n      if (resolution !== undefined) {\r\n        let z = linearFindNearest(resolutions, resolution, direction);\r\n        z = clamp(z + delta, 0, resolutions.length - 1);\r\n        const index = Math.floor(z);\r\n        if (z != index && index < resolutions.length - 1) {\r\n          const power = resolutions[index] / resolutions[index + 1];\r\n          return resolutions[index] / Math.pow(power, z - index);\r\n        } else {\r\n          return resolutions[index];\r\n        }\r\n      } else {\r\n        return undefined;\r\n      }\r\n    }\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {number} power Power.\r\n * @param {number} maxResolution Maximum resolution.\r\n * @param {number=} opt_maxLevel Maximum level.\r\n * @return {module:ol/resolutionconstraint~Type} Zoom function.\r\n */\r\nexport function createSnapToPower(power, maxResolution, opt_maxLevel) {\r\n  return (\r\n    /**\r\n     * @param {number|undefined} resolution Resolution.\r\n     * @param {number} delta Delta.\r\n     * @param {number} direction Direction.\r\n     * @return {number|undefined} Resolution.\r\n     */\r\n    function(resolution, delta, direction) {\r\n      if (resolution !== undefined) {\r\n        const offset = -direction / 2 + 0.5;\r\n        const oldLevel = Math.floor(\r\n          Math.log(maxResolution / resolution) / Math.log(power) + offset);\r\n        let newLevel = Math.max(oldLevel + delta, 0);\r\n        if (opt_maxLevel !== undefined) {\r\n          newLevel = Math.min(newLevel, opt_maxLevel);\r\n        }\r\n        return maxResolution / Math.pow(power, newLevel);\r\n      } else {\r\n        return undefined;\r\n      }\r\n    });\r\n}\r\n"],"names":["let","const"],"mappings":"AAAA;;;AAGA,QAAQ,iBAAiB,OAAO,YAAY,CAAC;AAC7C,QAAQ,KAAK,OAAO,WAAW,CAAC;;;;;;;;;;;;AAYhC,OAAO,SAAS,uBAAuB,CAAC,WAAW,EAAE;EACnD,OAAO;;;;;;;IAOL,SAAS,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE;MACrC,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5BA,GAAG,CAAC,CAAC,GAAG,iBAAiB,CAAC,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;QAC9D,CAAC,GAAG,KAAK,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,EAAE,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;QAChDC,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC5B,IAAI,CAAC,IAAI,KAAK,IAAI,KAAK,GAAG,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;UAChDA,GAAK,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,GAAG,WAAW,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;UAC1D,OAAO,WAAW,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,GAAG,KAAK,CAAC,CAAC;SACxD,MAAM;UACL,OAAO,WAAW,CAAC,KAAK,CAAC,CAAC;SAC3B;OACF,MAAM;QACL,OAAO,SAAS,CAAC;OAClB;KACF;GACF,CAAC;CACH;;;;;;;;;AASD,OAAO,SAAS,iBAAiB,CAAC,KAAK,EAAE,aAAa,EAAE,YAAY,EAAE;EACpE,OAAO;;;;;;;IAOL,SAAS,UAAU,EAAE,KAAK,EAAE,SAAS,EAAE;MACrC,IAAI,UAAU,KAAK,SAAS,EAAE;QAC5BA,GAAK,CAAC,MAAM,GAAG,CAAC,SAAS,GAAG,CAAC,GAAG,GAAG,CAAC;QACpCA,GAAK,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK;UACzB,IAAI,CAAC,GAAG,CAAC,aAAa,GAAG,UAAU,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,MAAM,CAAC,CAAC;QACnED,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,EAAE,CAAC,CAAC,CAAC;QAC7C,IAAI,YAAY,KAAK,SAAS,EAAE;UAC9B,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;SAC7C;QACD,OAAO,aAAa,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;OAClD,MAAM;QACL,OAAO,SAAS,CAAC;OAClB;KACF,CAAC,CAAC;CACN;"}