{"version":3,"file":"LineString.js","sources":["../../../src/ol/geom/LineString.js"],"sourcesContent":["/**\r\n * @module ol/geom/LineString\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\r\nimport {assignClosestPoint, maxSquaredDelta} from '../geom/flat/closest.js';\r\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\r\nimport {inflateCoordinates} from '../geom/flat/inflate.js';\r\nimport {interpolatePoint, lineStringCoordinateAtM} from '../geom/flat/interpolate.js';\r\nimport {intersectsLineString} from '../geom/flat/intersectsextent.js';\r\nimport {lineStringLength} from '../geom/flat/length.js';\r\nimport {forEach as forEachSegment} from '../geom/flat/segments.js';\r\nimport {douglasPeucker} from '../geom/flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Linestring geometry.\r\n *\r\n * @api\r\n */\r\nclass LineString extends SimpleGeometry {\r\n\r\n  /**\r\n   * @param {Array.<module:ol/coordinate~Coordinate>|Array.<number>} coordinates Coordinates.\r\n   *     For internal use, flat coordinates in combination with `opt_layout` are also accepted.\r\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\r\n   */\r\n  constructor(coordinates, opt_layout) {\r\n\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/coordinate~Coordinate}\r\n     */\r\n    this.flatMidpoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatMidpointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (opt_layout !== undefined && !Array.isArray(coordinates[0])) {\r\n      this.setFlatCoordinates(opt_layout, coordinates);\r\n    } else {\r\n      this.setCoordinates(coordinates, opt_layout);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Append the passed coordinate to the coordinates of the linestring.\r\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n   * @api\r\n   */\r\n  appendCoordinate(coordinate) {\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = coordinate.slice();\r\n    } else {\r\n      extend(this.flatCoordinates, coordinate);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!module:ol/geom/LineString} Clone.\r\n   * @override\r\n   * @api\r\n   */\r\n  clone() {\r\n    return new LineString(this.flatCoordinates.slice(), this.layout);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(maxSquaredDelta(\r\n        this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, 0));\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestPoint(\r\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\r\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\r\n  }\r\n\r\n  /**\r\n   * Iterate over each segment, calling the provided callback.\r\n   * If the callback returns a truthy value the function returns that\r\n   * value immediately. Otherwise the function returns `false`.\r\n   *\r\n   * @param {function(this: S, module:ol/coordinate~Coordinate, module:ol/coordinate~Coordinate): T} callback Function\r\n   *     called for each segment.\r\n   * @return {T|boolean} Value.\r\n   * @template T,S\r\n   * @api\r\n   */\r\n  forEachSegment(callback) {\r\n    return forEachSegment(this.flatCoordinates, 0, this.flatCoordinates.length, this.stride, callback);\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\r\n   * @return {module:ol/coordinate~Coordinate} Coordinate.\r\n   * @api\r\n   */\r\n  getCoordinateAtM(m, opt_extrapolate) {\r\n    if (this.layout != GeometryLayout.XYM &&\r\n        this.layout != GeometryLayout.XYZM) {\r\n      return null;\r\n    }\r\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\r\n    return lineStringCoordinateAtM(this.flatCoordinates, 0,\r\n      this.flatCoordinates.length, this.stride, m, extrapolate);\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the linestring.\r\n   * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates.\r\n   * @override\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinates(\r\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\r\n  }\r\n\r\n  /**\r\n   * Return the coordinate at the provided fraction along the linestring.\r\n   * The `fraction` is a number between 0 and 1, where 0 is the start of the\r\n   * linestring and 1 is the end.\r\n   * @param {number} fraction Fraction.\r\n   * @param {module:ol/coordinate~Coordinate=} opt_dest Optional coordinate whose values will\r\n   *     be modified. If not provided, a new coordinate will be returned.\r\n   * @return {module:ol/coordinate~Coordinate} Coordinate of the interpolated point.\r\n   * @api\r\n   */\r\n  getCoordinateAt(fraction, opt_dest) {\r\n    return interpolatePoint(\r\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\r\n      fraction, opt_dest);\r\n  }\r\n\r\n  /**\r\n   * Return the length of the linestring on projected plane.\r\n   * @return {number} Length (on projected plane).\r\n   * @api\r\n   */\r\n  getLength() {\r\n    return lineStringLength(\r\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Flat midpoint.\r\n   */\r\n  getFlatMidpoint() {\r\n    if (this.flatMidpointRevision_ != this.getRevision()) {\r\n      this.flatMidpoint_ = this.getCoordinateAt(0.5, this.flatMidpoint_);\r\n      this.flatMidpointRevision_ = this.getRevision();\r\n    }\r\n    return this.flatMidpoint_;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    const simplifiedFlatCoordinates = [];\r\n    simplifiedFlatCoordinates.length = douglasPeucker(\r\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\r\n      squaredTolerance, simplifiedFlatCoordinates, 0);\r\n    return new LineString(simplifiedFlatCoordinates, GeometryLayout.XY);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  getType() {\r\n    return GeometryType.LINE_STRING;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLineString(\r\n      this.flatCoordinates, 0, this.flatCoordinates.length, this.stride,\r\n      extent);\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the linestring.\r\n   * @param {!Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\r\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\r\n   * @override\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    this.setLayout(opt_layout, coordinates, 1);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    this.flatCoordinates.length = deflateCoordinates(\r\n      this.flatCoordinates, 0, coordinates, this.stride);\r\n    this.changed();\r\n  }\r\n}\r\n\r\n\r\nexport default LineString;\r\n"],"names":["super","const"],"mappings":"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"}