{"version":3,"file":"transform.js","sources":["../../../../src/ol/geom/flat/transform.js"],"sourcesContent":["/**\r\n * @module ol/geom/flat/transform\r\n */\r\n\r\n\r\n/**\r\n * @param {Array.<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {module:ol/transform~Transform} transform Transform.\r\n * @param {Array.<number>=} opt_dest Destination.\r\n * @return {Array.<number>} Transformed coordinates.\r\n */\r\nexport function transform2D(flatCoordinates, offset, end, stride, transform, opt_dest) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const x = flatCoordinates[j];\r\n    const y = flatCoordinates[j + 1];\r\n    dest[i++] = transform[0] * x + transform[2] * y + transform[4];\r\n    dest[i++] = transform[1] * x + transform[3] * y + transform[5];\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} angle Angle.\r\n * @param {Array.<number>} anchor Rotation anchor point.\r\n * @param {Array.<number>=} opt_dest Destination.\r\n * @return {Array.<number>} Transformed coordinates.\r\n */\r\nexport function rotate(flatCoordinates, offset, end, stride, angle, anchor, opt_dest) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  const cos = Math.cos(angle);\r\n  const sin = Math.sin(angle);\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + deltaX * cos - deltaY * sin;\r\n    dest[i++] = anchorY + deltaX * sin + deltaY * cos;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n\r\n/**\r\n * Scale the coordinates.\r\n * @param {Array.<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} sx Scale factor in the x-direction.\r\n * @param {number} sy Scale factor in the y-direction.\r\n * @param {Array.<number>} anchor Scale anchor point.\r\n * @param {Array.<number>=} opt_dest Destination.\r\n * @return {Array.<number>} Transformed coordinates.\r\n */\r\nexport function scale(flatCoordinates, offset, end, stride, sx, sy, anchor, opt_dest) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  const anchorX = anchor[0];\r\n  const anchorY = anchor[1];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    const deltaX = flatCoordinates[j] - anchorX;\r\n    const deltaY = flatCoordinates[j + 1] - anchorY;\r\n    dest[i++] = anchorX + sx * deltaX;\r\n    dest[i++] = anchorY + sy * deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {number} deltaX Delta X.\r\n * @param {number} deltaY Delta Y.\r\n * @param {Array.<number>=} opt_dest Destination.\r\n * @return {Array.<number>} Transformed coordinates.\r\n */\r\nexport function translate(flatCoordinates, offset, end, stride, deltaX, deltaY, opt_dest) {\r\n  const dest = opt_dest ? opt_dest : [];\r\n  let i = 0;\r\n  for (let j = offset; j < end; j += stride) {\r\n    dest[i++] = flatCoordinates[j] + deltaX;\r\n    dest[i++] = flatCoordinates[j + 1] + deltaY;\r\n    for (let k = j + 2; k < j + stride; ++k) {\r\n      dest[i++] = flatCoordinates[k];\r\n    }\r\n  }\r\n  if (opt_dest && dest.length != i) {\r\n    dest.length = i;\r\n  }\r\n  return dest;\r\n}\r\n"],"names":["const","let"],"mappings":"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"}