{"version":3,"file":"geodesic.js","sources":["../../../../src/ol/geom/flat/geodesic.js"],"sourcesContent":["/**\r\n * @module ol/geom/flat/geodesic\r\n */\r\nimport {squaredSegmentDistance, toRadians, toDegrees} from '../../math.js';\r\nimport {get as getProjection, getTransform} from '../../proj.js';\r\n\r\n\r\n/**\r\n * @param {function(number): module:ol/coordinate~Coordinate} interpolate Interpolate function.\r\n * @param {module:ol/proj~TransformFunction} transform Transform from longitude/latitude to\r\n *     projected coordinates.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array.<number>} Flat coordinates.\r\n */\r\nfunction line(interpolate, transform, squaredTolerance) {\r\n  // FIXME reduce garbage generation\r\n  // FIXME optimize stack operations\r\n\r\n  /** @type {Array.<number>} */\r\n  const flatCoordinates = [];\r\n\r\n  let geoA = interpolate(0);\r\n  let geoB = interpolate(1);\r\n\r\n  let a = transform(geoA);\r\n  let b = transform(geoB);\r\n\r\n  /** @type {Array.<module:ol/coordinate~Coordinate>} */\r\n  const geoStack = [geoB, geoA];\r\n  /** @type {Array.<module:ol/coordinate~Coordinate>} */\r\n  const stack = [b, a];\r\n  /** @type {Array.<number>} */\r\n  const fractionStack = [1, 0];\r\n\r\n  /** @type {!Object.<string, boolean>} */\r\n  const fractions = {};\r\n\r\n  let maxIterations = 1e5;\r\n  let geoM, m, fracA, fracB, fracM, key;\r\n\r\n  while (--maxIterations > 0 && fractionStack.length > 0) {\r\n    // Pop the a coordinate off the stack\r\n    fracA = fractionStack.pop();\r\n    geoA = geoStack.pop();\r\n    a = stack.pop();\r\n    // Add the a coordinate if it has not been added yet\r\n    key = fracA.toString();\r\n    if (!(key in fractions)) {\r\n      flatCoordinates.push(a[0], a[1]);\r\n      fractions[key] = true;\r\n    }\r\n    // Pop the b coordinate off the stack\r\n    fracB = fractionStack.pop();\r\n    geoB = geoStack.pop();\r\n    b = stack.pop();\r\n    // Find the m point between the a and b coordinates\r\n    fracM = (fracA + fracB) / 2;\r\n    geoM = interpolate(fracM);\r\n    m = transform(geoM);\r\n    if (squaredSegmentDistance(m[0], m[1], a[0], a[1],\r\n      b[0], b[1]) < squaredTolerance) {\r\n      // If the m point is sufficiently close to the straight line, then we\r\n      // discard it.  Just use the b coordinate and move on to the next line\r\n      // segment.\r\n      flatCoordinates.push(b[0], b[1]);\r\n      key = fracB.toString();\r\n      fractions[key] = true;\r\n    } else {\r\n      // Otherwise, we need to subdivide the current line segment.  Split it\r\n      // into two and push the two line segments onto the stack.\r\n      fractionStack.push(fracB, fracM, fracM, fracA);\r\n      stack.push(b, m, m, a);\r\n      geoStack.push(geoB, geoM, geoM, geoA);\r\n    }\r\n  }\r\n\r\n  return flatCoordinates;\r\n}\r\n\r\n\r\n/**\r\n * Generate a great-circle arcs between two lat/lon points.\r\n * @param {number} lon1 Longitude 1 in degrees.\r\n * @param {number} lat1 Latitude 1 in degrees.\r\n * @param {number} lon2 Longitude 2 in degrees.\r\n * @param {number} lat2 Latitude 2 in degrees.\r\n * @param {module:ol/proj/Projection} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array.<number>} Flat coordinates.\r\n */\r\nexport function greatCircleArc(lon1, lat1, lon2, lat2, projection, squaredTolerance) {\r\n  const geoProjection = getProjection('EPSG:4326');\r\n\r\n  const cosLat1 = Math.cos(toRadians(lat1));\r\n  const sinLat1 = Math.sin(toRadians(lat1));\r\n  const cosLat2 = Math.cos(toRadians(lat2));\r\n  const sinLat2 = Math.sin(toRadians(lat2));\r\n  const cosDeltaLon = Math.cos(toRadians(lon2 - lon1));\r\n  const sinDeltaLon = Math.sin(toRadians(lon2 - lon1));\r\n  const d = sinLat1 * sinLat2 + cosLat1 * cosLat2 * cosDeltaLon;\r\n\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {module:ol/coordinate~Coordinate} Coordinate.\r\n     */\r\n    function(frac) {\r\n      if (1 <= d) {\r\n        return [lon2, lat2];\r\n      }\r\n      const D = frac * Math.acos(d);\r\n      const cosD = Math.cos(D);\r\n      const sinD = Math.sin(D);\r\n      const y = sinDeltaLon * cosLat2;\r\n      const x = cosLat1 * sinLat2 - sinLat1 * cosLat2 * cosDeltaLon;\r\n      const theta = Math.atan2(y, x);\r\n      const lat = Math.asin(sinLat1 * cosD + cosLat1 * sinD * Math.cos(theta));\r\n      const lon = toRadians(lon1) +\r\n            Math.atan2(Math.sin(theta) * sinD * cosLat1,\r\n              cosD - sinLat1 * Math.sin(lat));\r\n      return [toDegrees(lon), toDegrees(lat)];\r\n    }, getTransform(geoProjection, projection), squaredTolerance);\r\n}\r\n\r\n\r\n/**\r\n * Generate a meridian (line at constant longitude).\r\n * @param {number} lon Longitude.\r\n * @param {number} lat1 Latitude 1.\r\n * @param {number} lat2 Latitude 2.\r\n * @param {module:ol/proj/Projection} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array.<number>} Flat coordinates.\r\n */\r\nexport function meridian(lon, lat1, lat2, projection, squaredTolerance) {\r\n  const epsg4326Projection = getProjection('EPSG:4326');\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {module:ol/coordinate~Coordinate} Coordinate.\r\n     */\r\n    function(frac) {\r\n      return [lon, lat1 + ((lat2 - lat1) * frac)];\r\n    },\r\n    getTransform(epsg4326Projection, projection), squaredTolerance);\r\n}\r\n\r\n\r\n/**\r\n * Generate a parallel (line at constant latitude).\r\n * @param {number} lat Latitude.\r\n * @param {number} lon1 Longitude 1.\r\n * @param {number} lon2 Longitude 2.\r\n * @param {module:ol/proj/Projection} projection Projection.\r\n * @param {number} squaredTolerance Squared tolerance.\r\n * @return {Array.<number>} Flat coordinates.\r\n */\r\nexport function parallel(lat, lon1, lon2, projection, squaredTolerance) {\r\n  const epsg4326Projection = getProjection('EPSG:4326');\r\n  return line(\r\n    /**\r\n     * @param {number} frac Fraction.\r\n     * @return {module:ol/coordinate~Coordinate} Coordinate.\r\n     */\r\n    function(frac) {\r\n      return [lon1 + ((lon2 - lon1) * frac), lat];\r\n    },\r\n    getTransform(epsg4326Projection, projection), squaredTolerance);\r\n}\r\n"],"names":["const","let"],"mappings":"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"}