{"version":3,"file":"MultiLineString.js","sources":["../../../src/ol/geom/MultiLineString.js"],"sourcesContent":["/**\r\n * @module ol/geom/MultiLineString\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY} from '../extent.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\r\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from '../geom/flat/closest.js';\r\nimport {deflateCoordinatesArray} from '../geom/flat/deflate.js';\r\nimport {inflateCoordinatesArray} from '../geom/flat/inflate.js';\r\nimport {interpolatePoint, lineStringsCoordinateAtM} from '../geom/flat/interpolate.js';\r\nimport {intersectsLineStringArray} from '../geom/flat/intersectsextent.js';\r\nimport {douglasPeuckerArray} from '../geom/flat/simplify.js';\r\n\r\n/**\r\n * @classdesc\r\n * Multi-linestring geometry.\r\n *\r\n * @api\r\n */\r\nclass MultiLineString extends SimpleGeometry {\r\n\r\n  /**\r\n   * @param {Array.<Array.<module:ol/coordinate~Coordinate>|module:ol/geom~MultiLineString>|Array.<number>} coordinates\r\n   *     Coordinates or LineString geometries. (For internal use, flat coordinates in\r\n   *     combination with `opt_layout` and `opt_ends` are also accepted.)\r\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\r\n   * @param {Array.<number>} opt_ends Flat coordinate ends for internal use.\r\n   */\r\n  constructor(coordinates, opt_layout, opt_ends) {\r\n\r\n    super();\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    if (Array.isArray(coordinates[0])) {\r\n      this.setCoordinates(coordinates, opt_layout);\r\n    } else if (opt_layout !== undefined && opt_ends) {\r\n      this.setFlatCoordinates(opt_layout, coordinates);\r\n      this.ends_ = opt_ends;\r\n    } else {\r\n      let layout = this.getLayout();\r\n      const flatCoordinates = [];\r\n      const ends = [];\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        const lineString = coordinates[i];\r\n        if (i === 0) {\r\n          layout = lineString.getLayout();\r\n        }\r\n        extend(flatCoordinates, lineString.getFlatCoordinates());\r\n        ends.push(flatCoordinates.length);\r\n      }\r\n      this.setFlatCoordinates(layout, flatCoordinates);\r\n      this.ends_ = ends;\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Append the passed linestring to the multilinestring.\r\n   * @param {module:ol/geom/LineString} lineString LineString.\r\n   * @api\r\n   */\r\n  appendLineString(lineString) {\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = lineString.getFlatCoordinates().slice();\r\n    } else {\r\n      extend(this.flatCoordinates, lineString.getFlatCoordinates().slice());\r\n    }\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!module:ol/geom/MultiLineString} Clone.\r\n   * @override\r\n   * @api\r\n   */\r\n  clone() {\r\n    return new MultiLineString(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\r\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates, 0, this.ends_, this.stride,\r\n      this.maxDelta_, false, x, y, closestPoint, minSquaredDistance);\r\n  }\r\n\r\n  /**\r\n   * Returns the coordinate at `m` using linear interpolation, or `null` if no\r\n   * such coordinate exists.\r\n   *\r\n   * `opt_extrapolate` controls extrapolation beyond the range of Ms in the\r\n   * MultiLineString. If `opt_extrapolate` is `true` then Ms less than the first\r\n   * M will return the first coordinate and Ms greater than the last M will\r\n   * return the last coordinate.\r\n   *\r\n   * `opt_interpolate` controls interpolation between consecutive LineStrings\r\n   * within the MultiLineString. If `opt_interpolate` is `true` the coordinates\r\n   * will be linearly interpolated between the last coordinate of one LineString\r\n   * and the first coordinate of the next LineString.  If `opt_interpolate` is\r\n   * `false` then the function will return `null` for Ms falling between\r\n   * LineStrings.\r\n   *\r\n   * @param {number} m M.\r\n   * @param {boolean=} opt_extrapolate Extrapolate. Default is `false`.\r\n   * @param {boolean=} opt_interpolate Interpolate. Default is `false`.\r\n   * @return {module:ol/coordinate~Coordinate} Coordinate.\r\n   * @api\r\n   */\r\n  getCoordinateAtM(m, opt_extrapolate, opt_interpolate) {\r\n    if ((this.layout != GeometryLayout.XYM &&\r\n         this.layout != GeometryLayout.XYZM) ||\r\n        this.flatCoordinates.length === 0) {\r\n      return null;\r\n    }\r\n    const extrapolate = opt_extrapolate !== undefined ? opt_extrapolate : false;\r\n    const interpolate = opt_interpolate !== undefined ? opt_interpolate : false;\r\n    return lineStringsCoordinateAtM(this.flatCoordinates, 0,\r\n      this.ends_, this.stride, m, extrapolate, interpolate);\r\n  }\r\n\r\n  /**\r\n   * Return the coordinates of the multilinestring.\r\n   * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.\r\n   * @override\r\n   * @api\r\n   */\r\n  getCoordinates() {\r\n    return inflateCoordinatesArray(\r\n      this.flatCoordinates, 0, this.ends_, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * Return the linestring at the specified index.\r\n   * @param {number} index Index.\r\n   * @return {module:ol/geom/LineString} LineString.\r\n   * @api\r\n   */\r\n  getLineString(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LineString(this.flatCoordinates.slice(\r\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\r\n  }\r\n\r\n  /**\r\n   * Return the linestrings of this multilinestring.\r\n   * @return {Array.<module:ol/geom/LineString>} LineStrings.\r\n   * @api\r\n   */\r\n  getLineStrings() {\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const layout = this.layout;\r\n    /** @type {Array.<module:ol/geom/LineString>} */\r\n    const lineStrings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const lineString = new LineString(flatCoordinates.slice(offset, end), layout);\r\n      lineStrings.push(lineString);\r\n      offset = end;\r\n    }\r\n    return lineStrings;\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Flat midpoints.\r\n   */\r\n  getFlatMidpoints() {\r\n    const midpoints = [];\r\n    const flatCoordinates = this.flatCoordinates;\r\n    let offset = 0;\r\n    const ends = this.ends_;\r\n    const stride = this.stride;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const midpoint = interpolatePoint(\r\n        flatCoordinates, offset, end, stride, 0.5);\r\n      extend(midpoints, midpoint);\r\n      offset = end;\r\n    }\r\n    return midpoints;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    const simplifiedFlatCoordinates = [];\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = douglasPeuckerArray(\r\n      this.flatCoordinates, 0, this.ends_, this.stride, squaredTolerance,\r\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\r\n    return new MultiLineString(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  getType() {\r\n    return GeometryType.MULTI_LINE_STRING;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLineStringArray(\r\n      this.flatCoordinates, 0, this.ends_, this.stride, extent);\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the multilinestring.\r\n   * @param {!Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.\r\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\r\n   * @override\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    this.setLayout(opt_layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\n\r\nexport default MultiLineString;\r\n"],"names":["super","let","const"],"mappings":"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"}