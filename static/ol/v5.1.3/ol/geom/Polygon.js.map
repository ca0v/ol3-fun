{"version":3,"file":"Polygon.js","sources":["../../../src/ol/geom/Polygon.js"],"sourcesContent":["/**\r\n * @module ol/geom/Polygon\r\n */\r\nimport {extend} from '../array.js';\r\nimport {closestSquaredDistanceXY, getCenter} from '../extent.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport LinearRing from '../geom/LinearRing.js';\r\nimport Point from '../geom/Point.js';\r\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\r\nimport {offset as sphereOffset} from '../sphere.js';\r\nimport {linearRings as linearRingsArea} from '../geom/flat/area.js';\r\nimport {assignClosestArrayPoint, arrayMaxSquaredDelta} from '../geom/flat/closest.js';\r\nimport {linearRingsContainsXY} from '../geom/flat/contains.js';\r\nimport {deflateCoordinatesArray} from '../geom/flat/deflate.js';\r\nimport {inflateCoordinatesArray} from '../geom/flat/inflate.js';\r\nimport {getInteriorPointOfArray} from '../geom/flat/interiorpoint.js';\r\nimport {intersectsLinearRingArray} from '../geom/flat/intersectsextent.js';\r\nimport {linearRingIsOriented, orientLinearRings} from '../geom/flat/orient.js';\r\nimport {quantizeArray} from '../geom/flat/simplify.js';\r\nimport {modulo} from '../math.js';\r\n\r\n/**\r\n * @classdesc\r\n * Polygon geometry.\r\n *\r\n * @api\r\n */\r\nclass Polygon extends SimpleGeometry {\r\n\r\n  /**\r\n   * @param {!Array.<Array.<module:ol/coordinate~Coordinate>>|!Array.<number>} coordinates\r\n   *     Array of linear rings that define the polygon. The first linear ring of the\r\n   *     array defines the outer-boundary or surface of the polygon. Each subsequent\r\n   *     linear ring defines a hole in the surface of the polygon. A linear ring is\r\n   *     an array of vertices' coordinates where the first coordinate and the last are\r\n   *     equivalent. (For internal use, flat coordinates in combination with\r\n   *     `opt_layout` and `opt_ends` are also accepted.)\r\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\r\n   * @param {Array.<number>=} opt_ends Ends (for internal use with flat coordinates).\r\n   */\r\n  constructor(coordinates, opt_layout, opt_ends) {\r\n\r\n    super();\r\n\r\n    /**\r\n     * @type {Array.<number>}\r\n     * @private\r\n     */\r\n    this.ends_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.flatInteriorPointRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/coordinate~Coordinate}\r\n     */\r\n    this.flatInteriorPoint_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDelta_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxDeltaRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.orientedRevision_ = -1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<number>}\r\n     */\r\n    this.orientedFlatCoordinates_ = null;\r\n\r\n    if (opt_layout !== undefined && opt_ends) {\r\n      this.setFlatCoordinates(opt_layout, coordinates);\r\n      this.ends_ = opt_ends;\r\n    } else {\r\n      this.setCoordinates(coordinates, opt_layout);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Append the passed linear ring to this polygon.\r\n   * @param {module:ol/geom/LinearRing} linearRing Linear ring.\r\n   * @api\r\n   */\r\n  appendLinearRing(linearRing) {\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = linearRing.getFlatCoordinates().slice();\r\n    } else {\r\n      extend(this.flatCoordinates, linearRing.getFlatCoordinates());\r\n    }\r\n    this.ends_.push(this.flatCoordinates.length);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Make a complete copy of the geometry.\r\n   * @return {!module:ol/geom/Polygon} Clone.\r\n   * @override\r\n   * @api\r\n   */\r\n  clone() {\r\n    return new Polygon(this.flatCoordinates.slice(), this.layout, this.ends_.slice());\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  closestPointXY(x, y, closestPoint, minSquaredDistance) {\r\n    if (minSquaredDistance < closestSquaredDistanceXY(this.getExtent(), x, y)) {\r\n      return minSquaredDistance;\r\n    }\r\n    if (this.maxDeltaRevision_ != this.getRevision()) {\r\n      this.maxDelta_ = Math.sqrt(arrayMaxSquaredDelta(\r\n        this.flatCoordinates, 0, this.ends_, this.stride, 0));\r\n      this.maxDeltaRevision_ = this.getRevision();\r\n    }\r\n    return assignClosestArrayPoint(\r\n      this.flatCoordinates, 0, this.ends_, this.stride,\r\n      this.maxDelta_, true, x, y, closestPoint, minSquaredDistance);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  containsXY(x, y) {\r\n    return linearRingsContainsXY(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, x, y);\r\n  }\r\n\r\n  /**\r\n   * Return the area of the polygon on projected plane.\r\n   * @return {number} Area (on projected plane).\r\n   * @api\r\n   */\r\n  getArea() {\r\n    return linearRingsArea(this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride);\r\n  }\r\n\r\n  /**\r\n   * Get the coordinate array for this geometry.  This array has the structure\r\n   * of a GeoJSON coordinate array for polygons.\r\n   *\r\n   * @param {boolean=} opt_right Orient coordinates according to the right-hand\r\n   *     rule (counter-clockwise for exterior and clockwise for interior rings).\r\n   *     If `false`, coordinates will be oriented according to the left-hand rule\r\n   *     (clockwise for exterior and counter-clockwise for interior rings).\r\n   *     By default, coordinate orientation will depend on how the geometry was\r\n   *     constructed.\r\n   * @return {Array.<Array.<module:ol/coordinate~Coordinate>>} Coordinates.\r\n   * @override\r\n   * @api\r\n   */\r\n  getCoordinates(opt_right) {\r\n    let flatCoordinates;\r\n    if (opt_right !== undefined) {\r\n      flatCoordinates = this.getOrientedFlatCoordinates().slice();\r\n      orientLinearRings(\r\n        flatCoordinates, 0, this.ends_, this.stride, opt_right);\r\n    } else {\r\n      flatCoordinates = this.flatCoordinates;\r\n    }\r\n\r\n    return inflateCoordinatesArray(\r\n      flatCoordinates, 0, this.ends_, this.stride);\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Ends.\r\n   */\r\n  getEnds() {\r\n    return this.ends_;\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Interior point.\r\n   */\r\n  getFlatInteriorPoint() {\r\n    if (this.flatInteriorPointRevision_ != this.getRevision()) {\r\n      const flatCenter = getCenter(this.getExtent());\r\n      this.flatInteriorPoint_ = getInteriorPointOfArray(\r\n        this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride,\r\n        flatCenter, 0);\r\n      this.flatInteriorPointRevision_ = this.getRevision();\r\n    }\r\n    return this.flatInteriorPoint_;\r\n  }\r\n\r\n  /**\r\n   * Return an interior point of the polygon.\r\n   * @return {module:ol/geom/Point} Interior point as XYM coordinate, where M is the\r\n   * length of the horizontal intersection that the point belongs to.\r\n   * @api\r\n   */\r\n  getInteriorPoint() {\r\n    return new Point(this.getFlatInteriorPoint(), GeometryLayout.XYM);\r\n  }\r\n\r\n  /**\r\n   * Return the number of rings of the polygon,  this includes the exterior\r\n   * ring and any interior rings.\r\n   *\r\n   * @return {number} Number of rings.\r\n   * @api\r\n   */\r\n  getLinearRingCount() {\r\n    return this.ends_.length;\r\n  }\r\n\r\n  /**\r\n   * Return the Nth linear ring of the polygon geometry. Return `null` if the\r\n   * given index is out of range.\r\n   * The exterior linear ring is available at index `0` and the interior rings\r\n   * at index `1` and beyond.\r\n   *\r\n   * @param {number} index Index.\r\n   * @return {module:ol/geom/LinearRing} Linear ring.\r\n   * @api\r\n   */\r\n  getLinearRing(index) {\r\n    if (index < 0 || this.ends_.length <= index) {\r\n      return null;\r\n    }\r\n    return new LinearRing(this.flatCoordinates.slice(\r\n      index === 0 ? 0 : this.ends_[index - 1], this.ends_[index]), this.layout);\r\n  }\r\n\r\n  /**\r\n   * Return the linear rings of the polygon.\r\n   * @return {Array.<module:ol/geom/LinearRing>} Linear rings.\r\n   * @api\r\n   */\r\n  getLinearRings() {\r\n    const layout = this.layout;\r\n    const flatCoordinates = this.flatCoordinates;\r\n    const ends = this.ends_;\r\n    const linearRings = [];\r\n    let offset = 0;\r\n    for (let i = 0, ii = ends.length; i < ii; ++i) {\r\n      const end = ends[i];\r\n      const linearRing = new LinearRing(flatCoordinates.slice(offset, end), layout);\r\n      linearRings.push(linearRing);\r\n      offset = end;\r\n    }\r\n    return linearRings;\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Oriented flat coordinates.\r\n   */\r\n  getOrientedFlatCoordinates() {\r\n    if (this.orientedRevision_ != this.getRevision()) {\r\n      const flatCoordinates = this.flatCoordinates;\r\n      if (linearRingIsOriented(\r\n        flatCoordinates, 0, this.ends_, this.stride)) {\r\n        this.orientedFlatCoordinates_ = flatCoordinates;\r\n      } else {\r\n        this.orientedFlatCoordinates_ = flatCoordinates.slice();\r\n        this.orientedFlatCoordinates_.length =\r\n            orientLinearRings(\r\n              this.orientedFlatCoordinates_, 0, this.ends_, this.stride);\r\n      }\r\n      this.orientedRevision_ = this.getRevision();\r\n    }\r\n    return this.orientedFlatCoordinates_;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getSimplifiedGeometryInternal(squaredTolerance) {\r\n    const simplifiedFlatCoordinates = [];\r\n    const simplifiedEnds = [];\r\n    simplifiedFlatCoordinates.length = quantizeArray(\r\n      this.flatCoordinates, 0, this.ends_, this.stride,\r\n      Math.sqrt(squaredTolerance),\r\n      simplifiedFlatCoordinates, 0, simplifiedEnds);\r\n    return new Polygon(simplifiedFlatCoordinates, GeometryLayout.XY, simplifiedEnds);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  getType() {\r\n    return GeometryType.POLYGON;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  intersectsExtent(extent) {\r\n    return intersectsLinearRingArray(\r\n      this.getOrientedFlatCoordinates(), 0, this.ends_, this.stride, extent);\r\n  }\r\n\r\n  /**\r\n   * Set the coordinates of the polygon.\r\n   * @param {!Array.<Array.<module:ol/coordinate~Coordinate>>} coordinates Coordinates.\r\n   * @param {module:ol/geom/GeometryLayout=} opt_layout Layout.\r\n   * @override\r\n   * @api\r\n   */\r\n  setCoordinates(coordinates, opt_layout) {\r\n    this.setLayout(opt_layout, coordinates, 2);\r\n    if (!this.flatCoordinates) {\r\n      this.flatCoordinates = [];\r\n    }\r\n    const ends = deflateCoordinatesArray(\r\n      this.flatCoordinates, 0, coordinates, this.stride, this.ends_);\r\n    this.flatCoordinates.length = ends.length === 0 ? 0 : ends[ends.length - 1];\r\n    this.changed();\r\n  }\r\n}\r\n\r\n\r\nexport default Polygon;\r\n\r\n\r\n/**\r\n * Create an approximation of a circle on the surface of a sphere.\r\n * @param {module:ol/coordinate~Coordinate} center Center (`[lon, lat]` in degrees).\r\n * @param {number} radius The great-circle distance from the center to\r\n *     the polygon vertices.\r\n * @param {number=} opt_n Optional number of vertices for the resulting\r\n *     polygon. Default is `32`.\r\n * @param {number=} opt_sphereRadius Optional radius for the sphere (defaults to\r\n *     the Earth's mean radius using the WGS84 ellipsoid).\r\n * @return {module:ol/geom/Polygon} The \"circular\" polygon.\r\n * @api\r\n */\r\nexport function circular(center, radius, opt_n, opt_sphereRadius) {\r\n  const n = opt_n ? opt_n : 32;\r\n  /** @type {Array.<number>} */\r\n  const flatCoordinates = [];\r\n  for (let i = 0; i < n; ++i) {\r\n    extend(flatCoordinates, sphereOffset(center, radius, 2 * Math.PI * i / n, opt_sphereRadius));\r\n  }\r\n  flatCoordinates.push(flatCoordinates[0], flatCoordinates[1]);\r\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\r\n}\r\n\r\n\r\n/**\r\n * Create a polygon from an extent. The layout used is `XY`.\r\n * @param {module:ol/extent~Extent} extent The extent.\r\n * @return {module:ol/geom/Polygon} The polygon.\r\n * @api\r\n */\r\nexport function fromExtent(extent) {\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const flatCoordinates =\r\n      [minX, minY, minX, maxY, maxX, maxY, maxX, minY, minX, minY];\r\n  return new Polygon(flatCoordinates, GeometryLayout.XY, [flatCoordinates.length]);\r\n}\r\n\r\n\r\n/**\r\n * Create a regular polygon from a circle.\r\n * @param {module:ol/geom/Circle} circle Circle geometry.\r\n * @param {number=} opt_sides Number of sides of the polygon. Default is 32.\r\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\r\n *     radians. Default is 0.\r\n * @return {module:ol/geom/Polygon} Polygon geometry.\r\n * @api\r\n */\r\nexport function fromCircle(circle, opt_sides, opt_angle) {\r\n  const sides = opt_sides ? opt_sides : 32;\r\n  const stride = circle.getStride();\r\n  const layout = circle.getLayout();\r\n  const center = circle.getCenter();\r\n  const arrayLength = stride * (sides + 1);\r\n  const flatCoordinates = new Array(arrayLength);\r\n  for (let i = 0; i < arrayLength; i += stride) {\r\n    flatCoordinates[i] = 0;\r\n    flatCoordinates[i + 1] = 0;\r\n    for (let j = 2; j < stride; j++) {\r\n      flatCoordinates[i + j] = center[j];\r\n    }\r\n  }\r\n  const ends = [flatCoordinates.length];\r\n  const polygon = new Polygon(flatCoordinates, layout, ends);\r\n  makeRegular(polygon, center, circle.getRadius(), opt_angle);\r\n  return polygon;\r\n}\r\n\r\n\r\n/**\r\n * Modify the coordinates of a polygon to make it a regular polygon.\r\n * @param {module:ol/geom/Polygon} polygon Polygon geometry.\r\n * @param {module:ol/coordinate~Coordinate} center Center of the regular polygon.\r\n * @param {number} radius Radius of the regular polygon.\r\n * @param {number=} opt_angle Start angle for the first vertex of the polygon in\r\n *     radians. Default is 0.\r\n */\r\nexport function makeRegular(polygon, center, radius, opt_angle) {\r\n  const flatCoordinates = polygon.getFlatCoordinates();\r\n  const stride = polygon.getStride();\r\n  const sides = flatCoordinates.length / stride - 1;\r\n  const startAngle = opt_angle ? opt_angle : 0;\r\n  for (let i = 0; i <= sides; ++i) {\r\n    const offset = i * stride;\r\n    const angle = startAngle + (modulo(i, sides) * 2 * Math.PI / sides);\r\n    flatCoordinates[offset] = center[0] + (radius * Math.cos(angle));\r\n    flatCoordinates[offset + 1] = center[1] + (radius * Math.sin(angle));\r\n  }\r\n  polygon.changed();\r\n}\r\n"],"names":["super","let","const"],"mappings":"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"}