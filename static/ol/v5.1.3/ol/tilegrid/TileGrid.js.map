{"version":3,"file":"TileGrid.js","sources":["../../../src/ol/tilegrid/TileGrid.js"],"sourcesContent":["/**\r\n * @module ol/tilegrid/TileGrid\r\n */\r\nimport {DEFAULT_TILE_SIZE} from './common.js';\r\nimport {assert} from '../asserts.js';\r\nimport TileRange, {createOrUpdate as createOrUpdateTileRange} from '../TileRange.js';\r\nimport {isSorted, linearFindNearest} from '../array.js';\r\nimport {createOrUpdate, getTopLeft} from '../extent.js';\r\nimport {clamp} from '../math.js';\r\nimport {toSize} from '../size.js';\r\nimport {createOrUpdate as createOrUpdateTileCoord} from '../tilecoord.js';\r\n\r\n\r\n/**\r\n * @private\r\n * @type {module:ol/tilecoord~TileCoord}\r\n */\r\nconst tmpTileCoord = [0, 0, 0];\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/extent~Extent} [extent] Extent for the tile grid. No tiles outside this\r\n * extent will be requested by {@link module:ol/source/Tile} sources. When no `origin` or\r\n * `origins` are configured, the `origin` will be set to the top-left corner of the extent.\r\n * @property {number} [minZoom=0] Minimum zoom.\r\n * @property {module:ol/coordinate~Coordinate} [origin] The tile grid origin, i.e. where the `x`\r\n * and `y` axes meet (`[z, 0, 0]`). Tile coordinates increase left to right and upwards. If not\r\n * specified, `extent` or `origins` must be provided.\r\n * @property {Array.<module:ol/coordinate~Coordinate>} [origins] Tile grid origins, i.e. where\r\n * the `x` and `y` axes meet (`[z, 0, 0]`), for each zoom level. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * origin. Tile coordinates increase left to right and upwards. If not specified, `extent` or\r\n * `origin` must be provided.\r\n * @property {!Array.<number>} resolutions Resolutions. The array index of each resolution needs\r\n * to match the zoom level. This means that even if a `minZoom` is configured, the resolutions\r\n * array will have a length of `maxZoom + 1`.\r\n * @property {Array.<module:ol/size~Size>} [sizes] Sizes.\r\n * @property {number|module:ol/size~Size} [tileSize] Tile size.\r\n * Default is `[256, 256]`.\r\n * @property {Array.<module:ol/size~Size>} [tileSizes] Tile sizes. If given, the array length\r\n * should match the length of the `resolutions` array, i.e. each resolution can have a different\r\n * tile size.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Base class for setting the grid pattern for sources accessing tiled-image\r\n * servers.\r\n * @api\r\n */\r\nclass TileGrid {\r\n  /**\r\n   * @param {module:ol/tilegrid/TileGrid~Options} options Tile grid options.\r\n   */\r\n  constructor(options) {\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.minZoom = options.minZoom !== undefined ? options.minZoom : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Array.<number>}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n    assert(isSorted(this.resolutions_, function(a, b) {\r\n      return b - a;\r\n    }, true), 17); // `resolutions` must be sorted in descending order\r\n\r\n\r\n    // check if we've got a consistent zoom factor and origin\r\n    let zoomFactor;\r\n    if (!options.origins) {\r\n      for (let i = 0, ii = this.resolutions_.length - 1; i < ii; ++i) {\r\n        if (!zoomFactor) {\r\n          zoomFactor = this.resolutions_[i] / this.resolutions_[i + 1];\r\n        } else {\r\n          if (this.resolutions_[i] / this.resolutions_[i + 1] !== zoomFactor) {\r\n            zoomFactor = undefined;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.zoomFactor_ = zoomFactor;\r\n\r\n\r\n    /**\r\n     * @protected\r\n     * @type {number}\r\n     */\r\n    this.maxZoom = this.resolutions_.length - 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/coordinate~Coordinate}\r\n     */\r\n    this.origin_ = options.origin !== undefined ? options.origin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/coordinate~Coordinate>}\r\n     */\r\n    this.origins_ = null;\r\n    if (options.origins !== undefined) {\r\n      this.origins_ = options.origins;\r\n      assert(this.origins_.length == this.resolutions_.length,\r\n        20); // Number of `origins` and `resolutions` must be equal\r\n    }\r\n\r\n    const extent = options.extent;\r\n\r\n    if (extent !== undefined &&\r\n        !this.origin_ && !this.origins_) {\r\n      this.origin_ = getTopLeft(extent);\r\n    }\r\n\r\n    assert(\r\n      (!this.origin_ && this.origins_) || (this.origin_ && !this.origins_),\r\n      18); // Either `origin` or `origins` must be configured, never both\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<number|module:ol/size~Size>}\r\n     */\r\n    this.tileSizes_ = null;\r\n    if (options.tileSizes !== undefined) {\r\n      this.tileSizes_ = options.tileSizes;\r\n      assert(this.tileSizes_.length == this.resolutions_.length,\r\n        19); // Number of `tileSizes` and `resolutions` must be equal\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|module:ol/size~Size}\r\n     */\r\n    this.tileSize_ = options.tileSize !== undefined ?\r\n      options.tileSize :\r\n      !this.tileSizes_ ? DEFAULT_TILE_SIZE : null;\r\n    assert(\r\n      (!this.tileSize_ && this.tileSizes_) ||\r\n        (this.tileSize_ && !this.tileSizes_),\r\n      22); // Either `tileSize` or `tileSizes` must be configured, never both\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/extent~Extent}\r\n     */\r\n    this.extent_ = extent !== undefined ? extent : null;\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/TileRange>}\r\n     */\r\n    this.fullTileRanges_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/size~Size}\r\n     */\r\n    this.tmpSize_ = [0, 0];\r\n\r\n    if (options.sizes !== undefined) {\r\n      this.fullTileRanges_ = options.sizes.map(function(size, z) {\r\n        const tileRange = new TileRange(\r\n          Math.min(0, size[0]), Math.max(size[0] - 1, -1),\r\n          Math.min(0, size[1]), Math.max(size[1] - 1, -1));\r\n        return tileRange;\r\n      }, this);\r\n    } else if (extent) {\r\n      this.calculateTileRanges_(extent);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Call a function with each tile coordinate for a given extent and zoom level.\r\n   *\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {number} zoom Integer zoom level.\r\n   * @param {function(module:ol/tilecoord~TileCoord)} callback Function called with each tile coordinate.\r\n   * @api\r\n   */\r\n  forEachTileCoord(extent, zoom, callback) {\r\n    const tileRange = this.getTileRangeForExtentAndZ(extent, zoom);\r\n    for (let i = tileRange.minX, ii = tileRange.maxX; i <= ii; ++i) {\r\n      for (let j = tileRange.minY, jj = tileRange.maxY; j <= jj; ++j) {\r\n        callback([zoom, i, j]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @param {function(this: T, number, module:ol/TileRange): boolean} callback Callback.\r\n   * @param {T=} opt_this The object to use as `this` in `callback`.\r\n   * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.\r\n   * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\r\n   * @return {boolean} Callback succeeded.\r\n   * @template T\r\n   */\r\n  forEachTileCoordParentTileRange(tileCoord, callback, opt_this, opt_tileRange, opt_extent) {\r\n    let tileRange, x, y;\r\n    let tileCoordExtent = null;\r\n    let z = tileCoord[0] - 1;\r\n    if (this.zoomFactor_ === 2) {\r\n      x = tileCoord[1];\r\n      y = tileCoord[2];\r\n    } else {\r\n      tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\r\n    }\r\n    while (z >= this.minZoom) {\r\n      if (this.zoomFactor_ === 2) {\r\n        x = Math.floor(x / 2);\r\n        y = Math.floor(y / 2);\r\n        tileRange = createOrUpdateTileRange(x, x, y, y, opt_tileRange);\r\n      } else {\r\n        tileRange = this.getTileRangeForExtentAndZ(tileCoordExtent, z, opt_tileRange);\r\n      }\r\n      if (callback.call(opt_this, z, tileRange)) {\r\n        return true;\r\n      }\r\n      --z;\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Get the extent for this tile grid, if it was configured.\r\n   * @return {module:ol/extent~Extent} Extent.\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the grid.\r\n   * @return {number} Max zoom.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return this.maxZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the grid.\r\n   * @return {number} Min zoom.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return this.minZoom;\r\n  }\r\n\r\n  /**\r\n   * Get the origin for the grid at the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {module:ol/coordinate~Coordinate} Origin.\r\n   * @api\r\n   */\r\n  getOrigin(z) {\r\n    if (this.origin_) {\r\n      return this.origin_;\r\n    } else {\r\n      return this.origins_[z];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for the given zoom level.\r\n   * @param {number} z Integer zoom level.\r\n   * @return {number} Resolution.\r\n   * @api\r\n   */\r\n  getResolution(z) {\r\n    return this.resolutions_[z];\r\n  }\r\n\r\n  /**\r\n   * Get the list of resolutions for the tile grid.\r\n   * @return {Array.<number>} Resolutions.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @param {module:ol/TileRange=} opt_tileRange Temporary module:ol/TileRange object.\r\n   * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\r\n   * @return {module:ol/TileRange} Tile range.\r\n   */\r\n  getTileCoordChildTileRange(tileCoord, opt_tileRange, opt_extent) {\r\n    if (tileCoord[0] < this.maxZoom) {\r\n      if (this.zoomFactor_ === 2) {\r\n        const minX = tileCoord[1] * 2;\r\n        const minY = tileCoord[2] * 2;\r\n        return createOrUpdateTileRange(minX, minX + 1, minY, minY + 1, opt_tileRange);\r\n      }\r\n      const tileCoordExtent = this.getTileCoordExtent(tileCoord, opt_extent);\r\n      return this.getTileRangeForExtentAndZ(\r\n        tileCoordExtent, tileCoord[0] + 1, opt_tileRange);\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Get the extent for a tile range.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {module:ol/TileRange} tileRange Tile range.\r\n   * @param {module:ol/extent~Extent=} opt_extent Temporary module:ol/extent~Extent object.\r\n   * @return {module:ol/extent~Extent} Extent.\r\n   */\r\n  getTileRangeExtent(z, tileRange, opt_extent) {\r\n    const origin = this.getOrigin(z);\r\n    const resolution = this.getResolution(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n    const minX = origin[0] + tileRange.minX * tileSize[0] * resolution;\r\n    const maxX = origin[0] + (tileRange.maxX + 1) * tileSize[0] * resolution;\r\n    const minY = origin[1] + tileRange.minY * tileSize[1] * resolution;\r\n    const maxY = origin[1] + (tileRange.maxY + 1) * tileSize[1] * resolution;\r\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\r\n  }\r\n\r\n  /**\r\n   * Get a tile range for the given extent and integer zoom level.\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {module:ol/TileRange=} opt_tileRange Temporary tile range object.\r\n   * @return {module:ol/TileRange} Tile range.\r\n   */\r\n  getTileRangeForExtentAndZ(extent, z, opt_tileRange) {\r\n    const tileCoord = tmpTileCoord;\r\n    this.getTileCoordForXYAndZ_(extent[0], extent[1], z, false, tileCoord);\r\n    const minX = tileCoord[1];\r\n    const minY = tileCoord[2];\r\n    this.getTileCoordForXYAndZ_(extent[2], extent[3], z, true, tileCoord);\r\n    return createOrUpdateTileRange(minX, tileCoord[1], minY, tileCoord[2], opt_tileRange);\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @return {module:ol/coordinate~Coordinate} Tile center.\r\n   */\r\n  getTileCoordCenter(tileCoord) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    return [\r\n      origin[0] + (tileCoord[1] + 0.5) * tileSize[0] * resolution,\r\n      origin[1] + (tileCoord[2] + 0.5) * tileSize[1] * resolution\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Get the extent of a tile coordinate.\r\n   *\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @param {module:ol/extent~Extent=} opt_extent Temporary extent object.\r\n   * @return {module:ol/extent~Extent} Extent.\r\n   * @api\r\n   */\r\n  getTileCoordExtent(tileCoord, opt_extent) {\r\n    const origin = this.getOrigin(tileCoord[0]);\r\n    const resolution = this.getResolution(tileCoord[0]);\r\n    const tileSize = toSize(this.getTileSize(tileCoord[0]), this.tmpSize_);\r\n    const minX = origin[0] + tileCoord[1] * tileSize[0] * resolution;\r\n    const minY = origin[1] + tileCoord[2] * tileSize[1] * resolution;\r\n    const maxX = minX + tileSize[0] * resolution;\r\n    const maxY = minY + tileSize[1] * resolution;\r\n    return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for the given map coordinate and resolution.  This\r\n   * method considers that coordinates that intersect tile boundaries should be\r\n   * assigned the higher tile coordinate.\r\n   *\r\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.\r\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndResolution(coordinate, resolution, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndResolution_(\r\n      coordinate[0], coordinate[1], resolution, false, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Note that this method should not be called for resolutions that correspond\r\n   * to an integer zoom level.  Instead call the `getTileCoordForXYAndZ_` method.\r\n   * @param {number} x X.\r\n   * @param {number} y Y.\r\n   * @param {number} resolution Resolution (for a non-integer zoom level).\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.\r\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndResolution_(x, y, resolution, reverseIntersectionPolicy, opt_tileCoord) {\r\n    const z = this.getZForResolution(resolution);\r\n    const scale = resolution / this.getResolution(z);\r\n    const origin = this.getOrigin(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    const adjustX = reverseIntersectionPolicy ? 0.5 : 0;\r\n    const adjustY = reverseIntersectionPolicy ? 0 : 0.5;\r\n    const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\r\n    const yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);\r\n    let tileCoordX = scale * xFromOrigin / tileSize[0];\r\n    let tileCoordY = scale * yFromOrigin / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = Math.ceil(tileCoordX) - 1;\r\n      tileCoordY = Math.ceil(tileCoordY) - 1;\r\n    } else {\r\n      tileCoordX = Math.floor(tileCoordX);\r\n      tileCoordY = Math.floor(tileCoordY);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Although there is repetition between this method and `getTileCoordForXYAndResolution_`,\r\n   * they should have separate implementations.  This method is for integer zoom\r\n   * levels.  The other method should only be called for resolutions corresponding\r\n   * to non-integer zoom levels.\r\n   * @param {number} x Map x coordinate.\r\n   * @param {number} y Map y coordinate.\r\n   * @param {number} z Integer zoom level.\r\n   * @param {boolean} reverseIntersectionPolicy Instead of letting edge\r\n   *     intersections go to the higher tile coordinate, let edge intersections\r\n   *     go to the lower tile coordinate.\r\n   * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Temporary module:ol/tilecoord~TileCoord object.\r\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\r\n   * @private\r\n   */\r\n  getTileCoordForXYAndZ_(x, y, z, reverseIntersectionPolicy, opt_tileCoord) {\r\n    const origin = this.getOrigin(z);\r\n    const resolution = this.getResolution(z);\r\n    const tileSize = toSize(this.getTileSize(z), this.tmpSize_);\r\n\r\n    const adjustX = reverseIntersectionPolicy ? 0.5 : 0;\r\n    const adjustY = reverseIntersectionPolicy ? 0 : 0.5;\r\n    const xFromOrigin = Math.floor((x - origin[0]) / resolution + adjustX);\r\n    const yFromOrigin = Math.floor((y - origin[1]) / resolution + adjustY);\r\n    let tileCoordX = xFromOrigin / tileSize[0];\r\n    let tileCoordY = yFromOrigin / tileSize[1];\r\n\r\n    if (reverseIntersectionPolicy) {\r\n      tileCoordX = Math.ceil(tileCoordX) - 1;\r\n      tileCoordY = Math.ceil(tileCoordY) - 1;\r\n    } else {\r\n      tileCoordX = Math.floor(tileCoordX);\r\n      tileCoordY = Math.floor(tileCoordY);\r\n    }\r\n\r\n    return createOrUpdateTileCoord(z, tileCoordX, tileCoordY, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * Get a tile coordinate given a map coordinate and zoom level.\r\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n   * @param {number} z Zoom level.\r\n   * @param {module:ol/tilecoord~TileCoord=} opt_tileCoord Destination module:ol/tilecoord~TileCoord object.\r\n   * @return {module:ol/tilecoord~TileCoord} Tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoordForCoordAndZ(coordinate, z, opt_tileCoord) {\r\n    return this.getTileCoordForXYAndZ_(\r\n      coordinate[0], coordinate[1], z, false, opt_tileCoord);\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @return {number} Tile resolution.\r\n   */\r\n  getTileCoordResolution(tileCoord) {\r\n    return this.resolutions_[tileCoord[0]];\r\n  }\r\n\r\n  /**\r\n   * Get the tile size for a zoom level. The type of the return value matches the\r\n   * `tileSize` or `tileSizes` that the tile grid was configured with. To always\r\n   * get an `module:ol/size~Size`, run the result through `module:ol/size~Size.toSize()`.\r\n   * @param {number} z Z.\r\n   * @return {number|module:ol/size~Size} Tile size.\r\n   * @api\r\n   */\r\n  getTileSize(z) {\r\n    if (this.tileSize_) {\r\n      return this.tileSize_;\r\n    } else {\r\n      return this.tileSizes_[z];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Zoom level.\r\n   * @return {module:ol/TileRange} Extent tile range for the specified zoom level.\r\n   */\r\n  getFullTileRange(z) {\r\n    if (!this.fullTileRanges_) {\r\n      return null;\r\n    } else {\r\n      return this.fullTileRanges_[z];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Resolution.\r\n   * @param {number=} opt_direction If 0, the nearest resolution will be used.\r\n   *     If 1, the nearest lower resolution will be used. If -1, the nearest\r\n   *     higher resolution will be used. Default is 0.\r\n   * @return {number} Z.\r\n   * @api\r\n   */\r\n  getZForResolution(resolution, opt_direction) {\r\n    const z = linearFindNearest(this.resolutions_, resolution, opt_direction || 0);\r\n    return clamp(z, this.minZoom, this.maxZoom);\r\n  }\r\n\r\n  /**\r\n   * @param {!module:ol/extent~Extent} extent Extent for this tile grid.\r\n   * @private\r\n   */\r\n  calculateTileRanges_(extent) {\r\n    const length = this.resolutions_.length;\r\n    const fullTileRanges = new Array(length);\r\n    for (let z = this.minZoom; z < length; ++z) {\r\n      fullTileRanges[z] = this.getTileRangeForExtentAndZ(extent, z);\r\n    }\r\n    this.fullTileRanges_ = fullTileRanges;\r\n  }\r\n}\r\n\r\n\r\nexport default TileGrid;\r\n"],"names":["const","let","this"],"mappings":"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"}