{"version":3,"file":"sphere.js","sources":["../../src/ol/sphere.js"],"sourcesContent":["/**\r\n * @license\r\n * Latitude/longitude spherical geodesy formulae taken from\r\n * http://www.movable-type.co.uk/scripts/latlong.html\r\n * Licensed under CC-BY-3.0.\r\n */\r\n\r\n/**\r\n * @module ol/sphere\r\n */\r\nimport {toRadians, toDegrees} from './math.js';\r\nimport GeometryType from './geom/GeometryType.js';\r\n\r\n\r\n/**\r\n * Object literal with options for the {@link getLength} or {@link getArea}\r\n * functions.\r\n * @typedef {Object} SphereMetricOptions\r\n * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857']\r\n * Projection of the  geometry.  By default, the geometry is assumed to be in\r\n * Web Mercator.\r\n * @property {number} [radius=6371008.8] Sphere radius.  By default, the radius of the\r\n * earth is used (Clarke 1866 Authalic Sphere).\r\n */\r\n\r\n\r\n/**\r\n * The mean Earth radius (1/3 * (2a + b)) for the WGS84 ellipsoid.\r\n * https://en.wikipedia.org/wiki/Earth_radius#Mean_radius\r\n * @type {number}\r\n */\r\nexport const DEFAULT_RADIUS = 6371008.8;\r\n\r\n\r\n/**\r\n * Get the great circle distance (in meters) between two geographic coordinates.\r\n * @param {Array} c1 Starting coordinate.\r\n * @param {Array} c2 Ending coordinate.\r\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\r\n *     mean radius using the WGS84 ellipsoid.\r\n * @return {number} The great circle distance between the points (in meters).\r\n * @api\r\n */\r\nexport function getDistance(c1, c2, opt_radius) {\r\n  const radius = opt_radius || DEFAULT_RADIUS;\r\n  const lat1 = toRadians(c1[1]);\r\n  const lat2 = toRadians(c2[1]);\r\n  const deltaLatBy2 = (lat2 - lat1) / 2;\r\n  const deltaLonBy2 = toRadians(c2[0] - c1[0]) / 2;\r\n  const a = Math.sin(deltaLatBy2) * Math.sin(deltaLatBy2) +\r\n      Math.sin(deltaLonBy2) * Math.sin(deltaLonBy2) *\r\n      Math.cos(lat1) * Math.cos(lat2);\r\n  return 2 * radius * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n}\r\n\r\n\r\n/**\r\n * Get the cumulative great circle length of linestring coordinates (geographic).\r\n * @param {Array} coordinates Linestring coordinates.\r\n * @param {number} radius The sphere radius to use.\r\n * @return {number} The length (in meters).\r\n */\r\nfunction getLengthInternal(coordinates, radius) {\r\n  let length = 0;\r\n  for (let i = 0, ii = coordinates.length; i < ii - 1; ++i) {\r\n    length += getDistance(coordinates[i], coordinates[i + 1], radius);\r\n  }\r\n  return length;\r\n}\r\n\r\n\r\n/**\r\n * Get the spherical length of a geometry.  This length is the sum of the\r\n * great circle distances between coordinates.  For polygons, the length is\r\n * the sum of all rings.  For points, the length is zero.  For multi-part\r\n * geometries, the length is the sum of the length of each part.\r\n * @param {module:ol/geom/Geometry} geometry A geometry.\r\n * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the\r\n * length calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\r\n * You can change this by providing a `projection` option.\r\n * @return {number} The spherical length (in meters).\r\n * @api\r\n */\r\nexport function getLength(geometry, opt_options) {\r\n  const options = opt_options || {};\r\n  const radius = options.radius || DEFAULT_RADIUS;\r\n  const projection = options.projection || 'EPSG:3857';\r\n  const type = geometry.getType();\r\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\r\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\r\n  }\r\n  let length = 0;\r\n  let coordinates, coords, i, ii, j, jj;\r\n  switch (type) {\r\n    case GeometryType.POINT:\r\n    case GeometryType.MULTI_POINT: {\r\n      break;\r\n    }\r\n    case GeometryType.LINE_STRING:\r\n    case GeometryType.LINEAR_RING: {\r\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\r\n      length = getLengthInternal(coordinates, radius);\r\n      break;\r\n    }\r\n    case GeometryType.MULTI_LINE_STRING:\r\n    case GeometryType.POLYGON: {\r\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        length += getLengthInternal(coordinates[i], radius);\r\n      }\r\n      break;\r\n    }\r\n    case GeometryType.MULTI_POLYGON: {\r\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coords = coordinates[i];\r\n        for (j = 0, jj = coords.length; j < jj; ++j) {\r\n          length += getLengthInternal(coords[j], radius);\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case GeometryType.GEOMETRY_COLLECTION: {\r\n      const geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();\r\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n        length += getLength(geometries[i], opt_options);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return length;\r\n}\r\n\r\n\r\n/**\r\n * Returns the spherical area for a list of coordinates.\r\n *\r\n * [Reference](https://trs-new.jpl.nasa.gov/handle/2014/40409)\r\n * Robert. G. Chamberlain and William H. Duquette, \"Some Algorithms for\r\n * Polygons on a Sphere\", JPL Publication 07-03, Jet Propulsion\r\n * Laboratory, Pasadena, CA, June 2007\r\n *\r\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates List of coordinates of a linear\r\n * ring. If the ring is oriented clockwise, the area will be positive,\r\n * otherwise it will be negative.\r\n * @param {number} radius The sphere radius.\r\n * @return {number} Area (in square meters).\r\n */\r\nfunction getAreaInternal(coordinates, radius) {\r\n  let area = 0;\r\n  const len = coordinates.length;\r\n  let x1 = coordinates[len - 1][0];\r\n  let y1 = coordinates[len - 1][1];\r\n  for (let i = 0; i < len; i++) {\r\n    const x2 = coordinates[i][0];\r\n    const y2 = coordinates[i][1];\r\n    area += toRadians(x2 - x1) *\r\n        (2 + Math.sin(toRadians(y1)) +\r\n        Math.sin(toRadians(y2)));\r\n    x1 = x2;\r\n    y1 = y2;\r\n  }\r\n  return area * radius * radius / 2.0;\r\n}\r\n\r\n\r\n/**\r\n * Get the spherical area of a geometry.  This is the area (in meters) assuming\r\n * that polygon edges are segments of great circles on a sphere.\r\n * @param {module:ol/geom/Geometry} geometry A geometry.\r\n * @param {module:ol/sphere~SphereMetricOptions=} opt_options Options for the area\r\n *     calculation.  By default, geometries are assumed to be in 'EPSG:3857'.\r\n *     You can change this by providing a `projection` option.\r\n * @return {number} The spherical area (in square meters).\r\n * @api\r\n */\r\nexport function getArea(geometry, opt_options) {\r\n  const options = opt_options || {};\r\n  const radius = options.radius || DEFAULT_RADIUS;\r\n  const projection = options.projection || 'EPSG:3857';\r\n  const type = geometry.getType();\r\n  if (type !== GeometryType.GEOMETRY_COLLECTION) {\r\n    geometry = geometry.clone().transform(projection, 'EPSG:4326');\r\n  }\r\n  let area = 0;\r\n  let coordinates, coords, i, ii, j, jj;\r\n  switch (type) {\r\n    case GeometryType.POINT:\r\n    case GeometryType.MULTI_POINT:\r\n    case GeometryType.LINE_STRING:\r\n    case GeometryType.MULTI_LINE_STRING:\r\n    case GeometryType.LINEAR_RING: {\r\n      break;\r\n    }\r\n    case GeometryType.POLYGON: {\r\n      coordinates = /** @type {module:ol/geom/Polygon} */ (geometry).getCoordinates();\r\n      area = Math.abs(getAreaInternal(coordinates[0], radius));\r\n      for (i = 1, ii = coordinates.length; i < ii; ++i) {\r\n        area -= Math.abs(getAreaInternal(coordinates[i], radius));\r\n      }\r\n      break;\r\n    }\r\n    case GeometryType.MULTI_POLYGON: {\r\n      coordinates = /** @type {module:ol/geom/SimpleGeometry} */ (geometry).getCoordinates();\r\n      for (i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coords = coordinates[i];\r\n        area += Math.abs(getAreaInternal(coords[0], radius));\r\n        for (j = 1, jj = coords.length; j < jj; ++j) {\r\n          area -= Math.abs(getAreaInternal(coords[j], radius));\r\n        }\r\n      }\r\n      break;\r\n    }\r\n    case GeometryType.GEOMETRY_COLLECTION: {\r\n      const geometries = /** @type {module:ol/geom/GeometryCollection} */ (geometry).getGeometries();\r\n      for (i = 0, ii = geometries.length; i < ii; ++i) {\r\n        area += getArea(geometries[i], opt_options);\r\n      }\r\n      break;\r\n    }\r\n    default: {\r\n      throw new Error('Unsupported geometry type: ' + type);\r\n    }\r\n  }\r\n  return area;\r\n}\r\n\r\n\r\n/**\r\n * Returns the coordinate at the given distance and bearing from `c1`.\r\n *\r\n * @param {module:ol/coordinate~Coordinate} c1 The origin point (`[lon, lat]` in degrees).\r\n * @param {number} distance The great-circle distance between the origin\r\n *     point and the target point.\r\n * @param {number} bearing The bearing (in radians).\r\n * @param {number=} opt_radius The sphere radius to use.  Defaults to the Earth's\r\n *     mean radius using the WGS84 ellipsoid.\r\n * @return {module:ol/coordinate~Coordinate} The target point.\r\n */\r\nexport function offset(c1, distance, bearing, opt_radius) {\r\n  const radius = opt_radius || DEFAULT_RADIUS;\r\n  const lat1 = toRadians(c1[1]);\r\n  const lon1 = toRadians(c1[0]);\r\n  const dByR = distance / radius;\r\n  const lat = Math.asin(\r\n    Math.sin(lat1) * Math.cos(dByR) +\r\n      Math.cos(lat1) * Math.sin(dByR) * Math.cos(bearing));\r\n  const lon = lon1 + Math.atan2(\r\n    Math.sin(bearing) * Math.sin(dByR) * Math.cos(lat1),\r\n    Math.cos(dByR) - Math.sin(lat1) * Math.sin(lat));\r\n  return [toDegrees(lon), toDegrees(lat)];\r\n}\r\n"],"names":["const","let"],"mappings":"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"}