{"version":3,"file":"View.js","sources":["../../src/ol/View.js"],"sourcesContent":["/**\r\n * @module ol/View\r\n */\r\nimport {DEFAULT_TILE_SIZE} from './tilegrid/common.js';\r\nimport {getUid} from './util.js';\r\nimport {UNDEFINED} from './functions.js';\r\nimport {createExtent, none as centerNone} from './centerconstraint.js';\r\nimport BaseObject from './Object.js';\r\nimport {createSnapToResolutions, createSnapToPower} from './resolutionconstraint.js';\r\nimport {createSnapToZero, createSnapToN, none as rotationNone, disable} from './rotationconstraint.js';\r\nimport ViewHint from './ViewHint.js';\r\nimport ViewProperty from './ViewProperty.js';\r\nimport {linearFindNearest} from './array.js';\r\nimport {assert} from './asserts.js';\r\nimport {add as addCoordinate, rotate as rotateCoordinate, equals as coordinatesEqual} from './coordinate.js';\r\nimport {inAndOut} from './easing.js';\r\nimport {getForViewAndSize, getCenter, getHeight, getWidth, isEmpty} from './extent.js';\r\nimport GeometryType from './geom/GeometryType.js';\r\nimport {fromExtent as polygonFromExtent} from './geom/Polygon.js';\r\nimport SimpleGeometry from './geom/SimpleGeometry.js';\r\nimport {clamp, modulo} from './math.js';\r\nimport {assign} from './obj.js';\r\nimport {createProjection, METERS_PER_UNIT} from './proj.js';\r\nimport Units from './proj/Units.js';\r\n\r\n\r\n/**\r\n * An animation configuration\r\n *\r\n * @typedef {Object} Animation\r\n * @property {module:ol/coordinate~Coordinate} [sourceCenter]\r\n * @property {module:ol/coordinate~Coordinate} [targetCenter]\r\n * @property {number} [sourceResolution]\r\n * @property {number} [targetResolution]\r\n * @property {number} [sourceRotation]\r\n * @property {number} [targetRotation]\r\n * @property {module:ol/coordinate~Coordinate} [anchor]\r\n * @property {number} start\r\n * @property {number} duration\r\n * @property {boolean} complete\r\n * @property {function(number):number} easing\r\n * @property {function(boolean)} callback\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} Constraints\r\n * @property {module:ol/centerconstraint~Type} center\r\n * @property {module:ol/resolutionconstraint~Type} resolution\r\n * @property {module:ol/rotationconstraint~Type} rotation\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} FitOptions\r\n * @property {module:ol/size~Size} [size] The size in pixels of the box to fit\r\n * the extent into. Default is the current size of the first map in the DOM that\r\n * uses this view, or `[100, 100]` if no such map is found.\r\n * @property {!Array.<number>} [padding=[0, 0, 0, 0]] Padding (in pixels) to be\r\n * cleared inside the view. Values in the array are top, right, bottom and left\r\n * padding.\r\n * @property {boolean} [constrainResolution=true] Constrain the resolution.\r\n * @property {boolean} [nearest=false] If `constrainResolution` is `true`, get\r\n * the nearest extent instead of the closest that actually fits the view.\r\n * @property {number} [minResolution=0] Minimum resolution that we zoom to.\r\n * @property {number} [maxZoom] Maximum zoom level that we zoom to. If\r\n * `minResolution` is given, this property is ignored.\r\n * @property {number} [duration] The duration of the animation in milliseconds.\r\n * By default, there is no animation to the target extent.\r\n * @property {function(number):number} [easing] The easing function used during\r\n * the animation (defaults to {@link module:ol/easing~inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n * @property {function(boolean)} [callback] Function called when the view is in\r\n * its final position. The callback will be called with `true` if the animation\r\n * series completed on its own or `false` if it was cancelled.\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} ViewOptions\r\n * @property {module:ol/coordinate~Coordinate} [center] The initial center for\r\n * the view. The coordinate system for the center is specified with the\r\n * `projection` option. Layer sources will not be fetched if this is not set,\r\n * but the center can be set later with {@link #setCenter}.\r\n * @property {boolean|number} [constrainRotation=true] Rotation constraint.\r\n * `false` means no constraint. `true` means no constraint, but snap to zero\r\n * near zero. A number constrains the rotation to that number of values. For\r\n * example, `4` will constrain the rotation to 0, 90, 180, and 270 degrees.\r\n * @property {boolean} [enableRotation=true] Enable rotation.\r\n * If `false`, a rotation constraint that always sets the rotation to zero is\r\n * used. The `constrainRotation` option has no effect if `enableRotation` is\r\n * `false`.\r\n * @property {module:ol/extent~Extent} [extent] The extent that constrains the\r\n * center, in other words, center cannot be set outside this extent.\r\n * @property {number} [maxResolution] The maximum resolution used to determine\r\n * the resolution constraint. It is used together with `minResolution` (or\r\n * `maxZoom`) and `zoomFactor`. If unspecified it is calculated in such a way\r\n * that the projection's validity extent fits in a 256x256 px tile. If the\r\n * projection is Spherical Mercator (the default) then `maxResolution` defaults\r\n * to `40075016.68557849 / 256 = 156543.03392804097`.\r\n * @property {number} [minResolution] The minimum resolution used to determine\r\n * the resolution constraint.  It is used together with `maxResolution` (or\r\n * `minZoom`) and `zoomFactor`.  If unspecified it is calculated assuming 29\r\n * zoom levels (with a factor of 2). If the projection is Spherical Mercator\r\n * (the default) then `minResolution` defaults to\r\n * `40075016.68557849 / 256 / Math.pow(2, 28) = 0.0005831682455839253`.\r\n * @property {number} [maxZoom=28] The maximum zoom level used to determine the\r\n * resolution constraint. It is used together with `minZoom` (or\r\n * `maxResolution`) and `zoomFactor`.  Note that if `minResolution` is also\r\n * provided, it is given precedence over `maxZoom`.\r\n * @property {number} [minZoom=0] The minimum zoom level used to determine the\r\n * resolution constraint. It is used together with `maxZoom` (or\r\n * `minResolution`) and `zoomFactor`.  Note that if `maxResolution` is also\r\n * provided, it is given precedence over `minZoom`.\r\n * @property {module:ol/proj~ProjectionLike} [projection='EPSG:3857'] The\r\n * projection. The default is Spherical Mercator.\r\n * @property {number} [resolution] The initial resolution for the view. The\r\n * units are `projection` units per pixel (e.g. meters per pixel). An\r\n * alternative to setting this is to set `zoom`. Layer sources will not be\r\n * fetched if neither this nor `zoom` are defined, but they can be set later\r\n * with {@link #setZoom} or {@link #setResolution}.\r\n * @property {Array.<number>} [resolutions] Resolutions to determine the\r\n * resolution constraint. If set the `maxResolution`, `minResolution`,\r\n * `minZoom`, `maxZoom`, and `zoomFactor` options are ignored.\r\n * @property {number} [rotation=0] The initial rotation for the view in radians\r\n * (positive rotation clockwise, 0 means North).\r\n * @property {number} [zoom] Only used if `resolution` is not defined. Zoom\r\n * level used to calculate the initial resolution for the view. The initial\r\n * resolution is determined using the {@link #constrainResolution} method.\r\n * @property {number} [zoomFactor=2] The zoom factor used to determine the\r\n * resolution constraint.\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} AnimationOptions\r\n * @property {module:ol/coordinate~Coordinate|undefined} center The center of the view at the end of\r\n * the animation.\r\n * @property {number|undefined} zoom The zoom level of the view at the end of the\r\n * animation. This takes precedence over `resolution`.\r\n * @property {number|undefined} resolution The resolution of the view at the end\r\n * of the animation.  If `zoom` is also provided, this option will be ignored.\r\n * @property {number|undefined} rotation The rotation of the view at the end of\r\n * the animation.\r\n * @property {module:ol/coordinate~Coordinate|undefined} anchor Optional anchor to remained fixed\r\n * during a rotation or resolution animation.\r\n * @property {number} [duration=1000] The duration of the animation in milliseconds.\r\n * @property {function(number):number} [easing] The easing function used\r\n * during the animation (defaults to {@link module:ol/easing~inAndOut}).\r\n * The function will be called for each frame with a number representing a\r\n * fraction of the animation's duration.  The function should return a number\r\n * between 0 and 1 representing the progress toward the destination state.\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} State\r\n * @property {module:ol/coordinate~Coordinate} center\r\n * @property {module:ol/proj/Projection} projection\r\n * @property {number} resolution\r\n * @property {number} rotation\r\n * @property {number} zoom\r\n */\r\n\r\n\r\n/**\r\n * Default min zoom level for the map view.\r\n * @type {number}\r\n */\r\nconst DEFAULT_MIN_ZOOM = 0;\r\n\r\n\r\n/**\r\n * @classdesc\r\n * A View object represents a simple 2D view of the map.\r\n *\r\n * This is the object to act upon to change the center, resolution,\r\n * and rotation of the map.\r\n *\r\n * ### The view states\r\n *\r\n * An View is determined by three states: `center`, `resolution`,\r\n * and `rotation`. Each state has a corresponding getter and setter, e.g.\r\n * `getCenter` and `setCenter` for the `center` state.\r\n *\r\n * An View has a `projection`. The projection determines the\r\n * coordinate system of the center, and its units determine the units of the\r\n * resolution (projection units per pixel). The default projection is\r\n * Spherical Mercator (EPSG:3857).\r\n *\r\n * ### The constraints\r\n *\r\n * `setCenter`, `setResolution` and `setRotation` can be used to change the\r\n * states of the view. Any value can be passed to the setters. And the value\r\n * that is passed to a setter will effectively be the value set in the view,\r\n * and returned by the corresponding getter.\r\n *\r\n * But a View object also has a *resolution constraint*, a\r\n * *rotation constraint* and a *center constraint*.\r\n *\r\n * As said above, no constraints are applied when the setters are used to set\r\n * new states for the view. Applying constraints is done explicitly through\r\n * the use of the `constrain*` functions (`constrainResolution` and\r\n * `constrainRotation` and `constrainCenter`).\r\n *\r\n * The main users of the constraints are the interactions and the\r\n * controls. For example, double-clicking on the map changes the view to\r\n * the \"next\" resolution. And releasing the fingers after pinch-zooming\r\n * snaps to the closest resolution (with an animation).\r\n *\r\n * The *resolution constraint* snaps to specific resolutions. It is\r\n * determined by the following options: `resolutions`, `maxResolution`,\r\n * `maxZoom`, and `zoomFactor`. If `resolutions` is set, the other three\r\n * options are ignored. See documentation for each option for more\r\n * information.\r\n *\r\n * The *rotation constraint* snaps to specific angles. It is determined\r\n * by the following options: `enableRotation` and `constrainRotation`.\r\n * By default the rotation value is snapped to zero when approaching the\r\n * horizontal.\r\n *\r\n * The *center constraint* is determined by the `extent` option. By\r\n * default the center is not constrained at all.\r\n *\r\n  * @api\r\n */\r\nclass View extends BaseObject {\r\n\r\n  /**\r\n   * @param {module:ol/View~ViewOptions=} opt_options View options.\r\n   */\r\n  constructor(opt_options) {\r\n    super();\r\n\r\n    const options = assign({}, opt_options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<number>}\r\n     */\r\n    this.hints_ = [0, 0];\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<Array.<module:ol/View~Animation>>}\r\n     */\r\n    this.animations_ = [];\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.updateAnimationKey_;\r\n\r\n    this.updateAnimations_ = this.updateAnimations_.bind(this);\r\n\r\n    /**\r\n     * @private\r\n     * @const\r\n     * @type {module:ol/proj/Projection}\r\n     */\r\n    this.projection_ = createProjection(options.projection, 'EPSG:3857');\r\n\r\n    this.applyOptions_(options);\r\n  }\r\n\r\n  /**\r\n   * Set up the view with the given options.\r\n   * @param {module:ol/View~ViewOptions} options View options.\r\n   */\r\n  applyOptions_(options) {\r\n\r\n    /**\r\n     * @type {Object.<string, *>}\r\n     */\r\n    const properties = {};\r\n    properties[ViewProperty.CENTER] = options.center !== undefined ?\r\n      options.center : null;\r\n\r\n    const resolutionConstraintInfo = createResolutionConstraint(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.maxResolution_ = resolutionConstraintInfo.maxResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minResolution_ = resolutionConstraintInfo.minResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.zoomFactor_ = resolutionConstraintInfo.zoomFactor;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<number>|undefined}\r\n     */\r\n    this.resolutions_ = options.resolutions;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.minZoom_ = resolutionConstraintInfo.minZoom;\r\n\r\n    const centerConstraint = createCenterConstraint(options);\r\n    const resolutionConstraint = resolutionConstraintInfo.constraint;\r\n    const rotationConstraint = createRotationConstraint(options);\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/View~Constraints}\r\n     */\r\n    this.constraints_ = {\r\n      center: centerConstraint,\r\n      resolution: resolutionConstraint,\r\n      rotation: rotationConstraint\r\n    };\r\n\r\n    if (options.resolution !== undefined) {\r\n      properties[ViewProperty.RESOLUTION] = options.resolution;\r\n    } else if (options.zoom !== undefined) {\r\n      properties[ViewProperty.RESOLUTION] = this.constrainResolution(\r\n        this.maxResolution_, options.zoom - this.minZoom_);\r\n\r\n      if (this.resolutions_) { // in case map zoom is out of min/max zoom range\r\n        properties[ViewProperty.RESOLUTION] = clamp(\r\n          Number(this.getResolution() || properties[ViewProperty.RESOLUTION]),\r\n          this.minResolution_, this.maxResolution_);\r\n      }\r\n    }\r\n    properties[ViewProperty.ROTATION] = options.rotation !== undefined ? options.rotation : 0;\r\n    this.setProperties(properties);\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/View~ViewOptions}\r\n     */\r\n    this.options_ = options;\r\n\r\n  }\r\n\r\n  /**\r\n   * Get an updated version of the view options used to construct the view.  The\r\n   * current resolution (or zoom), center, and rotation are applied to any stored\r\n   * options.  The provided options can be used to apply new min/max zoom or\r\n   * resolution limits.\r\n   * @param {module:ol/View~ViewOptions} newOptions New options to be applied.\r\n   * @return {module:ol/View~ViewOptions} New options updated with the current view state.\r\n   */\r\n  getUpdatedOptions_(newOptions) {\r\n    const options = assign({}, this.options_);\r\n\r\n    // preserve resolution (or zoom)\r\n    if (options.resolution !== undefined) {\r\n      options.resolution = this.getResolution();\r\n    } else {\r\n      options.zoom = this.getZoom();\r\n    }\r\n\r\n    // preserve center\r\n    options.center = this.getCenter();\r\n\r\n    // preserve rotation\r\n    options.rotation = this.getRotation();\r\n\r\n    return assign({}, options, newOptions);\r\n  }\r\n\r\n  /**\r\n   * Animate the view.  The view's center, zoom (or resolution), and rotation\r\n   * can be animated for smooth transitions between view states.  For example,\r\n   * to animate the view to a new zoom level:\r\n   *\r\n   *     view.animate({zoom: view.getZoom() + 1});\r\n   *\r\n   * By default, the animation lasts one second and uses in-and-out easing.  You\r\n   * can customize this behavior by including `duration` (in milliseconds) and\r\n   * `easing` options (see {@link module:ol/easing}).\r\n   *\r\n   * To chain together multiple animations, call the method with multiple\r\n   * animation objects.  For example, to first zoom and then pan:\r\n   *\r\n   *     view.animate({zoom: 10}, {center: [0, 0]});\r\n   *\r\n   * If you provide a function as the last argument to the animate method, it\r\n   * will get called at the end of an animation series.  The callback will be\r\n   * called with `true` if the animation series completed on its own or `false`\r\n   * if it was cancelled.\r\n   *\r\n   * Animations are cancelled by user interactions (e.g. dragging the map) or by\r\n   * calling `view.setCenter()`, `view.setResolution()`, or `view.setRotation()`\r\n   * (or another method that calls one of these).\r\n   *\r\n   * @param {...(module:ol/View~AnimationOptions|function(boolean))} var_args Animation\r\n   *     options.  Multiple animations can be run in series by passing multiple\r\n   *     options objects.  To run multiple animations in parallel, call the method\r\n   *     multiple times.  An optional callback can be provided as a final\r\n   *     argument.  The callback will be called with a boolean indicating whether\r\n   *     the animation completed without being cancelled.\r\n   * @api\r\n   */\r\n  animate(var_args) {\r\n    let animationCount = arguments.length;\r\n    let callback;\r\n    if (animationCount > 1 && typeof arguments[animationCount - 1] === 'function') {\r\n      callback = arguments[animationCount - 1];\r\n      --animationCount;\r\n    }\r\n    if (!this.isDef()) {\r\n      // if view properties are not yet set, shortcut to the final state\r\n      const state = arguments[animationCount - 1];\r\n      if (state.center) {\r\n        this.setCenter(state.center);\r\n      }\r\n      if (state.zoom !== undefined) {\r\n        this.setZoom(state.zoom);\r\n      }\r\n      if (state.rotation !== undefined) {\r\n        this.setRotation(state.rotation);\r\n      }\r\n      if (callback) {\r\n        setTimeout(function() {\r\n          callback(true);\r\n        }, 0);\r\n      }\r\n      return;\r\n    }\r\n    let start = Date.now();\r\n    let center = this.getCenter().slice();\r\n    let resolution = this.getResolution();\r\n    let rotation = this.getRotation();\r\n    const series = [];\r\n    for (let i = 0; i < animationCount; ++i) {\r\n      const options = /** @type {module:ol/View~AnimationOptions} */ (arguments[i]);\r\n\r\n      const animation = /** @type {module:ol/View~Animation} */ ({\r\n        start: start,\r\n        complete: false,\r\n        anchor: options.anchor,\r\n        duration: options.duration !== undefined ? options.duration : 1000,\r\n        easing: options.easing || inAndOut\r\n      });\r\n\r\n      if (options.center) {\r\n        animation.sourceCenter = center;\r\n        animation.targetCenter = options.center;\r\n        center = animation.targetCenter;\r\n      }\r\n\r\n      if (options.zoom !== undefined) {\r\n        animation.sourceResolution = resolution;\r\n        animation.targetResolution = this.constrainResolution(\r\n          this.maxResolution_, options.zoom - this.minZoom_, 0);\r\n        resolution = animation.targetResolution;\r\n      } else if (options.resolution) {\r\n        animation.sourceResolution = resolution;\r\n        animation.targetResolution = options.resolution;\r\n        resolution = animation.targetResolution;\r\n      }\r\n\r\n      if (options.rotation !== undefined) {\r\n        animation.sourceRotation = rotation;\r\n        const delta = modulo(options.rotation - rotation + Math.PI, 2 * Math.PI) - Math.PI;\r\n        animation.targetRotation = rotation + delta;\r\n        rotation = animation.targetRotation;\r\n      }\r\n\r\n      animation.callback = callback;\r\n\r\n      // check if animation is a no-op\r\n      if (isNoopAnimation(animation)) {\r\n        animation.complete = true;\r\n        // we still push it onto the series for callback handling\r\n      } else {\r\n        start += animation.duration;\r\n      }\r\n      series.push(animation);\r\n    }\r\n    this.animations_.push(series);\r\n    this.setHint(ViewHint.ANIMATING, 1);\r\n    this.updateAnimations_();\r\n  }\r\n\r\n  /**\r\n   * Determine if the view is being animated.\r\n   * @return {boolean} The view is being animated.\r\n   * @api\r\n   */\r\n  getAnimating() {\r\n    return this.hints_[ViewHint.ANIMATING] > 0;\r\n  }\r\n\r\n  /**\r\n   * Determine if the user is interacting with the view, such as panning or zooming.\r\n   * @return {boolean} The view is being interacted with.\r\n   * @api\r\n   */\r\n  getInteracting() {\r\n    return this.hints_[ViewHint.INTERACTING] > 0;\r\n  }\r\n\r\n  /**\r\n   * Cancel any ongoing animations.\r\n   * @api\r\n   */\r\n  cancelAnimations() {\r\n    this.setHint(ViewHint.ANIMATING, -this.hints_[ViewHint.ANIMATING]);\r\n    for (let i = 0, ii = this.animations_.length; i < ii; ++i) {\r\n      const series = this.animations_[i];\r\n      if (series[0].callback) {\r\n        series[0].callback(false);\r\n      }\r\n    }\r\n    this.animations_.length = 0;\r\n  }\r\n\r\n  /**\r\n   * Update all animations.\r\n   */\r\n  updateAnimations_() {\r\n    if (this.updateAnimationKey_ !== undefined) {\r\n      cancelAnimationFrame(this.updateAnimationKey_);\r\n      this.updateAnimationKey_ = undefined;\r\n    }\r\n    if (!this.getAnimating()) {\r\n      return;\r\n    }\r\n    const now = Date.now();\r\n    let more = false;\r\n    for (let i = this.animations_.length - 1; i >= 0; --i) {\r\n      const series = this.animations_[i];\r\n      let seriesComplete = true;\r\n      for (let j = 0, jj = series.length; j < jj; ++j) {\r\n        const animation = series[j];\r\n        if (animation.complete) {\r\n          continue;\r\n        }\r\n        const elapsed = now - animation.start;\r\n        let fraction = animation.duration > 0 ? elapsed / animation.duration : 1;\r\n        if (fraction >= 1) {\r\n          animation.complete = true;\r\n          fraction = 1;\r\n        } else {\r\n          seriesComplete = false;\r\n        }\r\n        const progress = animation.easing(fraction);\r\n        if (animation.sourceCenter) {\r\n          const x0 = animation.sourceCenter[0];\r\n          const y0 = animation.sourceCenter[1];\r\n          const x1 = animation.targetCenter[0];\r\n          const y1 = animation.targetCenter[1];\r\n          const x = x0 + progress * (x1 - x0);\r\n          const y = y0 + progress * (y1 - y0);\r\n          this.set(ViewProperty.CENTER, [x, y]);\r\n        }\r\n        if (animation.sourceResolution && animation.targetResolution) {\r\n          const resolution = progress === 1 ?\r\n            animation.targetResolution :\r\n            animation.sourceResolution + progress * (animation.targetResolution - animation.sourceResolution);\r\n          if (animation.anchor) {\r\n            this.set(ViewProperty.CENTER,\r\n              this.calculateCenterZoom(resolution, animation.anchor));\r\n          }\r\n          this.set(ViewProperty.RESOLUTION, resolution);\r\n        }\r\n        if (animation.sourceRotation !== undefined && animation.targetRotation !== undefined) {\r\n          const rotation = progress === 1 ?\r\n            modulo(animation.targetRotation + Math.PI, 2 * Math.PI) - Math.PI :\r\n            animation.sourceRotation + progress * (animation.targetRotation - animation.sourceRotation);\r\n          if (animation.anchor) {\r\n            this.set(ViewProperty.CENTER,\r\n              this.calculateCenterRotate(rotation, animation.anchor));\r\n          }\r\n          this.set(ViewProperty.ROTATION, rotation);\r\n        }\r\n        more = true;\r\n        if (!animation.complete) {\r\n          break;\r\n        }\r\n      }\r\n      if (seriesComplete) {\r\n        this.animations_[i] = null;\r\n        this.setHint(ViewHint.ANIMATING, -1);\r\n        const callback = series[0].callback;\r\n        if (callback) {\r\n          setTimeout(function() {\r\n            callback(true);\r\n          }, 0);\r\n        }\r\n      }\r\n    }\r\n    // prune completed series\r\n    this.animations_ = this.animations_.filter(Boolean);\r\n    if (more && this.updateAnimationKey_ === undefined) {\r\n      this.updateAnimationKey_ = requestAnimationFrame(this.updateAnimations_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} rotation Target rotation.\r\n   * @param {module:ol/coordinate~Coordinate} anchor Rotation anchor.\r\n   * @return {module:ol/coordinate~Coordinate|undefined} Center for rotation and anchor.\r\n   */\r\n  calculateCenterRotate(rotation, anchor) {\r\n    let center;\r\n    const currentCenter = this.getCenter();\r\n    if (currentCenter !== undefined) {\r\n      center = [currentCenter[0] - anchor[0], currentCenter[1] - anchor[1]];\r\n      rotateCoordinate(center, rotation - this.getRotation());\r\n      addCoordinate(center, anchor);\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * @param {number} resolution Target resolution.\r\n   * @param {module:ol/coordinate~Coordinate} anchor Zoom anchor.\r\n   * @return {module:ol/coordinate~Coordinate|undefined} Center for resolution and anchor.\r\n   */\r\n  calculateCenterZoom(resolution, anchor) {\r\n    let center;\r\n    const currentCenter = this.getCenter();\r\n    const currentResolution = this.getResolution();\r\n    if (currentCenter !== undefined && currentResolution !== undefined) {\r\n      const x = anchor[0] - resolution * (anchor[0] - currentCenter[0]) / currentResolution;\r\n      const y = anchor[1] - resolution * (anchor[1] - currentCenter[1]) / currentResolution;\r\n      center = [x, y];\r\n    }\r\n    return center;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {module:ol/size~Size} Viewport size or `[100, 100]` when no viewport is found.\r\n   */\r\n  getSizeFromViewport_() {\r\n    const size = [100, 100];\r\n    const selector = '.ol-viewport[data-view=\"' + getUid(this) + '\"]';\r\n    const element = document.querySelector(selector);\r\n    if (element) {\r\n      const metrics = getComputedStyle(element);\r\n      size[0] = parseInt(metrics.width, 10);\r\n      size[1] = parseInt(metrics.height, 10);\r\n    }\r\n    return size;\r\n  }\r\n\r\n  /**\r\n   * Get the constrained center of this view.\r\n   * @param {module:ol/coordinate~Coordinate|undefined} center Center.\r\n   * @return {module:ol/coordinate~Coordinate|undefined} Constrained center.\r\n   * @api\r\n   */\r\n  constrainCenter(center) {\r\n    return this.constraints_.center(center);\r\n  }\r\n\r\n  /**\r\n   * Get the constrained resolution of this view.\r\n   * @param {number|undefined} resolution Resolution.\r\n   * @param {number=} opt_delta Delta. Default is `0`.\r\n   * @param {number=} opt_direction Direction. Default is `0`.\r\n   * @return {number|undefined} Constrained resolution.\r\n   * @api\r\n   */\r\n  constrainResolution(resolution, opt_delta, opt_direction) {\r\n    const delta = opt_delta || 0;\r\n    const direction = opt_direction || 0;\r\n    return this.constraints_.resolution(resolution, delta, direction);\r\n  }\r\n\r\n  /**\r\n   * Get the constrained rotation of this view.\r\n   * @param {number|undefined} rotation Rotation.\r\n   * @param {number=} opt_delta Delta. Default is `0`.\r\n   * @return {number|undefined} Constrained rotation.\r\n   * @api\r\n   */\r\n  constrainRotation(rotation, opt_delta) {\r\n    const delta = opt_delta || 0;\r\n    return this.constraints_.rotation(rotation, delta);\r\n  }\r\n\r\n  /**\r\n   * Get the view center.\r\n   * @return {module:ol/coordinate~Coordinate|undefined} The center of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getCenter() {\r\n    return (\r\n      /** @type {module:ol/coordinate~Coordinate|undefined} */ (this.get(ViewProperty.CENTER))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * @return {module:ol/View~Constraints} Constraints.\r\n   */\r\n  getConstraints() {\r\n    return this.constraints_;\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<number>=} opt_hints Destination array.\r\n   * @return {Array.<number>} Hint.\r\n   */\r\n  getHints(opt_hints) {\r\n    if (opt_hints !== undefined) {\r\n      opt_hints[0] = this.hints_[0];\r\n      opt_hints[1] = this.hints_[1];\r\n      return opt_hints;\r\n    } else {\r\n      return this.hints_.slice();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate the extent for the current view state and the passed size.\r\n   * The size is the pixel dimensions of the box into which the calculated extent\r\n   * should fit. In most cases you want to get the extent of the entire map,\r\n   * that is `map.getSize()`.\r\n   * @param {module:ol/size~Size=} opt_size Box pixel size. If not provided, the size of the\r\n   * first map that uses this view will be used.\r\n   * @return {module:ol/extent~Extent} Extent.\r\n   * @api\r\n   */\r\n  calculateExtent(opt_size) {\r\n    const size = opt_size || this.getSizeFromViewport_();\r\n    const center = /** @type {!module:ol/coordinate~Coordinate} */ (this.getCenter());\r\n    assert(center, 1); // The view center is not defined\r\n    const resolution = /** @type {!number} */ (this.getResolution());\r\n    assert(resolution !== undefined, 2); // The view resolution is not defined\r\n    const rotation = /** @type {!number} */ (this.getRotation());\r\n    assert(rotation !== undefined, 3); // The view rotation is not defined\r\n\r\n    return getForViewAndSize(center, resolution, rotation, size);\r\n  }\r\n\r\n  /**\r\n   * Get the maximum resolution of the view.\r\n   * @return {number} The maximum resolution of the view.\r\n   * @api\r\n   */\r\n  getMaxResolution() {\r\n    return this.maxResolution_;\r\n  }\r\n\r\n  /**\r\n   * Get the minimum resolution of the view.\r\n   * @return {number} The minimum resolution of the view.\r\n   * @api\r\n   */\r\n  getMinResolution() {\r\n    return this.minResolution_;\r\n  }\r\n\r\n  /**\r\n   * Get the maximum zoom level for the view.\r\n   * @return {number} The maximum zoom level.\r\n   * @api\r\n   */\r\n  getMaxZoom() {\r\n    return /** @type {number} */ (this.getZoomForResolution(this.minResolution_));\r\n  }\r\n\r\n  /**\r\n   * Set a new maximum zoom level for the view.\r\n   * @param {number} zoom The maximum zoom level.\r\n   * @api\r\n   */\r\n  setMaxZoom(zoom) {\r\n    this.applyOptions_(this.getUpdatedOptions_({maxZoom: zoom}));\r\n  }\r\n\r\n  /**\r\n   * Get the minimum zoom level for the view.\r\n   * @return {number} The minimum zoom level.\r\n   * @api\r\n   */\r\n  getMinZoom() {\r\n    return /** @type {number} */ (this.getZoomForResolution(this.maxResolution_));\r\n  }\r\n\r\n  /**\r\n   * Set a new minimum zoom level for the view.\r\n   * @param {number} zoom The minimum zoom level.\r\n   * @api\r\n   */\r\n  setMinZoom(zoom) {\r\n    this.applyOptions_(this.getUpdatedOptions_({minZoom: zoom}));\r\n  }\r\n\r\n  /**\r\n   * Get the view projection.\r\n   * @return {module:ol/proj/Projection} The projection of the view.\r\n   * @api\r\n   */\r\n  getProjection() {\r\n    return this.projection_;\r\n  }\r\n\r\n  /**\r\n   * Get the view resolution.\r\n   * @return {number|undefined} The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getResolution() {\r\n    return /** @type {number|undefined} */ (this.get(ViewProperty.RESOLUTION));\r\n  }\r\n\r\n  /**\r\n   * Get the resolutions for the view. This returns the array of resolutions\r\n   * passed to the constructor of the View, or undefined if none were given.\r\n   * @return {Array.<number>|undefined} The resolutions of the view.\r\n   * @api\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a provided extent (in map units) and size (in pixels).\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {module:ol/size~Size=} opt_size Box pixel size.\r\n   * @return {number} The resolution at which the provided extent will render at\r\n   *     the given size.\r\n   * @api\r\n   */\r\n  getResolutionForExtent(extent, opt_size) {\r\n    const size = opt_size || this.getSizeFromViewport_();\r\n    const xResolution = getWidth(extent) / size[0];\r\n    const yResolution = getHeight(extent) / size[1];\r\n    return Math.max(xResolution, yResolution);\r\n  }\r\n\r\n  /**\r\n   * Return a function that returns a value between 0 and 1 for a\r\n   * resolution. Exponential scaling is assumed.\r\n   * @param {number=} opt_power Power.\r\n   * @return {function(number): number} Resolution for value function.\r\n   */\r\n  getResolutionForValueFunction(opt_power) {\r\n    const power = opt_power || 2;\r\n    const maxResolution = this.maxResolution_;\r\n    const minResolution = this.minResolution_;\r\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\r\n    return (\r\n      /**\r\n       * @param {number} value Value.\r\n       * @return {number} Resolution.\r\n       */\r\n      function(value) {\r\n        const resolution = maxResolution / Math.pow(power, value * max);\r\n        return resolution;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Get the view rotation.\r\n   * @return {number} The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */\r\n  getRotation() {\r\n    return /** @type {number} */ (this.get(ViewProperty.ROTATION));\r\n  }\r\n\r\n  /**\r\n   * Return a function that returns a resolution for a value between\r\n   * 0 and 1. Exponential scaling is assumed.\r\n   * @param {number=} opt_power Power.\r\n   * @return {function(number): number} Value for resolution function.\r\n   */\r\n  getValueForResolutionFunction(opt_power) {\r\n    const power = opt_power || 2;\r\n    const maxResolution = this.maxResolution_;\r\n    const minResolution = this.minResolution_;\r\n    const max = Math.log(maxResolution / minResolution) / Math.log(power);\r\n    return (\r\n      /**\r\n       * @param {number} resolution Resolution.\r\n       * @return {number} Value.\r\n       */\r\n      function(resolution) {\r\n        const value = (Math.log(maxResolution / resolution) / Math.log(power)) / max;\r\n        return value;\r\n      });\r\n  }\r\n\r\n  /**\r\n   * @return {module:ol/View~State} View state.\r\n   */\r\n  getState() {\r\n    const center = /** @type {module:ol/coordinate~Coordinate} */ (this.getCenter());\r\n    const projection = this.getProjection();\r\n    const resolution = /** @type {number} */ (this.getResolution());\r\n    const rotation = this.getRotation();\r\n    return (\r\n      /** @type {module:ol/View~State} */ ({\r\n        center: center.slice(),\r\n        projection: projection !== undefined ? projection : null,\r\n        resolution: resolution,\r\n        rotation: rotation,\r\n        zoom: this.getZoom()\r\n      })\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the current zoom level.  If you configured your view with a resolutions\r\n   * array (this is rare), this method may return non-integer zoom levels (so\r\n   * the zoom level is not safe to use as an index into a resolutions array).\r\n   * @return {number|undefined} Zoom.\r\n   * @api\r\n   */\r\n  getZoom() {\r\n    let zoom;\r\n    const resolution = this.getResolution();\r\n    if (resolution !== undefined) {\r\n      zoom = this.getZoomForResolution(resolution);\r\n    }\r\n    return zoom;\r\n  }\r\n\r\n  /**\r\n   * Get the zoom level for a resolution.\r\n   * @param {number} resolution The resolution.\r\n   * @return {number|undefined} The zoom level for the provided resolution.\r\n   * @api\r\n   */\r\n  getZoomForResolution(resolution) {\r\n    let offset = this.minZoom_ || 0;\r\n    let max, zoomFactor;\r\n    if (this.resolutions_) {\r\n      const nearest = linearFindNearest(this.resolutions_, resolution, 1);\r\n      offset = nearest;\r\n      max = this.resolutions_[nearest];\r\n      if (nearest == this.resolutions_.length - 1) {\r\n        zoomFactor = 2;\r\n      } else {\r\n        zoomFactor = max / this.resolutions_[nearest + 1];\r\n      }\r\n    } else {\r\n      max = this.maxResolution_;\r\n      zoomFactor = this.zoomFactor_;\r\n    }\r\n    return offset + Math.log(max / resolution) / Math.log(zoomFactor);\r\n  }\r\n\r\n  /**\r\n   * Get the resolution for a zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @return {number} The view resolution for the provided zoom level.\r\n   * @api\r\n   */\r\n  getResolutionForZoom(zoom) {\r\n    return /** @type {number} */ (this.constrainResolution(\r\n      this.maxResolution_, zoom - this.minZoom_, 0));\r\n  }\r\n\r\n  /**\r\n   * Fit the given geometry or extent based on the given map size and border.\r\n   * The size is pixel dimensions of the box to fit the extent into.\r\n   * In most cases you will want to use the map size, that is `map.getSize()`.\r\n   * Takes care of the map angle.\r\n   * @param {module:ol/geom/SimpleGeometry|module:ol/extent~Extent} geometryOrExtent The geometry or\r\n   *     extent to fit the view to.\r\n   * @param {module:ol/View~FitOptions=} opt_options Options.\r\n   * @api\r\n   */\r\n  fit(geometryOrExtent, opt_options) {\r\n    const options = opt_options || {};\r\n    let size = options.size;\r\n    if (!size) {\r\n      size = this.getSizeFromViewport_();\r\n    }\r\n    /** @type {module:ol/geom/SimpleGeometry} */\r\n    let geometry;\r\n    if (!(geometryOrExtent instanceof SimpleGeometry)) {\r\n      assert(Array.isArray(geometryOrExtent),\r\n        24); // Invalid extent or geometry provided as `geometry`\r\n      assert(!isEmpty(geometryOrExtent),\r\n        25); // Cannot fit empty extent provided as `geometry`\r\n      geometry = polygonFromExtent(geometryOrExtent);\r\n    } else if (geometryOrExtent.getType() === GeometryType.CIRCLE) {\r\n      geometryOrExtent = geometryOrExtent.getExtent();\r\n      geometry = polygonFromExtent(geometryOrExtent);\r\n      geometry.rotate(this.getRotation(), getCenter(geometryOrExtent));\r\n    } else {\r\n      geometry = geometryOrExtent;\r\n    }\r\n\r\n    const padding = options.padding !== undefined ? options.padding : [0, 0, 0, 0];\r\n    const constrainResolution = options.constrainResolution !== undefined ?\r\n      options.constrainResolution : true;\r\n    const nearest = options.nearest !== undefined ? options.nearest : false;\r\n    let minResolution;\r\n    if (options.minResolution !== undefined) {\r\n      minResolution = options.minResolution;\r\n    } else if (options.maxZoom !== undefined) {\r\n      minResolution = this.constrainResolution(\r\n        this.maxResolution_, options.maxZoom - this.minZoom_, 0);\r\n    } else {\r\n      minResolution = 0;\r\n    }\r\n    const coords = geometry.getFlatCoordinates();\r\n\r\n    // calculate rotated extent\r\n    const rotation = this.getRotation();\r\n    const cosAngle = Math.cos(-rotation);\r\n    let sinAngle = Math.sin(-rotation);\r\n    let minRotX = +Infinity;\r\n    let minRotY = +Infinity;\r\n    let maxRotX = -Infinity;\r\n    let maxRotY = -Infinity;\r\n    const stride = geometry.getStride();\r\n    for (let i = 0, ii = coords.length; i < ii; i += stride) {\r\n      const rotX = coords[i] * cosAngle - coords[i + 1] * sinAngle;\r\n      const rotY = coords[i] * sinAngle + coords[i + 1] * cosAngle;\r\n      minRotX = Math.min(minRotX, rotX);\r\n      minRotY = Math.min(minRotY, rotY);\r\n      maxRotX = Math.max(maxRotX, rotX);\r\n      maxRotY = Math.max(maxRotY, rotY);\r\n    }\r\n\r\n    // calculate resolution\r\n    let resolution = this.getResolutionForExtent(\r\n      [minRotX, minRotY, maxRotX, maxRotY],\r\n      [size[0] - padding[1] - padding[3], size[1] - padding[0] - padding[2]]);\r\n    resolution = isNaN(resolution) ? minResolution :\r\n      Math.max(resolution, minResolution);\r\n    if (constrainResolution) {\r\n      let constrainedResolution = this.constrainResolution(resolution, 0, 0);\r\n      if (!nearest && constrainedResolution < resolution) {\r\n        constrainedResolution = this.constrainResolution(\r\n          constrainedResolution, -1, 0);\r\n      }\r\n      resolution = constrainedResolution;\r\n    }\r\n\r\n    // calculate center\r\n    sinAngle = -sinAngle; // go back to original rotation\r\n    let centerRotX = (minRotX + maxRotX) / 2;\r\n    let centerRotY = (minRotY + maxRotY) / 2;\r\n    centerRotX += (padding[1] - padding[3]) / 2 * resolution;\r\n    centerRotY += (padding[0] - padding[2]) / 2 * resolution;\r\n    const centerX = centerRotX * cosAngle - centerRotY * sinAngle;\r\n    const centerY = centerRotY * cosAngle + centerRotX * sinAngle;\r\n    const center = [centerX, centerY];\r\n    const callback = options.callback ? options.callback : UNDEFINED;\r\n\r\n    if (options.duration !== undefined) {\r\n      this.animate({\r\n        resolution: resolution,\r\n        center: center,\r\n        duration: options.duration,\r\n        easing: options.easing\r\n      }, callback);\r\n    } else {\r\n      this.setResolution(resolution);\r\n      this.setCenter(center);\r\n      setTimeout(callback.bind(undefined, true), 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Center on coordinate and view position.\r\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n   * @param {module:ol/size~Size} size Box pixel size.\r\n   * @param {module:ol/pixel~Pixel} position Position on the view to center on.\r\n   * @api\r\n   */\r\n  centerOn(coordinate, size, position) {\r\n    // calculate rotated position\r\n    const rotation = this.getRotation();\r\n    const cosAngle = Math.cos(-rotation);\r\n    let sinAngle = Math.sin(-rotation);\r\n    let rotX = coordinate[0] * cosAngle - coordinate[1] * sinAngle;\r\n    let rotY = coordinate[1] * cosAngle + coordinate[0] * sinAngle;\r\n    const resolution = this.getResolution();\r\n    rotX += (size[0] / 2 - position[0]) * resolution;\r\n    rotY += (position[1] - size[1] / 2) * resolution;\r\n\r\n    // go back to original angle\r\n    sinAngle = -sinAngle; // go back to original rotation\r\n    const centerX = rotX * cosAngle - rotY * sinAngle;\r\n    const centerY = rotY * cosAngle + rotX * sinAngle;\r\n\r\n    this.setCenter([centerX, centerY]);\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Is defined.\r\n   */\r\n  isDef() {\r\n    return !!this.getCenter() && this.getResolution() !== undefined;\r\n  }\r\n\r\n  /**\r\n   * Rotate the view around a given coordinate.\r\n   * @param {number} rotation New rotation value for the view.\r\n   * @param {module:ol/coordinate~Coordinate=} opt_anchor The rotation center.\r\n   * @api\r\n   */\r\n  rotate(rotation, opt_anchor) {\r\n    if (opt_anchor !== undefined) {\r\n      const center = this.calculateCenterRotate(rotation, opt_anchor);\r\n      this.setCenter(center);\r\n    }\r\n    this.setRotation(rotation);\r\n  }\r\n\r\n  /**\r\n   * Set the center of the current view.\r\n   * @param {module:ol/coordinate~Coordinate|undefined} center The center of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setCenter(center) {\r\n    this.set(ViewProperty.CENTER, center);\r\n    if (this.getAnimating()) {\r\n      this.cancelAnimations();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/ViewHint} hint Hint.\r\n   * @param {number} delta Delta.\r\n   * @return {number} New value.\r\n   */\r\n  setHint(hint, delta) {\r\n    this.hints_[hint] += delta;\r\n    this.changed();\r\n    return this.hints_[hint];\r\n  }\r\n\r\n  /**\r\n   * Set the resolution for this view.\r\n   * @param {number|undefined} resolution The resolution of the view.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setResolution(resolution) {\r\n    this.set(ViewProperty.RESOLUTION, resolution);\r\n    if (this.getAnimating()) {\r\n      this.cancelAnimations();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the rotation for this view.\r\n   * @param {number} rotation The rotation of the view in radians.\r\n   * @observable\r\n   * @api\r\n   */\r\n  setRotation(rotation) {\r\n    this.set(ViewProperty.ROTATION, rotation);\r\n    if (this.getAnimating()) {\r\n      this.cancelAnimations();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Zoom to a specific zoom level.\r\n   * @param {number} zoom Zoom level.\r\n   * @api\r\n   */\r\n  setZoom(zoom) {\r\n    this.setResolution(this.getResolutionForZoom(zoom));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/View~ViewOptions} options View options.\r\n * @return {module:ol/centerconstraint~Type} The constraint.\r\n */\r\nexport function createCenterConstraint(options) {\r\n  if (options.extent !== undefined) {\r\n    return createExtent(options.extent);\r\n  } else {\r\n    return centerNone;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/View~ViewOptions} options View options.\r\n * @return {{constraint: module:ol/resolutionconstraint~Type, maxResolution: number,\r\n *     minResolution: number, minZoom: number, zoomFactor: number}} The constraint.\r\n */\r\nexport function createResolutionConstraint(options) {\r\n  let resolutionConstraint;\r\n  let maxResolution;\r\n  let minResolution;\r\n\r\n  // TODO: move these to be ol constants\r\n  // see https://github.com/openlayers/openlayers/issues/2076\r\n  const defaultMaxZoom = 28;\r\n  const defaultZoomFactor = 2;\r\n\r\n  let minZoom = options.minZoom !== undefined ?\r\n    options.minZoom : DEFAULT_MIN_ZOOM;\r\n\r\n  let maxZoom = options.maxZoom !== undefined ?\r\n    options.maxZoom : defaultMaxZoom;\r\n\r\n  const zoomFactor = options.zoomFactor !== undefined ?\r\n    options.zoomFactor : defaultZoomFactor;\r\n\r\n  if (options.resolutions !== undefined) {\r\n    const resolutions = options.resolutions;\r\n    maxResolution = resolutions[minZoom];\r\n    minResolution = resolutions[maxZoom] !== undefined ?\r\n      resolutions[maxZoom] : resolutions[resolutions.length - 1];\r\n    resolutionConstraint = createSnapToResolutions(\r\n      resolutions);\r\n  } else {\r\n    // calculate the default min and max resolution\r\n    const projection = createProjection(options.projection, 'EPSG:3857');\r\n    const extent = projection.getExtent();\r\n    const size = !extent ?\r\n      // use an extent that can fit the whole world if need be\r\n      360 * METERS_PER_UNIT[Units.DEGREES] /\r\n            projection.getMetersPerUnit() :\r\n      Math.max(getWidth(extent), getHeight(extent));\r\n\r\n    const defaultMaxResolution = size / DEFAULT_TILE_SIZE / Math.pow(\r\n      defaultZoomFactor, DEFAULT_MIN_ZOOM);\r\n\r\n    const defaultMinResolution = defaultMaxResolution / Math.pow(\r\n      defaultZoomFactor, defaultMaxZoom - DEFAULT_MIN_ZOOM);\r\n\r\n    // user provided maxResolution takes precedence\r\n    maxResolution = options.maxResolution;\r\n    if (maxResolution !== undefined) {\r\n      minZoom = 0;\r\n    } else {\r\n      maxResolution = defaultMaxResolution / Math.pow(zoomFactor, minZoom);\r\n    }\r\n\r\n    // user provided minResolution takes precedence\r\n    minResolution = options.minResolution;\r\n    if (minResolution === undefined) {\r\n      if (options.maxZoom !== undefined) {\r\n        if (options.maxResolution !== undefined) {\r\n          minResolution = maxResolution / Math.pow(zoomFactor, maxZoom);\r\n        } else {\r\n          minResolution = defaultMaxResolution / Math.pow(zoomFactor, maxZoom);\r\n        }\r\n      } else {\r\n        minResolution = defaultMinResolution;\r\n      }\r\n    }\r\n\r\n    // given discrete zoom levels, minResolution may be different than provided\r\n    maxZoom = minZoom + Math.floor(\r\n      Math.log(maxResolution / minResolution) / Math.log(zoomFactor));\r\n    minResolution = maxResolution / Math.pow(zoomFactor, maxZoom - minZoom);\r\n\r\n    resolutionConstraint = createSnapToPower(\r\n      zoomFactor, maxResolution, maxZoom - minZoom);\r\n  }\r\n  return {constraint: resolutionConstraint, maxResolution: maxResolution,\r\n    minResolution: minResolution, minZoom: minZoom, zoomFactor: zoomFactor};\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/View~ViewOptions} options View options.\r\n * @return {module:ol/rotationconstraint~Type} Rotation constraint.\r\n */\r\nexport function createRotationConstraint(options) {\r\n  const enableRotation = options.enableRotation !== undefined ?\r\n    options.enableRotation : true;\r\n  if (enableRotation) {\r\n    const constrainRotation = options.constrainRotation;\r\n    if (constrainRotation === undefined || constrainRotation === true) {\r\n      return createSnapToZero();\r\n    } else if (constrainRotation === false) {\r\n      return rotationNone;\r\n    } else if (typeof constrainRotation === 'number') {\r\n      return createSnapToN(constrainRotation);\r\n    } else {\r\n      return rotationNone;\r\n    }\r\n  } else {\r\n    return disable;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Determine if an animation involves no view change.\r\n * @param {module:ol/View~Animation} animation The animation.\r\n * @return {boolean} The animation involves no view change.\r\n */\r\nexport function isNoopAnimation(animation) {\r\n  if (animation.sourceCenter && animation.targetCenter) {\r\n    if (!coordinatesEqual(animation.sourceCenter, animation.targetCenter)) {\r\n      return false;\r\n    }\r\n  }\r\n  if (animation.sourceResolution !== animation.targetResolution) {\r\n    return false;\r\n  }\r\n  if (animation.sourceRotation !== animation.targetRotation) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\nexport default View;\r\n"],"names":["const","super","let","arguments","this"],"mappings":"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"}