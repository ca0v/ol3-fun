{"version":3,"file":"Image.js","sources":["../../src/ol/Image.js"],"sourcesContent":["/**\r\n * @module ol/Image\r\n */\r\nimport ImageBase from './ImageBase.js';\r\nimport ImageState from './ImageState.js';\r\nimport {listenOnce, unlistenByKey} from './events.js';\r\nimport EventType from './events/EventType.js';\r\nimport {getHeight} from './extent.js';\r\n\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Image~Image} for the image and a\r\n * `{string}` for the src as arguments. It is supposed to make it so the\r\n * underlying image {@link module:ol/Image~Image#getImage} is assigned the\r\n * content specified by the src. If not specified, the default is\r\n *\r\n *     function(image, src) {\r\n *       image.getImage().src = src;\r\n *     }\r\n *\r\n * Providing a custom `imageLoadFunction` can be useful to load images with\r\n * post requests or - in general - through XHR requests, where the src of the\r\n * image element would be set to a data URI when the content is loaded.\r\n *\r\n * @typedef {function(module:ol/Image, string)} LoadFunction\r\n * @api\r\n */\r\n\r\n\r\nclass ImageWrapper extends ImageBase {\r\n\r\n  /**\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {number|undefined} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {string} src Image source URI.\r\n   * @param {?string} crossOrigin Cross origin.\r\n   * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\r\n   */\r\n  constructor(extent, resolution, pixelRatio, src, crossOrigin, imageLoadFunction) {\r\n\r\n    super(extent, resolution, pixelRatio, ImageState.IDLE);\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.src_ = src;\r\n\r\n    /**\r\n     * @private\r\n     * @type {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement}\r\n     */\r\n    this.image_ = new Image();\r\n    if (crossOrigin !== null) {\r\n      this.image_.crossOrigin = crossOrigin;\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/events~EventsKey>}\r\n     */\r\n    this.imageListenerKeys_ = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {module:ol/ImageState}\r\n     */\r\n    this.state = ImageState.IDLE;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/Image~LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   * @api\r\n   */\r\n  getImage() {\r\n    return this.image_;\r\n  }\r\n\r\n  /**\r\n   * Tracks loading or read errors.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageError_() {\r\n    this.state = ImageState.ERROR;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Tracks successful image load.\r\n   *\r\n   * @private\r\n   */\r\n  handleImageLoad_() {\r\n    if (this.resolution === undefined) {\r\n      this.resolution = getHeight(this.extent) / this.image_.height;\r\n    }\r\n    this.state = ImageState.LOADED;\r\n    this.unlistenImage_();\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @override\r\n   * @api\r\n   */\r\n  load() {\r\n    if (this.state == ImageState.IDLE || this.state == ImageState.ERROR) {\r\n      this.state = ImageState.LOADING;\r\n      this.changed();\r\n      this.imageListenerKeys_ = [\r\n        listenOnce(this.image_, EventType.ERROR,\r\n          this.handleImageError_, this),\r\n        listenOnce(this.image_, EventType.LOAD,\r\n          this.handleImageLoad_, this)\r\n      ];\r\n      this.imageLoadFunction_(this, this.src_);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLCanvasElement|HTMLImageElement|HTMLVideoElement} image Image.\r\n   */\r\n  setImage(image) {\r\n    this.image_ = image;\r\n  }\r\n\r\n  /**\r\n   * Discards event handlers which listen for load completion or errors.\r\n   *\r\n   * @private\r\n   */\r\n  unlistenImage_() {\r\n    this.imageListenerKeys_.forEach(unlistenByKey);\r\n    this.imageListenerKeys_ = null;\r\n  }\r\n}\r\n\r\n\r\nexport default ImageWrapper;\r\n"],"names":["super"],"mappings":"AAAA;;;AAGA,OAAO,SAAS,MAAM,gBAAgB,CAAC;AACvC,OAAO,UAAU,MAAM,iBAAiB,CAAC;AACzC,QAAQ,UAAU,EAAE,aAAa,OAAO,aAAa,CAAC;AACtD,OAAO,SAAS,MAAM,uBAAuB,CAAC;AAC9C,QAAQ,SAAS,OAAO,aAAa,CAAC;;;;;;;;;;;;;;;;;;;;;;AAsBtC,IAAM,YAAY,GAAkB;EAUlC,qBAAW,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,GAAG,EAAE,WAAW,EAAE,iBAAiB,EAAE;;IAE/EA,cAAK,OAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC;;;;;;IAMvD,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;;;;;;IAMhB,IAAI,CAAC,MAAM,GAAG,IAAI,KAAK,EAAE,CAAC;IAC1B,IAAI,WAAW,KAAK,IAAI,EAAE;MACxB,IAAI,CAAC,MAAM,CAAC,WAAW,GAAG,WAAW,CAAC;KACvC;;;;;;IAMD,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;;;;;;IAM/B,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC;;;;;;IAM7B,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;;;;;;oDAE7C;;;;;;yBAMD,6BAAQ,GAAG;IACT,OAAO,IAAI,CAAC,MAAM,CAAC;IACpB;;;;;;;yBAOD,+CAAiB,GAAG;IAClB,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,KAAK,CAAC;IAC9B,IAAI,CAAC,cAAc,EAAE,CAAC;IACtB,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB;;;;;;;yBAOD,6CAAgB,GAAG;IACjB,IAAI,IAAI,CAAC,UAAU,KAAK,SAAS,EAAE;MACjC,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;KAC/D;IACD,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,MAAM,CAAC;IAC/B,IAAI,CAAC,cAAc,EAAE,CAAC;IACtB,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB;;;;;;;;;yBASD,qBAAI,GAAG;IACL,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,IAAI,IAAI,IAAI,CAAC,KAAK,IAAI,UAAU,CAAC,KAAK,EAAE;MACnE,IAAI,CAAC,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC;MAChC,IAAI,CAAC,OAAO,EAAE,CAAC;MACf,IAAI,CAAC,kBAAkB,GAAG;QACxB,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,KAAK;UACrC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC;QAC/B,UAAU,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,IAAI;UACpC,IAAI,CAAC,gBAAgB,EAAE,IAAI,CAAC;OAC/B,CAAC;MACF,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;KAC1C;IACF;;;;;yBAKD,6BAAQ,CAAC,KAAK,EAAE;IACd,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;IACrB;;;;;;;yBAOD,yCAAc,GAAG;IACf,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;IAC/C,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;GAChC;;;EAtHwB,YAuH1B;;;AAGD,eAAe,YAAY,CAAC;"}