{"version":3,"file":"Raster.js","sources":["../../../src/ol/source/Raster.js"],"sourcesContent":["/**\r\n * @module ol/source/Raster\r\n */\r\nimport {getUid} from '../util.js';\r\nimport ImageCanvas from '../ImageCanvas.js';\r\nimport TileQueue from '../TileQueue.js';\r\nimport {createCanvasContext2D} from '../dom.js';\r\nimport {listen} from '../events.js';\r\nimport Event from '../events/Event.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {Processor} from 'pixelworks/lib/index';\r\nimport {equals, getCenter, getHeight, getWidth} from '../extent.js';\r\nimport LayerType from '../LayerType.js';\r\nimport Layer from '../layer/Layer.js';\r\nimport ImageLayer from '../layer/Image.js';\r\nimport TileLayer from '../layer/Tile.js';\r\nimport {assign} from '../obj.js';\r\nimport CanvasImageLayerRenderer from '../renderer/canvas/ImageLayer.js';\r\nimport CanvasTileLayerRenderer from '../renderer/canvas/TileLayer.js';\r\nimport ImageSource from '../source/Image.js';\r\nimport SourceState from '../source/State.js';\r\nimport TileSource from '../source/Tile.js';\r\nimport {create as createTransform} from '../transform.js';\r\n\r\n\r\n/**\r\n * A function that takes an array of input data, performs some operation, and\r\n * returns an array of output data.\r\n * For `pixel` type operations, the function will be called with an array of\r\n * pixels, where each pixel is an array of four numbers (`[r, g, b, a]`) in the\r\n * range of 0 - 255. It should return a single pixel array.\r\n * For `'image'` type operations, functions will be called with an array of\r\n * {@link ImageData https://developer.mozilla.org/en-US/docs/Web/API/ImageData}\r\n * and should return a single {@link ImageData\r\n * https://developer.mozilla.org/en-US/docs/Web/API/ImageData}.  The operations\r\n * are called with a second \"data\" argument, which can be used for storage.  The\r\n * data object is accessible from raster events, where it can be initialized in\r\n * \"beforeoperations\" and accessed again in \"afteroperations\".\r\n *\r\n * @typedef {function((Array.<Array.<number>>|Array.<ImageData>), Object):\r\n *     (Array.<number>|ImageData)} Operation\r\n */\r\n\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst RasterEventType = {\r\n  /**\r\n   * Triggered before operations are run.\r\n   * @event ol/source/Raster~RasterSourceEvent#beforeoperations\r\n   * @api\r\n   */\r\n  BEFOREOPERATIONS: 'beforeoperations',\r\n\r\n  /**\r\n   * Triggered after operations are run.\r\n   * @event ol/source/Raster~RasterSourceEvent#afteroperations\r\n   * @api\r\n   */\r\n  AFTEROPERATIONS: 'afteroperations'\r\n};\r\n\r\n\r\n/**\r\n * Raster operation type. Supported values are `'pixel'` and `'image'`.\r\n * @enum {string}\r\n */\r\nconst RasterOperationType = {\r\n  PIXEL: 'pixel',\r\n  IMAGE: 'image'\r\n};\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Raster} instances are instances of this\r\n * type.\r\n */\r\nclass RasterSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {module:ol/PluggableMap~FrameState} frameState The frame state.\r\n   * @param {Object} data An object made available to operations.\r\n   */\r\n  constructor(type, frameState, data) {\r\n    super(type);\r\n\r\n    /**\r\n     * The raster extent.\r\n     * @type {module:ol/extent~Extent}\r\n     * @api\r\n     */\r\n    this.extent = frameState.extent;\r\n\r\n    /**\r\n     * The pixel resolution (map units per pixel).\r\n     * @type {number}\r\n     * @api\r\n     */\r\n    this.resolution = frameState.viewState.resolution / frameState.pixelRatio;\r\n\r\n    /**\r\n     * An object made available to all operations.  This can be used by operations\r\n     * as a storage object (e.g. for calculating statistics).\r\n     * @type {Object}\r\n     * @api\r\n     */\r\n    this.data = data;\r\n\r\n  }\r\n\r\n}\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {Array.<module:ol/source/Source|module:ol/layer/Layer>} sources Input\r\n * sources or layers. Vector layers must be configured with `renderMode: 'image'`.\r\n * @property {module:ol/source/Raster~Operation} [operation] Raster operation.\r\n * The operation will be called with data from input sources\r\n * and the output will be assigned to the raster source.\r\n * @property {Object} [lib] Functions that will be made available to operations run in a worker.\r\n * @property {number} [threads] By default, operations will be run in a single worker thread.\r\n * To avoid using workers altogether, set `threads: 0`.  For pixel operations, operations can\r\n * be run in multiple worker threads.  Note that there is additional overhead in\r\n * transferring data to multiple workers, and that depending on the user's\r\n * system, it may not be possible to parallelize the work.\r\n * @property {module:ol/source/Raster~RasterOperationType} [operationType='pixel'] Operation type.\r\n * Supported values are `'pixel'` and `'image'`.  By default,\r\n * `'pixel'` operations are assumed, and operations will be called with an\r\n * array of pixels from input sources.  If set to `'image'`, operations will\r\n * be called with an array of ImageData objects from input sources.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * A source that transforms data from any number of input sources using an\r\n * {@link module:ol/source/Raster~Operation} function to transform input pixel values into\r\n * output pixel values.\r\n *\r\n * @fires ol/source/Raster~RasterSourceEvent\r\n * @api\r\n */\r\nclass RasterSource extends ImageSource {\r\n  /**\r\n   * @param {module:ol/source/Raster~Options=} options Options.\r\n   */\r\n  constructor(options) {\r\n    super({});\r\n\r\n    /**\r\n     * @private\r\n     * @type {*}\r\n     */\r\n    this.worker_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/source/Raster~RasterOperationType}\r\n     */\r\n    this.operationType_ = options.operationType !== undefined ?\r\n      options.operationType : RasterOperationType.PIXEL;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.threads_ = options.threads !== undefined ? options.threads : 1;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<module:ol/renderer/canvas/Layer>}\r\n     */\r\n    this.renderers_ = createRenderers(options.sources);\r\n\r\n    for (let r = 0, rr = this.renderers_.length; r < rr; ++r) {\r\n      listen(this.renderers_[r], EventType.CHANGE,\r\n        this.changed, this);\r\n    }\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/TileQueue}\r\n     */\r\n    this.tileQueue_ = new TileQueue(\r\n      function() {\r\n        return 1;\r\n      },\r\n      this.changed.bind(this));\r\n\r\n    const layerStatesArray = getLayerStatesArray(this.renderers_);\r\n    const layerStates = {};\r\n    for (let i = 0, ii = layerStatesArray.length; i < ii; ++i) {\r\n      layerStates[getUid(layerStatesArray[i].layer)] = layerStatesArray[i];\r\n    }\r\n\r\n    /**\r\n     * The most recently requested frame state.\r\n     * @type {module:ol/PluggableMap~FrameState}\r\n     * @private\r\n     */\r\n    this.requestedFrameState_;\r\n\r\n    /**\r\n     * The most recently rendered image canvas.\r\n     * @type {module:ol/ImageCanvas}\r\n     * @private\r\n     */\r\n    this.renderedImageCanvas_ = null;\r\n\r\n    /**\r\n     * The most recently rendered revision.\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/PluggableMap~FrameState}\r\n     */\r\n    this.frameState_ = {\r\n      animate: false,\r\n      coordinateToPixelTransform: createTransform(),\r\n      extent: null,\r\n      focus: null,\r\n      index: 0,\r\n      layerStates: layerStates,\r\n      layerStatesArray: layerStatesArray,\r\n      pixelRatio: 1,\r\n      pixelToCoordinateTransform: createTransform(),\r\n      postRenderFunctions: [],\r\n      size: [0, 0],\r\n      skippedFeatureUids: {},\r\n      tileQueue: this.tileQueue_,\r\n      time: Date.now(),\r\n      usedTiles: {},\r\n      viewState: /** @type {module:ol/View~State} */ ({\r\n        rotation: 0\r\n      }),\r\n      viewHints: [],\r\n      wantedTiles: {}\r\n    };\r\n\r\n    if (options.operation !== undefined) {\r\n      this.setOperation(options.operation, options.lib);\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * Set the operation.\r\n   * @param {module:ol/source/Raster~Operation} operation New operation.\r\n   * @param {Object=} opt_lib Functions that will be available to operations run\r\n   *     in a worker.\r\n   * @api\r\n   */\r\n  setOperation(operation, opt_lib) {\r\n    this.worker_ = new Processor({\r\n      operation: operation,\r\n      imageOps: this.operationType_ === RasterOperationType.IMAGE,\r\n      queue: 1,\r\n      lib: opt_lib,\r\n      threads: this.threads_\r\n    });\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Update the stored frame state.\r\n   * @param {module:ol/extent~Extent} extent The view extent (in map units).\r\n   * @param {number} resolution The view resolution.\r\n   * @param {module:ol/proj/Projection} projection The view projection.\r\n   * @return {module:ol/PluggableMap~FrameState} The updated frame state.\r\n   * @private\r\n   */\r\n  updateFrameState_(extent, resolution, projection) {\r\n\r\n    const frameState = /** @type {module:ol/PluggableMap~FrameState} */ (assign({}, this.frameState_));\r\n\r\n    frameState.viewState = /** @type {module:ol/View~State} */ (assign({}, frameState.viewState));\r\n\r\n    const center = getCenter(extent);\r\n\r\n    frameState.extent = extent.slice();\r\n    frameState.focus = center;\r\n    frameState.size[0] = Math.round(getWidth(extent) / resolution);\r\n    frameState.size[1] = Math.round(getHeight(extent) / resolution);\r\n    frameState.time = Date.now();\r\n    frameState.animate = false;\r\n\r\n    const viewState = frameState.viewState;\r\n    viewState.center = center;\r\n    viewState.projection = projection;\r\n    viewState.resolution = resolution;\r\n    return frameState;\r\n  }\r\n\r\n  /**\r\n   * Determine if all sources are ready.\r\n   * @return {boolean} All sources are ready.\r\n   * @private\r\n   */\r\n  allSourcesReady_() {\r\n    let ready = true;\r\n    let source;\r\n    for (let i = 0, ii = this.renderers_.length; i < ii; ++i) {\r\n      source = this.renderers_[i].getLayer().getSource();\r\n      if (source.getState() !== SourceState.READY) {\r\n        ready = false;\r\n        break;\r\n      }\r\n    }\r\n    return ready;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getImage(extent, resolution, pixelRatio, projection) {\r\n    if (!this.allSourcesReady_()) {\r\n      return null;\r\n    }\r\n\r\n    const frameState = this.updateFrameState_(extent, resolution, projection);\r\n    this.requestedFrameState_ = frameState;\r\n\r\n    // check if we can't reuse the existing ol/ImageCanvas\r\n    if (this.renderedImageCanvas_) {\r\n      const renderedResolution = this.renderedImageCanvas_.getResolution();\r\n      const renderedExtent = this.renderedImageCanvas_.getExtent();\r\n      if (resolution !== renderedResolution || !equals(extent, renderedExtent)) {\r\n        this.renderedImageCanvas_ = null;\r\n      }\r\n    }\r\n\r\n    if (!this.renderedImageCanvas_ || this.getRevision() !== this.renderedRevision_) {\r\n      this.processSources_();\r\n    }\r\n\r\n    frameState.tileQueue.loadMoreTiles(16, 16);\r\n\r\n    if (frameState.animate) {\r\n      requestAnimationFrame(this.changed.bind(this));\r\n    }\r\n\r\n    return this.renderedImageCanvas_;\r\n  }\r\n\r\n  /**\r\n   * Start processing source data.\r\n   * @private\r\n   */\r\n  processSources_() {\r\n    const frameState = this.requestedFrameState_;\r\n    const len = this.renderers_.length;\r\n    const imageDatas = new Array(len);\r\n    for (let i = 0; i < len; ++i) {\r\n      const imageData = getImageData(\r\n        this.renderers_[i], frameState, frameState.layerStatesArray[i]);\r\n      if (imageData) {\r\n        imageDatas[i] = imageData;\r\n      } else {\r\n        return;\r\n      }\r\n    }\r\n\r\n    const data = {};\r\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.BEFOREOPERATIONS, frameState, data));\r\n    this.worker_.process(imageDatas, data, this.onWorkerComplete_.bind(this, frameState));\r\n  }\r\n\r\n  /**\r\n   * Called when pixel processing is complete.\r\n   * @param {module:ol/PluggableMap~FrameState} frameState The frame state.\r\n   * @param {Error} err Any error during processing.\r\n   * @param {ImageData} output The output image data.\r\n   * @param {Object} data The user data.\r\n   * @private\r\n   */\r\n  onWorkerComplete_(frameState, err, output, data) {\r\n    if (err || !output) {\r\n      return;\r\n    }\r\n\r\n    // do nothing if extent or resolution changed\r\n    const extent = frameState.extent;\r\n    const resolution = frameState.viewState.resolution;\r\n    if (resolution !== this.requestedFrameState_.viewState.resolution ||\r\n        !equals(extent, this.requestedFrameState_.extent)) {\r\n      return;\r\n    }\r\n\r\n    let context;\r\n    if (this.renderedImageCanvas_) {\r\n      context = this.renderedImageCanvas_.getImage().getContext('2d');\r\n    } else {\r\n      const width = Math.round(getWidth(extent) / resolution);\r\n      const height = Math.round(getHeight(extent) / resolution);\r\n      context = createCanvasContext2D(width, height);\r\n      this.renderedImageCanvas_ = new ImageCanvas(extent, resolution, 1, context.canvas);\r\n    }\r\n    context.putImageData(output, 0, 0);\r\n\r\n    this.changed();\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    this.dispatchEvent(new RasterSourceEvent(RasterEventType.AFTEROPERATIONS, frameState, data));\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   */\r\n  getImageInternal() {\r\n    return null; // not implemented\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * A reusable canvas context.\r\n * @type {CanvasRenderingContext2D}\r\n * @private\r\n */\r\nlet sharedContext = null;\r\n\r\n\r\n/**\r\n * Get image data from a renderer.\r\n * @param {module:ol/renderer/canvas/Layer} renderer Layer renderer.\r\n * @param {module:ol/PluggableMap~FrameState} frameState The frame state.\r\n * @param {module:ol/layer/Layer~State} layerState The layer state.\r\n * @return {ImageData} The image data.\r\n */\r\nfunction getImageData(renderer, frameState, layerState) {\r\n  if (!renderer.prepareFrame(frameState, layerState)) {\r\n    return null;\r\n  }\r\n  const width = frameState.size[0];\r\n  const height = frameState.size[1];\r\n  if (!sharedContext) {\r\n    sharedContext = createCanvasContext2D(width, height);\r\n  } else {\r\n    const canvas = sharedContext.canvas;\r\n    if (canvas.width !== width || canvas.height !== height) {\r\n      sharedContext = createCanvasContext2D(width, height);\r\n    } else {\r\n      sharedContext.clearRect(0, 0, width, height);\r\n    }\r\n  }\r\n  renderer.composeFrame(frameState, layerState, sharedContext);\r\n  return sharedContext.getImageData(0, 0, width, height);\r\n}\r\n\r\n\r\n/**\r\n * Get a list of layer states from a list of renderers.\r\n * @param {Array.<module:ol/renderer/canvas/Layer>} renderers Layer renderers.\r\n * @return {Array.<module:ol/layer/Layer~State>} The layer states.\r\n */\r\nfunction getLayerStatesArray(renderers) {\r\n  return renderers.map(function(renderer) {\r\n    return renderer.getLayer().getLayerState();\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Create renderers for all sources.\r\n * @param {Array.<module:ol/source/Source>} sources The sources.\r\n * @return {Array.<module:ol/renderer/canvas/Layer>} Array of layer renderers.\r\n */\r\nfunction createRenderers(sources) {\r\n  const len = sources.length;\r\n  const renderers = new Array(len);\r\n  for (let i = 0; i < len; ++i) {\r\n    renderers[i] = createRenderer(sources[i]);\r\n  }\r\n  return renderers;\r\n}\r\n\r\n\r\n/**\r\n * Create a renderer for the provided source.\r\n * @param {module:ol/source/Source} source The source.\r\n * @return {module:ol/renderer/canvas/Layer} The renderer.\r\n */\r\nfunction createRenderer(source) {\r\n  let renderer = null;\r\n  if (source instanceof TileSource) {\r\n    renderer = createTileRenderer(source);\r\n  } else if (source instanceof ImageSource) {\r\n    renderer = createImageRenderer(source);\r\n  } else if (source instanceof TileLayer) {\r\n    renderer = new CanvasTileLayerRenderer(source);\r\n  } else if (source instanceof Layer &&\r\n      (source.getType() == LayerType.IMAGE || source.getType() == LayerType.VECTOR)) {\r\n    renderer = new CanvasImageLayerRenderer(source);\r\n  }\r\n  return renderer;\r\n}\r\n\r\n\r\n/**\r\n * Create an image renderer for the provided source.\r\n * @param {module:ol/source/Image} source The source.\r\n * @return {module:ol/renderer/canvas/Layer} The renderer.\r\n */\r\nfunction createImageRenderer(source) {\r\n  const layer = new ImageLayer({source: source});\r\n  return new CanvasImageLayerRenderer(layer);\r\n}\r\n\r\n\r\n/**\r\n * Create a tile renderer for the provided source.\r\n * @param {module:ol/source/Tile} source The source.\r\n * @return {module:ol/renderer/canvas/Layer} The renderer.\r\n */\r\nfunction createTileRenderer(source) {\r\n  const layer = new TileLayer({source: source});\r\n  return new CanvasTileLayerRenderer(layer);\r\n}\r\n\r\n\r\nexport default RasterSource;\r\n"],"names":["const","super","let","this"],"mappings":"AAAA;;;AAGA,QAAQ,MAAM,OAAO,YAAY,CAAC;AAClC,OAAO,WAAW,MAAM,mBAAmB,CAAC;AAC5C,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,QAAQ,qBAAqB,OAAO,WAAW,CAAC;AAChD,QAAQ,MAAM,OAAO,cAAc,CAAC;AACpC,OAAO,KAAK,MAAM,oBAAoB,CAAC;AACvC,OAAO,SAAS,MAAM,wBAAwB,CAAC;AAC/C,QAAQ,SAAS,OAAO,sBAAsB,CAAC;AAC/C,QAAQ,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,QAAQ,OAAO,cAAc,CAAC;AACpE,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,KAAK,MAAM,mBAAmB,CAAC;AACtC,OAAO,UAAU,MAAM,mBAAmB,CAAC;AAC3C,OAAO,SAAS,MAAM,kBAAkB,CAAC;AACzC,QAAQ,MAAM,OAAO,WAAW,CAAC;AACjC,OAAO,wBAAwB,MAAM,kCAAkC,CAAC;AACxE,OAAO,uBAAuB,MAAM,iCAAiC,CAAC;AACtE,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,UAAU,MAAM,mBAAmB,CAAC;AAC3C,QAAQ,MAAM,IAAI,eAAe,OAAO,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;AAyB1DA,GAAK,CAAC,eAAe,GAAG;;;;;;EAMtB,gBAAgB,EAAE,kBAAkB;;;;;;;EAOpC,eAAe,EAAE,iBAAiB;CACnC,CAAC;;;;;;;AAOFA,GAAK,CAAC,mBAAmB,GAAG;EAC1B,KAAK,EAAE,OAAO;EACd,KAAK,EAAE,OAAO;CACf,CAAC;;;;;;;;AAQF,IAAM,iBAAiB,GAAc;EAMnC,0BAAW,CAAC,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE;IAClCC,UAAK,OAAC,IAAI,CAAC,CAAC;;;;;;;IAOZ,IAAI,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;;;;;;;IAOhC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;;;;;;;;IAQ1E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;;;;;;GAElB;;;EA/B6B,QAiC/B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCD,IAAM,YAAY,GAAoB;EAIpC,qBAAW,CAAC,OAAO,EAAE;;AAAC;IACpBA,gBAAK,OAAC,EAAE,CAAC,CAAC;;;;;;IAMV,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;;;;;;IAMpB,IAAI,CAAC,cAAc,GAAG,OAAO,CAAC,aAAa,KAAK,SAAS;MACvD,OAAO,CAAC,aAAa,GAAG,mBAAmB,CAAC,KAAK,CAAC;;;;;;IAMpD,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,OAAO,KAAK,SAAS,GAAG,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC;;;;;;IAMpE,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;;IAEnD,KAAKC,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;MACxD,MAAM,CAACC,MAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,MAAM;QACzCA,MAAI,CAAC,OAAO,EAAEA,MAAI,CAAC,CAAC;KACvB;;;;;;IAMD,IAAI,CAAC,UAAU,GAAG,IAAI,SAAS;MAC7B,WAAW;QACT,OAAO,CAAC,CAAC;OACV;MACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;;IAE3BH,GAAK,CAAC,gBAAgB,GAAG,mBAAmB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IAC9DA,GAAK,CAAC,WAAW,GAAG,EAAE,CAAC;IACvB,KAAKE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,gBAAgB,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;MACzD,WAAW,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,gBAAgB,CAAC,CAAC,CAAC,CAAC;KACtE;;;;;;;IAOD,IAAI,CAAC,oBAAoB,CAAC;;;;;;;IAO1B,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;;;;;;IAMjC,IAAI,CAAC,iBAAiB,CAAC;;;;;;IAMvB,IAAI,CAAC,WAAW,GAAG;MACjB,OAAO,EAAE,KAAK;MACd,0BAA0B,EAAE,eAAe,EAAE;MAC7C,MAAM,EAAE,IAAI;MACZ,KAAK,EAAE,IAAI;MACX,KAAK,EAAE,CAAC;MACR,WAAW,EAAE,WAAW;MACxB,gBAAgB,EAAE,gBAAgB;MAClC,UAAU,EAAE,CAAC;MACb,0BAA0B,EAAE,eAAe,EAAE;MAC7C,mBAAmB,EAAE,EAAE;MACvB,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MACZ,kBAAkB,EAAE,EAAE;MACtB,SAAS,EAAE,IAAI,CAAC,UAAU;MAC1B,IAAI,EAAE,IAAI,CAAC,GAAG,EAAE;MAChB,SAAS,EAAE,EAAE;MACb,SAAS,sCAAsC,CAAC;QAC9C,QAAQ,EAAE,CAAC;OACZ,CAAC;MACF,SAAS,EAAE,EAAE;MACb,WAAW,EAAE,EAAE;KAChB,CAAC;;IAEF,IAAI,OAAO,CAAC,SAAS,KAAK,SAAS,EAAE;MACnC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;KACnD;;;;;;oDAEF;;;;;;;;;yBASD,qCAAY,CAAC,SAAS,EAAE,OAAO,EAAE;IAC/B,IAAI,CAAC,OAAO,GAAG,IAAI,SAAS,CAAC;MAC3B,SAAS,EAAE,SAAS;MACpB,QAAQ,EAAE,IAAI,CAAC,cAAc,KAAK,mBAAmB,CAAC,KAAK;MAC3D,KAAK,EAAE,CAAC;MACR,GAAG,EAAE,OAAO;MACZ,OAAO,EAAE,IAAI,CAAC,QAAQ;KACvB,CAAC,CAAC;IACH,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB;;;;;;;;;;yBAUD,+CAAiB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE;;IAEhDF,GAAK,CAAC,UAAU,oDAAoD,CAAC,MAAM,CAAC,EAAE,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;;IAEnG,UAAU,CAAC,SAAS,uCAAuC,CAAC,MAAM,CAAC,EAAE,EAAE,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC;;IAE9FA,GAAK,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;;IAEjC,UAAU,CAAC,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IACnC,UAAU,CAAC,KAAK,GAAG,MAAM,CAAC;IAC1B,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;IAC/D,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;IAChE,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,GAAG,EAAE,CAAC;IAC7B,UAAU,CAAC,OAAO,GAAG,KAAK,CAAC;;IAE3BA,GAAK,CAAC,SAAS,GAAG,UAAU,CAAC,SAAS,CAAC;IACvC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;IAC1B,SAAS,CAAC,UAAU,GAAG,UAAU,CAAC;IAClC,SAAS,CAAC,UAAU,GAAG,UAAU,CAAC;IAClC,OAAO,UAAU,CAAC;IACnB;;;;;;;yBAOD,6CAAgB,GAAG;;AAAC;IAClBE,GAAG,CAAC,KAAK,GAAG,IAAI,CAAC;IACjBA,GAAG,CAAC,MAAM,CAAC;IACX,KAAKA,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;MACxD,MAAM,GAAGC,MAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,CAAC;MACnD,IAAI,MAAM,CAAC,QAAQ,EAAE,KAAK,WAAW,CAAC,KAAK,EAAE;QAC3C,KAAK,GAAG,KAAK,CAAC;QACd,MAAM;OACP;KACF;IACD,OAAO,KAAK,CAAC;IACd;;;;;yBAKD,6BAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE;IACnD,IAAI,CAAC,IAAI,CAAC,gBAAgB,EAAE,EAAE;MAC5B,OAAO,IAAI,CAAC;KACb;;IAEDH,GAAK,CAAC,UAAU,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;IAC1E,IAAI,CAAC,oBAAoB,GAAG,UAAU,CAAC;;;IAGvC,IAAI,IAAI,CAAC,oBAAoB,EAAE;MAC7BA,GAAK,CAAC,kBAAkB,GAAG,IAAI,CAAC,oBAAoB,CAAC,aAAa,EAAE,CAAC;MACrEA,GAAK,CAAC,cAAc,GAAG,IAAI,CAAC,oBAAoB,CAAC,SAAS,EAAE,CAAC;MAC7D,IAAI,UAAU,KAAK,kBAAkB,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,cAAc,CAAC,EAAE;QACxE,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC;OAClC;KACF;;IAED,IAAI,CAAC,IAAI,CAAC,oBAAoB,IAAI,IAAI,CAAC,WAAW,EAAE,KAAK,IAAI,CAAC,iBAAiB,EAAE;MAC/E,IAAI,CAAC,eAAe,EAAE,CAAC;KACxB;;IAED,UAAU,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;;IAE3C,IAAI,UAAU,CAAC,OAAO,EAAE;MACtB,qBAAqB,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;KAChD;;IAED,OAAO,IAAI,CAAC,oBAAoB,CAAC;IAClC;;;;;;yBAMD,2CAAe,GAAG;;AAAC;IACjBA,GAAK,CAAC,UAAU,GAAG,IAAI,CAAC,oBAAoB,CAAC;IAC7CA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;IACnCA,GAAK,CAAC,UAAU,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;IAClC,KAAKE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;MAC5BF,GAAK,CAAC,SAAS,GAAG,YAAY;QAC5BG,MAAI,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC;MAClE,IAAI,SAAS,EAAE;QACb,UAAU,CAAC,CAAC,CAAC,GAAG,SAAS,CAAC;OAC3B,MAAM;QACL,OAAO;OACR;KACF;;IAEDH,GAAK,CAAC,IAAI,GAAG,EAAE,CAAC;IAChB,IAAI,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,eAAe,CAAC,gBAAgB,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9F,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,UAAU,EAAE,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;IACvF;;;;;;;;;;yBAUD,+CAAiB,CAAC,UAAU,EAAE,GAAG,EAAE,MAAM,EAAE,IAAI,EAAE;IAC/C,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE;MAClB,OAAO;KACR;;;IAGDA,GAAK,CAAC,MAAM,GAAG,UAAU,CAAC,MAAM,CAAC;IACjCA,GAAK,CAAC,UAAU,GAAG,UAAU,CAAC,SAAS,CAAC,UAAU,CAAC;IACnD,IAAI,UAAU,KAAK,IAAI,CAAC,oBAAoB,CAAC,SAAS,CAAC,UAAU;QAC7D,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,oBAAoB,CAAC,MAAM,CAAC,EAAE;MACrD,OAAO;KACR;;IAEDE,GAAG,CAAC,OAAO,CAAC;IACZ,IAAI,IAAI,CAAC,oBAAoB,EAAE;MAC7B,OAAO,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;KACjE,MAAM;MACLF,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;MACxDA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC;MAC1D,OAAO,GAAG,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;MAC/C,IAAI,CAAC,oBAAoB,GAAG,IAAI,WAAW,CAAC,MAAM,EAAE,UAAU,EAAE,CAAC,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;KACpF;IACD,OAAO,CAAC,YAAY,CAAC,MAAM,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;IAEnC,IAAI,CAAC,OAAO,EAAE,CAAC;IACf,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;IAE5C,IAAI,CAAC,aAAa,CAAC,IAAI,iBAAiB,CAAC,eAAe,CAAC,eAAe,EAAE,UAAU,EAAE,IAAI,CAAC,CAAC,CAAC;IAC9F;;;;;yBAKD,6CAAgB,GAAG;IACjB,OAAO,IAAI,CAAC;GACb;;;EA/QwB,cAgR1B;;;;;;;;AAQDE,GAAG,CAAC,aAAa,GAAG,IAAI,CAAC;;;;;;;;;;AAUzB,SAAS,YAAY,CAAC,QAAQ,EAAE,UAAU,EAAE,UAAU,EAAE;EACtD,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,CAAC,EAAE;IAClD,OAAO,IAAI,CAAC;GACb;EACDF,GAAK,CAAC,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EACjCA,GAAK,CAAC,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;EAClC,IAAI,CAAC,aAAa,EAAE;IAClB,aAAa,GAAG,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;GACtD,MAAM;IACLA,GAAK,CAAC,MAAM,GAAG,aAAa,CAAC,MAAM,CAAC;IACpC,IAAI,MAAM,CAAC,KAAK,KAAK,KAAK,IAAI,MAAM,CAAC,MAAM,KAAK,MAAM,EAAE;MACtD,aAAa,GAAG,qBAAqB,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KACtD,MAAM;MACL,aAAa,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;KAC9C;GACF;EACD,QAAQ,CAAC,YAAY,CAAC,UAAU,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC;EAC7D,OAAO,aAAa,CAAC,YAAY,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC;CACxD;;;;;;;;AAQD,SAAS,mBAAmB,CAAC,SAAS,EAAE;EACtC,OAAO,SAAS,CAAC,GAAG,CAAC,SAAS,QAAQ,EAAE;IACtC,OAAO,QAAQ,CAAC,QAAQ,EAAE,CAAC,aAAa,EAAE,CAAC;GAC5C,CAAC,CAAC;CACJ;;;;;;;;AAQD,SAAS,eAAe,CAAC,OAAO,EAAE;EAChCA,GAAK,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;EAC3BA,GAAK,CAAC,SAAS,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;EACjC,KAAKE,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE;IAC5B,SAAS,CAAC,CAAC,CAAC,GAAG,cAAc,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;GAC3C;EACD,OAAO,SAAS,CAAC;CAClB;;;;;;;;AAQD,SAAS,cAAc,CAAC,MAAM,EAAE;EAC9BA,GAAG,CAAC,QAAQ,GAAG,IAAI,CAAC;EACpB,IAAI,MAAM,YAAY,UAAU,EAAE;IAChC,QAAQ,GAAG,kBAAkB,CAAC,MAAM,CAAC,CAAC;GACvC,MAAM,IAAI,MAAM,YAAY,WAAW,EAAE;IACxC,QAAQ,GAAG,mBAAmB,CAAC,MAAM,CAAC,CAAC;GACxC,MAAM,IAAI,MAAM,YAAY,SAAS,EAAE;IACtC,QAAQ,GAAG,IAAI,uBAAuB,CAAC,MAAM,CAAC,CAAC;GAChD,MAAM,IAAI,MAAM,YAAY,KAAK;MAC9B,CAAC,MAAM,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC,KAAK,IAAI,MAAM,CAAC,OAAO,EAAE,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE;IACjF,QAAQ,GAAG,IAAI,wBAAwB,CAAC,MAAM,CAAC,CAAC;GACjD;EACD,OAAO,QAAQ,CAAC;CACjB;;;;;;;;AAQD,SAAS,mBAAmB,CAAC,MAAM,EAAE;EACnCF,GAAK,CAAC,KAAK,GAAG,IAAI,UAAU,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;EAC/C,OAAO,IAAI,wBAAwB,CAAC,KAAK,CAAC,CAAC;CAC5C;;;;;;;;AAQD,SAAS,kBAAkB,CAAC,MAAM,EAAE;EAClCA,GAAK,CAAC,KAAK,GAAG,IAAI,SAAS,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;EAC9C,OAAO,IAAI,uBAAuB,CAAC,KAAK,CAAC,CAAC;CAC3C;;;AAGD,eAAe,YAAY,CAAC;"}