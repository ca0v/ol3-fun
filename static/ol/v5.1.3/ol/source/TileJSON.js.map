{"version":3,"file":"TileJSON.js","sources":["../../../src/ol/source/TileJSON.js"],"sourcesContent":["/**\r\n * @module ol/source/TileJSON\r\n */\r\n// FIXME check order of async callbacks\r\n\r\n/**\r\n * See http://mapbox.com/developers/api/.\r\n */\r\n\r\n\r\nimport {createFromTemplates} from '../tileurlfunction.js';\r\nimport {assert} from '../asserts.js';\r\nimport {applyTransform, intersects} from '../extent.js';\r\nimport {jsonp as requestJSONP} from '../net.js';\r\nimport {get as getProjection, getTransformFromProjections} from '../proj.js';\r\nimport SourceState from '../source/State.js';\r\nimport TileImage from '../source/TileImage.js';\r\nimport {createXYZ, extentFromProjection} from '../tilegrid.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize=2048] Cache size.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\r\n * access pixel data with the Canvas renderer.  See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [jsonp=false] Use JSONP with callback to load the TileJSON.\r\n * Useful when the server does not support CORS..\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {tileJSON} [tileJSON] TileJSON configuration for this source.\r\n * If not provided, `url` must be configured.\r\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {string} [url] URL to the TileJSON file. If not provided, `tileJSON` must be configured.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data in TileJSON format.\r\n * @api\r\n */\r\nclass TileJSON extends TileImage {\r\n  /**\r\n   * @param {module:ol/source/TileJSON~Options=} options TileJSON options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      projection: getProjection('EPSG:3857'),\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      state: SourceState.LOADING,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition\r\n    });\r\n\r\n    /**\r\n     * @type {TileJSON}\r\n     * @private\r\n     */\r\n    this.tileJSON_ = null;\r\n\r\n\r\n    if (options.url) {\r\n      if (options.jsonp) {\r\n        requestJSONP(options.url, this.handleTileJSONResponse.bind(this),\r\n          this.handleTileJSONError.bind(this));\r\n      } else {\r\n        const client = new XMLHttpRequest();\r\n        client.addEventListener('load', this.onXHRLoad_.bind(this));\r\n        client.addEventListener('error', this.onXHRError_.bind(this));\r\n        client.open('GET', options.url);\r\n        client.send();\r\n      }\r\n    } else if (options.tileJSON) {\r\n      this.handleTileJSONResponse(options.tileJSON);\r\n    } else {\r\n      assert(false, 51); // Either `url` or `tileJSON` options must be provided\r\n    }\r\n\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The load event.\r\n   */\r\n  onXHRLoad_(event) {\r\n    const client = /** @type {XMLHttpRequest} */ (event.target);\r\n    // status will be 0 for file:// urls\r\n    if (!client.status || client.status >= 200 && client.status < 300) {\r\n      let response;\r\n      try {\r\n        response = /** @type {TileJSON} */(JSON.parse(client.responseText));\r\n      } catch (err) {\r\n        this.handleTileJSONError();\r\n        return;\r\n      }\r\n      this.handleTileJSONResponse(response);\r\n    } else {\r\n      this.handleTileJSONError();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Event} event The error event.\r\n   */\r\n  onXHRError_(event) {\r\n    this.handleTileJSONError();\r\n  }\r\n\r\n  /**\r\n   * @return {TileJSON} The tilejson object.\r\n   * @api\r\n   */\r\n  getTileJSON() {\r\n    return this.tileJSON_;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {TileJSON} tileJSON Tile JSON.\r\n   */\r\n  handleTileJSONResponse(tileJSON) {\r\n\r\n    const epsg4326Projection = getProjection('EPSG:4326');\r\n\r\n    const sourceProjection = this.getProjection();\r\n    let extent;\r\n    if (tileJSON.bounds !== undefined) {\r\n      const transform = getTransformFromProjections(\r\n        epsg4326Projection, sourceProjection);\r\n      extent = applyTransform(tileJSON.bounds, transform);\r\n    }\r\n\r\n    const minZoom = tileJSON.minzoom || 0;\r\n    const maxZoom = tileJSON.maxzoom || 22;\r\n    const tileGrid = createXYZ({\r\n      extent: extentFromProjection(sourceProjection),\r\n      maxZoom: maxZoom,\r\n      minZoom: minZoom\r\n    });\r\n    this.tileGrid = tileGrid;\r\n\r\n    this.tileUrlFunction = createFromTemplates(tileJSON.tiles, tileGrid);\r\n\r\n    if (tileJSON.attribution !== undefined && !this.getAttributions()) {\r\n      const attributionExtent = extent !== undefined ?\r\n        extent : epsg4326Projection.getExtent();\r\n\r\n      this.setAttributions(function(frameState) {\r\n        if (intersects(attributionExtent, frameState.extent)) {\r\n          return [tileJSON.attribution];\r\n        }\r\n        return null;\r\n      });\r\n\r\n    }\r\n    this.tileJSON_ = tileJSON;\r\n    this.setState(SourceState.READY);\r\n\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  handleTileJSONError() {\r\n    this.setState(SourceState.ERROR);\r\n  }\r\n}\r\n\r\n\r\nexport default TileJSON;\r\n"],"names":["super","const","let"],"mappings":"AAAA;;;;;;;;;;AAUA,QAAQ,mBAAmB,OAAO,uBAAuB,CAAC;AAC1D,QAAQ,MAAM,OAAO,eAAe,CAAC;AACrC,QAAQ,cAAc,EAAE,UAAU,OAAO,cAAc,CAAC;AACxD,QAAQ,KAAK,IAAI,YAAY,OAAO,WAAW,CAAC;AAChD,QAAQ,GAAG,IAAI,aAAa,EAAE,2BAA2B,OAAO,YAAY,CAAC;AAC7E,OAAO,WAAW,MAAM,oBAAoB,CAAC;AAC7C,OAAO,SAAS,MAAM,wBAAwB,CAAC;AAC/C,QAAQ,SAAS,EAAE,oBAAoB,OAAO,gBAAgB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkC/D,IAAM,QAAQ,GAAkB;EAI9B,iBAAW,CAAC,OAAO,EAAE;IACnBA,cAAK,OAAC;MACJ,YAAY,EAAE,OAAO,CAAC,YAAY;MAClC,SAAS,EAAE,OAAO,CAAC,SAAS;MAC5B,WAAW,EAAE,OAAO,CAAC,WAAW;MAChC,UAAU,EAAE,aAAa,CAAC,WAAW,CAAC;MACtC,0BAA0B,EAAE,OAAO,CAAC,0BAA0B;MAC9D,KAAK,EAAE,WAAW,CAAC,OAAO;MAC1B,gBAAgB,EAAE,OAAO,CAAC,gBAAgB;MAC1C,KAAK,EAAE,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI;MACzD,UAAU,EAAE,OAAO,CAAC,UAAU;KAC/B,CAAC,CAAC;;;;;;IAMH,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;;;IAGtB,IAAI,OAAO,CAAC,GAAG,EAAE;MACf,IAAI,OAAO,CAAC,KAAK,EAAE;QACjB,YAAY,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC;UAC9D,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;OACxC,MAAM;QACLC,GAAK,CAAC,MAAM,GAAG,IAAI,cAAc,EAAE,CAAC;QACpC,MAAM,CAAC,gBAAgB,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC5D,MAAM,CAAC,gBAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;QAC9D,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC;QAChC,MAAM,CAAC,IAAI,EAAE,CAAC;OACf;KACF,MAAM,IAAI,OAAO,CAAC,QAAQ,EAAE;MAC3B,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;KAC/C,MAAM;MACL,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KACnB;;;;;;4CAEF;;;;;;qBAMD,iCAAU,CAAC,KAAK,EAAE;IAChBA,GAAK,CAAC,MAAM,iCAAiC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;;IAE5D,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,MAAM,IAAI,GAAG,IAAI,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;MACjEC,GAAG,CAAC,QAAQ,CAAC;MACb,IAAI;QACF,QAAQ,0BAA0B,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;OACrE,CAAC,OAAO,GAAG,EAAE;QACZ,IAAI,CAAC,mBAAmB,EAAE,CAAC;QAC3B,OAAO;OACR;MACD,IAAI,CAAC,sBAAsB,CAAC,QAAQ,CAAC,CAAC;KACvC,MAAM;MACL,IAAI,CAAC,mBAAmB,EAAE,CAAC;KAC5B;IACF;;;;;;qBAMD,mCAAW,CAAC,KAAK,EAAE;IACjB,IAAI,CAAC,mBAAmB,EAAE,CAAC;IAC5B;;;;;;qBAMD,mCAAW,GAAG;IACZ,OAAO,IAAI,CAAC,SAAS,CAAC;IACvB;;;;;;qBAMD,yDAAsB,CAAC,QAAQ,EAAE;;IAE/BD,GAAK,CAAC,kBAAkB,GAAG,aAAa,CAAC,WAAW,CAAC,CAAC;;IAEtDA,GAAK,CAAC,gBAAgB,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;IAC9CC,GAAG,CAAC,MAAM,CAAC;IACX,IAAI,QAAQ,CAAC,MAAM,KAAK,SAAS,EAAE;MACjCD,GAAK,CAAC,SAAS,GAAG,2BAA2B;QAC3C,kBAAkB,EAAE,gBAAgB,CAAC,CAAC;MACxC,MAAM,GAAG,cAAc,CAAC,QAAQ,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;KACrD;;IAEDA,GAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,CAAC,CAAC;IACtCA,GAAK,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,IAAI,EAAE,CAAC;IACvCA,GAAK,CAAC,QAAQ,GAAG,SAAS,CAAC;MACzB,MAAM,EAAE,oBAAoB,CAAC,gBAAgB,CAAC;MAC9C,OAAO,EAAE,OAAO;MAChB,OAAO,EAAE,OAAO;KACjB,CAAC,CAAC;IACH,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;;IAEzB,IAAI,CAAC,eAAe,GAAG,mBAAmB,CAAC,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;;IAErE,IAAI,QAAQ,CAAC,WAAW,KAAK,SAAS,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,EAAE;MACjEA,GAAK,CAAC,iBAAiB,GAAG,MAAM,KAAK,SAAS;QAC5C,MAAM,GAAG,kBAAkB,CAAC,SAAS,EAAE,CAAC;;MAE1C,IAAI,CAAC,eAAe,CAAC,SAAS,UAAU,EAAE;QACxC,IAAI,UAAU,CAAC,iBAAiB,EAAE,UAAU,CAAC,MAAM,CAAC,EAAE;UACpD,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;SAC/B;QACD,OAAO,IAAI,CAAC;OACb,CAAC,CAAC;;KAEJ;IACD,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;IAC1B,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;;IAElC;;;;;qBAKD,mDAAmB,GAAG;IACpB,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;GAClC;;;EAjIoB,YAkItB;;;AAGD,eAAe,QAAQ,CAAC;"}