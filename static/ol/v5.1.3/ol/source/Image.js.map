{"version":3,"file":"Image.js","sources":["../../../src/ol/source/Image.js"],"sourcesContent":["/**\r\n * @module ol/source/Image\r\n */\r\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\r\n\r\nimport ImageState from '../ImageState.js';\r\nimport {linearFindNearest} from '../array.js';\r\nimport Event from '../events/Event.js';\r\nimport {equals} from '../extent.js';\r\nimport {equivalent} from '../proj.js';\r\nimport ReprojImage from '../reproj/Image.js';\r\nimport Source from '../source/Source.js';\r\n\r\n\r\n/**\r\n * @enum {string}\r\n */\r\nconst ImageSourceEventType = {\r\n\r\n  /**\r\n   * Triggered when an image starts loading.\r\n   * @event ol/source/Image~ImageSourceEvent#imageloadstart\r\n   * @api\r\n   */\r\n  IMAGELOADSTART: 'imageloadstart',\r\n\r\n  /**\r\n   * Triggered when an image finishes loading.\r\n   * @event ol/source/Image~ImageSourceEvent#imageloadend\r\n   * @api\r\n   */\r\n  IMAGELOADEND: 'imageloadend',\r\n\r\n  /**\r\n   * Triggered if image loading results in an error.\r\n   * @event ol/source/Image~ImageSourceEvent#imageloaderror\r\n   * @api\r\n   */\r\n  IMAGELOADERROR: 'imageloaderror'\r\n\r\n};\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Events emitted by {@link module:ol/source/Image~ImageSource} instances are instances of this\r\n * type.\r\n */\r\nclass ImageSourceEvent extends Event {\r\n  /**\r\n   * @param {string} type Type.\r\n   * @param {module:ol/Image} image The image.\r\n   */\r\n  constructor(type, image) {\r\n\r\n    super(type);\r\n\r\n    /**\r\n     * The image related to the event.\r\n     * @type {module:ol/Image}\r\n     * @api\r\n     */\r\n    this.image = image;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions]\r\n * @property {module:ol/extent~Extent} [extent]\r\n * @property {module:ol/proj~ProjectionLike} projection\r\n * @property {Array.<number>} [resolutions]\r\n * @property {module:ol/source/State} [state]\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for sources providing a single image.\r\n * @api\r\n */\r\nclass ImageSource extends Source {\r\n  /**\r\n   * @param {module:ol/source/Image~Options} options Single image source options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      extent: options.extent,\r\n      projection: options.projection,\r\n      state: options.state\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<number>}\r\n     */\r\n    this.resolutions_ = options.resolutions !== undefined ?\r\n      options.resolutions : null;\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/reproj/Image}\r\n     */\r\n    this.reprojectedImage_ = null;\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.reprojectedRevision_ = 0;\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} Resolutions.\r\n   * @override\r\n   */\r\n  getResolutions() {\r\n    return this.resolutions_;\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @param {number} resolution Resolution.\r\n   * @return {number} Resolution.\r\n   */\r\n  findNearestResolution(resolution) {\r\n    if (this.resolutions_) {\r\n      const idx = linearFindNearest(this.resolutions_, resolution, 0);\r\n      resolution = this.resolutions_[idx];\r\n    }\r\n    return resolution;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {module:ol/proj/Projection} projection Projection.\r\n   * @return {module:ol/ImageBase} Single image.\r\n   */\r\n  getImage(extent, resolution, pixelRatio, projection) {\r\n    const sourceProjection = this.getProjection();\r\n    if (!ENABLE_RASTER_REPROJECTION ||\r\n        !sourceProjection ||\r\n        !projection ||\r\n        equivalent(sourceProjection, projection)) {\r\n      if (sourceProjection) {\r\n        projection = sourceProjection;\r\n      }\r\n      return this.getImageInternal(extent, resolution, pixelRatio, projection);\r\n    } else {\r\n      if (this.reprojectedImage_) {\r\n        if (this.reprojectedRevision_ == this.getRevision() &&\r\n            equivalent(\r\n              this.reprojectedImage_.getProjection(), projection) &&\r\n            this.reprojectedImage_.getResolution() == resolution &&\r\n            equals(this.reprojectedImage_.getExtent(), extent)) {\r\n          return this.reprojectedImage_;\r\n        }\r\n        this.reprojectedImage_.dispose();\r\n        this.reprojectedImage_ = null;\r\n      }\r\n\r\n      this.reprojectedImage_ = new ReprojImage(\r\n        sourceProjection, projection, extent, resolution, pixelRatio,\r\n        function(extent, resolution, pixelRatio) {\r\n          return this.getImageInternal(extent, resolution,\r\n            pixelRatio, sourceProjection);\r\n        }.bind(this));\r\n      this.reprojectedRevision_ = this.getRevision();\r\n\r\n      return this.reprojectedImage_;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {number} resolution Resolution.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {module:ol/proj/Projection} projection Projection.\r\n   * @return {module:ol/ImageBase} Single image.\r\n   * @protected\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {}\r\n\r\n  /**\r\n   * Handle image change events.\r\n   * @param {module:ol/events/Event} event Event.\r\n   * @protected\r\n   */\r\n  handleImageChange(event) {\r\n    const image = /** @type {module:ol/Image} */ (event.target);\r\n    switch (image.getState()) {\r\n      case ImageState.LOADING:\r\n        this.dispatchEvent(\r\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADSTART,\r\n            image));\r\n        break;\r\n      case ImageState.LOADED:\r\n        this.dispatchEvent(\r\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADEND,\r\n            image));\r\n        break;\r\n      case ImageState.ERROR:\r\n        this.dispatchEvent(\r\n          new ImageSourceEvent(ImageSourceEventType.IMAGELOADERROR,\r\n            image));\r\n        break;\r\n      default:\r\n        // pass\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Default image load function for image sources that use module:ol/Image~Image image\r\n * instances.\r\n * @param {module:ol/Image} image Image.\r\n * @param {string} src Source.\r\n */\r\nexport function defaultImageLoadFunction(image, src) {\r\n  image.getImage().src = src;\r\n}\r\n\r\n\r\nexport default ImageSource;\r\n"],"names":["const","super"],"mappings":"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"}