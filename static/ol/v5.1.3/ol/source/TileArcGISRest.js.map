{"version":3,"file":"TileArcGISRest.js","sources":["../../../src/ol/source/TileArcGISRest.js"],"sourcesContent":["/**\r\n * @module ol/source/TileArcGISRest\r\n */\r\n\r\nimport {createEmpty} from '../extent.js';\r\nimport {modulo} from '../math.js';\r\nimport {assign} from '../obj.js';\r\nimport {toSize, scale as scaleSize} from '../size.js';\r\nimport TileImage from '../source/TileImage.js';\r\nimport {hash as tileCoordHash} from '../tilecoord.js';\r\nimport {appendParams} from '../uri.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize=2048] Cache size.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.\r\n * Note that you must provide a `crossOrigin` value if you are using the WebGL renderer\r\n * or if you want to access pixel data with the Canvas renderer.  See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image\r\n * for more detail.\r\n * @property {Object.<string,*>} [params] ArcGIS Rest parameters. This field is optional. Service defaults will be\r\n * used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is `IMAGE` by\r\n * default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`,\r\n * and `IMAGESR` will be set dynamically. Set `LAYERS` to\r\n * override the default service layer visibility. See\r\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\r\n * for further reference.\r\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,\r\n * tilesize and extent supported by the server.\r\n * If this is not defined, a default grid will be used: if there is a projection\r\n * extent, the grid will be based on that; if not, a grid based on a global\r\n * extent with origin at 0,0 will be used.\r\n * @property {module:ol/proj~ProjectionLike} projection Projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL.\r\n * The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The\r\n * url should include /MapServer or /ImageServer.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.  To disable the opacity\r\n * transition, pass `transition: 0`.\r\n * @property {Array.<string>} urls ArcGIS Rest service urls. Use this instead of `url` when the ArcGIS\r\n * Service supports multiple urls for export requests.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data from ArcGIS Rest services. Map and Image\r\n * Services are supported.\r\n *\r\n * For cached ArcGIS services, better performance is available using the\r\n * {@link module:ol/source/XYZ~XYZ} data source.\r\n * @api\r\n */\r\nclass TileArcGISRest extends TileImage {\r\n  /**\r\n   * @param {module:ol/source/TileArcGISRest~Options=} opt_options Tile ArcGIS Rest options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options || {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      projection: options.projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/extent~Extent}\r\n     */\r\n    this.tmpExtent_ = createEmpty();\r\n\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {string} The key for the current params.\r\n   */\r\n  getKeyForParams_() {\r\n    let i = 0;\r\n    const res = [];\r\n    for (const key in this.params_) {\r\n      res[i++] = key + '-' + this.params_[key];\r\n    }\r\n    return res.join('/');\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @param {module:ol/size~Size} tileSize Tile size.\r\n   * @param {module:ol/extent~Extent} tileExtent Tile extent.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {module:ol/proj/Projection} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string|undefined} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\r\n\r\n    const urls = this.urls;\r\n    if (!urls) {\r\n      return undefined;\r\n    }\r\n\r\n    // ArcGIS Server only wants the numeric portion of the projection ID.\r\n    const srid = projection.getCode().split(':').pop();\r\n\r\n    params['SIZE'] = tileSize[0] + ',' + tileSize[1];\r\n    params['BBOX'] = tileExtent.join(',');\r\n    params['BBOXSR'] = srid;\r\n    params['IMAGESR'] = srid;\r\n    params['DPI'] = Math.round(\r\n      params['DPI'] ? params['DPI'] * pixelRatio : 90 * pixelRatio\r\n    );\r\n\r\n    let url;\r\n    if (urls.length == 1) {\r\n      url = urls[0];\r\n    } else {\r\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\r\n      url = urls[index];\r\n    }\r\n\r\n    const modifiedUrl = url\r\n      .replace(/MapServer\\/?$/, 'MapServer/export')\r\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\r\n    return appendParams(modifiedUrl, params);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return /** @type {number} */ (pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  fixedTileUrlFunction(tileCoord, pixelRatio, projection) {\r\n\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projection);\r\n    }\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    const tileExtent = tileGrid.getTileCoordExtent(\r\n      tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(\r\n      tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n    if (pixelRatio != 1) {\r\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\r\n    }\r\n\r\n    // Apply default params and override with user specified values.\r\n    const baseParams = {\r\n      'F': 'image',\r\n      'FORMAT': 'PNG32',\r\n      'TRANSPARENT': true\r\n    };\r\n    assign(baseParams, this.params_);\r\n\r\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\r\n      pixelRatio, projection, baseParams);\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n}\r\n\r\n\r\nexport default TileArcGISRest;\r\n"],"names":["const","super","let","this"],"mappings":"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"}