{"version":3,"file":"TileWMS.js","sources":["../../../src/ol/source/TileWMS.js"],"sourcesContent":["/**\r\n * @module ol/source/TileWMS\r\n */\r\n\r\nimport {DEFAULT_WMS_VERSION} from './common.js';\r\n\r\nimport {assert} from '../asserts.js';\r\nimport {buffer, createEmpty} from '../extent.js';\r\nimport {assign} from '../obj.js';\r\nimport {modulo} from '../math.js';\r\nimport {get as getProjection, transform, transformExtent} from '../proj.js';\r\nimport {calculateSourceResolution} from '../reproj.js';\r\nimport {toSize, buffer as bufferSize, scale as scaleSize} from '../size.js';\r\nimport TileImage from '../source/TileImage.js';\r\nimport WMSServerType from '../source/WMSServerType.js';\r\nimport {hash as tileCoordHash} from '../tilecoord.js';\r\nimport {compareVersions} from '../string.js';\r\nimport {appendParams} from '../uri.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize=2048] Cache size.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\r\n * access pixel data with the Canvas renderer.  See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {Object.<string,*>} params WMS request parameters.\r\n * At least a `LAYERS` param is required. `STYLES` is\r\n * `''` by default. `VERSION` is `1.3.0` by default. `WIDTH`, `HEIGHT`, `BBOX`\r\n * and `CRS` (`SRS` for WMS version < 1.3.0) will be set dynamically.\r\n * @property {number} [gutter=0]\r\n * The size in pixels of the gutter around image tiles to ignore. By setting\r\n * this property to a non-zero value, images will be requested that are wider\r\n * and taller than the tile size by a value of `2 x gutter`.\r\n * Using a non-zero value allows artifacts of rendering at tile edges to be\r\n * ignored. If you control the WMS service it is recommended to address\r\n * \"artifacts at tile edges\" issues by properly configuring the WMS service. For\r\n * example, MapServer has a `tile_map_edge_buffer` configuration parameter for\r\n * this. See http://mapserver.org/output/tile_mode.html.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting\r\n * the image from the remote server.\r\n * @property {module:ol/proj~ProjectionLike} projection Projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~TileClass}.\r\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid. Base this on the resolutions,\r\n * tilesize and extent supported by the server.\r\n * If this is not defined, a default grid will be used: if there is a projection\r\n * extent, the grid will be based on that; if not, a grid based on a global\r\n * extent with origin at 0,0 will be used..\r\n * @property {module:ol/source/WMSServerType|string} [serverType]\r\n * The type of the remote WMS server. Currently only used when `hidpi` is\r\n * `true`.\r\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {string} [url] WMS service URL.\r\n * @property {Array.<string>} [urls] WMS service urls.\r\n * Use this instead of `url` when the WMS supports multiple urls for GetMap requests.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n * When set to `false`, only one world\r\n * will be rendered. When `true`, tiles will be requested for one world only,\r\n * but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Layer source for tile data from WMS servers.\r\n * @api\r\n */\r\nclass TileWMS extends TileImage {\r\n  /**\r\n   * @param {module:ol/source/TileWMS~Options=} [opt_options] Tile WMS options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options || {};\r\n\r\n    const params = options.params || {};\r\n\r\n    const transparent = 'TRANSPARENT' in params ? params['TRANSPARENT'] : true;\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      crossOrigin: options.crossOrigin,\r\n      opaque: !transparent,\r\n      projection: options.projection,\r\n      reprojectionErrorThreshold: options.reprojectionErrorThreshold,\r\n      tileClass: options.tileClass,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX !== undefined ? options.wrapX : true,\r\n      transition: options.transition\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.gutter_ = options.gutter !== undefined ? options.gutter : 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = params;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.v13_ = true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/source/WMSServerType|undefined}\r\n     */\r\n    this.serverType_ = /** @type {module:ol/source/WMSServerType|undefined} */ (options.serverType);\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/extent~Extent}\r\n     */\r\n    this.tmpExtent_ = createEmpty();\r\n\r\n    this.updateV13_();\r\n    this.setKey(this.getKeyForParams_());\r\n\r\n  }\r\n\r\n  /**\r\n   * Return the GetFeatureInfo URL for the passed coordinate, resolution, and\r\n   * projection. Return `undefined` if the GetFeatureInfo URL cannot be\r\n   * constructed.\r\n   * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n   * @param {number} resolution Resolution.\r\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\r\n   * @param {!Object} params GetFeatureInfo params. `INFO_FORMAT` at least should\r\n   *     be provided. If `QUERY_LAYERS` is not provided then the layers specified\r\n   *     in the `LAYERS` parameter will be used. `VERSION` should not be\r\n   *     specified here.\r\n   * @return {string|undefined} GetFeatureInfo URL.\r\n   * @api\r\n   */\r\n  getGetFeatureInfoUrl(coordinate, resolution, projection, params) {\r\n    const projectionObj = getProjection(projection);\r\n    const sourceProjectionObj = this.getProjection();\r\n\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projectionObj);\r\n    }\r\n\r\n    const tileCoord = tileGrid.getTileCoordForCoordAndResolution(coordinate, resolution);\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    let tileResolution = tileGrid.getResolution(tileCoord[0]);\r\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n\r\n    const gutter = this.gutter_;\r\n    if (gutter !== 0) {\r\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\r\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\r\n    }\r\n\r\n    if (sourceProjectionObj && sourceProjectionObj !== projectionObj) {\r\n      tileResolution = calculateSourceResolution(sourceProjectionObj, projectionObj, coordinate, tileResolution);\r\n      tileExtent = transformExtent(tileExtent, projectionObj, sourceProjectionObj);\r\n      coordinate = transform(coordinate, projectionObj, sourceProjectionObj);\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_WMS_VERSION,\r\n      'REQUEST': 'GetFeatureInfo',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true,\r\n      'QUERY_LAYERS': this.params_['LAYERS']\r\n    };\r\n    assign(baseParams, this.params_, params);\r\n\r\n    const x = Math.floor((coordinate[0] - tileExtent[0]) / tileResolution);\r\n    const y = Math.floor((tileExtent[3] - coordinate[1]) / tileResolution);\r\n\r\n    baseParams[this.v13_ ? 'I' : 'X'] = x;\r\n    baseParams[this.v13_ ? 'J' : 'Y'] = y;\r\n\r\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\r\n      1, sourceProjectionObj || projectionObj, baseParams);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getGutterInternal() {\r\n    return this.gutter_;\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @param {module:ol/size~Size} tileSize Tile size.\r\n   * @param {module:ol/extent~Extent} tileExtent Tile extent.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {module:ol/proj/Projection} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string|undefined} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(tileCoord, tileSize, tileExtent, pixelRatio, projection, params) {\r\n\r\n    const urls = this.urls;\r\n    if (!urls) {\r\n      return undefined;\r\n    }\r\n\r\n    params['WIDTH'] = tileSize[0];\r\n    params['HEIGHT'] = tileSize[1];\r\n\r\n    params[this.v13_ ? 'CRS' : 'SRS'] = projection.getCode();\r\n\r\n    if (!('STYLES' in this.params_)) {\r\n      params['STYLES'] = '';\r\n    }\r\n\r\n    if (pixelRatio != 1) {\r\n      switch (this.serverType_) {\r\n        case WMSServerType.GEOSERVER:\r\n          const dpi = (90 * pixelRatio + 0.5) | 0;\r\n          if ('FORMAT_OPTIONS' in params) {\r\n            params['FORMAT_OPTIONS'] += ';dpi:' + dpi;\r\n          } else {\r\n            params['FORMAT_OPTIONS'] = 'dpi:' + dpi;\r\n          }\r\n          break;\r\n        case WMSServerType.MAPSERVER:\r\n          params['MAP_RESOLUTION'] = 90 * pixelRatio;\r\n          break;\r\n        case WMSServerType.CARMENTA_SERVER:\r\n        case WMSServerType.QGIS:\r\n          params['DPI'] = 90 * pixelRatio;\r\n          break;\r\n        default:\r\n          assert(false, 52); // Unknown `serverType` configured\r\n          break;\r\n      }\r\n    }\r\n\r\n    const axisOrientation = projection.getAxisOrientation();\r\n    const bbox = tileExtent;\r\n    if (this.v13_ && axisOrientation.substr(0, 2) == 'ne') {\r\n      let tmp;\r\n      tmp = tileExtent[0];\r\n      bbox[0] = tileExtent[1];\r\n      bbox[1] = tmp;\r\n      tmp = tileExtent[2];\r\n      bbox[2] = tileExtent[3];\r\n      bbox[3] = tmp;\r\n    }\r\n    params['BBOX'] = bbox.join(',');\r\n\r\n    let url;\r\n    if (urls.length == 1) {\r\n      url = urls[0];\r\n    } else {\r\n      const index = modulo(tileCoordHash(tileCoord), urls.length);\r\n      url = urls[index];\r\n    }\r\n    return appendParams(url, params);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getTilePixelRatio(pixelRatio) {\r\n    return (!this.hidpi_ || this.serverType_ === undefined) ? 1 :\r\n    /** @type {number} */ (pixelRatio);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @return {string} The key for the current params.\r\n   */\r\n  getKeyForParams_() {\r\n    let i = 0;\r\n    const res = [];\r\n    for (const key in this.params_) {\r\n      res[i++] = key + '-' + this.params_[key];\r\n    }\r\n    return res.join('/');\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  fixedTileUrlFunction(tileCoord, pixelRatio, projection) {\r\n\r\n    let tileGrid = this.getTileGrid();\r\n    if (!tileGrid) {\r\n      tileGrid = this.getTileGridForProjection(projection);\r\n    }\r\n\r\n    if (tileGrid.getResolutions().length <= tileCoord[0]) {\r\n      return undefined;\r\n    }\r\n\r\n    if (pixelRatio != 1 && (!this.hidpi_ || this.serverType_ === undefined)) {\r\n      pixelRatio = 1;\r\n    }\r\n\r\n    const tileResolution = tileGrid.getResolution(tileCoord[0]);\r\n    let tileExtent = tileGrid.getTileCoordExtent(tileCoord, this.tmpExtent_);\r\n    let tileSize = toSize(\r\n      tileGrid.getTileSize(tileCoord[0]), this.tmpSize);\r\n\r\n    const gutter = this.gutter_;\r\n    if (gutter !== 0) {\r\n      tileSize = bufferSize(tileSize, gutter, this.tmpSize);\r\n      tileExtent = buffer(tileExtent, tileResolution * gutter, tileExtent);\r\n    }\r\n\r\n    if (pixelRatio != 1) {\r\n      tileSize = scaleSize(tileSize, pixelRatio, this.tmpSize);\r\n    }\r\n\r\n    const baseParams = {\r\n      'SERVICE': 'WMS',\r\n      'VERSION': DEFAULT_WMS_VERSION,\r\n      'REQUEST': 'GetMap',\r\n      'FORMAT': 'image/png',\r\n      'TRANSPARENT': true\r\n    };\r\n    assign(baseParams, this.params_);\r\n\r\n    return this.getRequestUrl_(tileCoord, tileSize, tileExtent,\r\n      pixelRatio, projection, baseParams);\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.updateV13_();\r\n    this.setKey(this.getKeyForParams_());\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  updateV13_() {\r\n    const version = this.params_['VERSION'] || DEFAULT_WMS_VERSION;\r\n    this.v13_ = compareVersions(version, '1.3') >= 0;\r\n  }\r\n}\r\n\r\n\r\nexport default TileWMS;\r\n"],"names":["const","super","let","this"],"mappings":"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"}