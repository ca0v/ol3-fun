{"version":3,"file":"Cluster.js","sources":["../../../src/ol/source/Cluster.js"],"sourcesContent":["/**\r\n * @module ol/source/Cluster\r\n */\r\n\r\nimport {getUid} from '../util.js';\r\nimport {assert} from '../asserts.js';\r\nimport Feature from '../Feature.js';\r\nimport {scale as scaleCoordinate, add as addCoordinate} from '../coordinate.js';\r\nimport {listen} from '../events.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {buffer, createEmpty, createOrUpdateFromCoordinate} from '../extent.js';\r\nimport Point from '../geom/Point.js';\r\nimport VectorSource from '../source/Vector.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\r\n * @property {number} [distance=20] Minimum distance in pixels between clusters.\r\n * @property {module:ol/extent~Extent} [extent] Extent.\r\n * @property {function(module:ol/Feature):module:ol/geom/Point} [geometryFunction]\r\n * Function that takes an {@link module:ol/Feature} as argument and returns an\r\n * {@link module:ol/geom/Point} as cluster calculation point for the feature. When a\r\n * feature should not be considered for clustering, the function should return\r\n * `null`. The default, which works when the underyling source contains point\r\n * features only, is\r\n * ```js\r\n * function(feature) {\r\n *   return feature.getGeometry();\r\n * }\r\n * ```\r\n * See {@link module:ol/geom/Polygon~Polygon#getInteriorPoint} for a way to get a cluster\r\n * calculation point for polygons.\r\n * @property {module:ol/proj~ProjectionLike} projection Projection.\r\n * @property {module:ol/source/Vector} source Source.\r\n * @property {boolean} [wrapX=true] Whether to wrap the world horizontally.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Layer source to cluster vector data. Works out of the box with point\r\n * geometries. For other geometry types, or if not all geometries should be\r\n * considered for clustering, a custom `geometryFunction` can be defined.\r\n * @api\r\n */\r\nclass Cluster extends VectorSource {\r\n  /**\r\n   * @param {module:ol/source/Cluster~Options=} options Cluster options.\r\n   */\r\n  constructor(options) {\r\n    super({\r\n      attributions: options.attributions,\r\n      extent: options.extent,\r\n      projection: options.projection,\r\n      wrapX: options.wrapX\r\n    });\r\n\r\n    /**\r\n     * @type {number|undefined}\r\n     * @protected\r\n     */\r\n    this.resolution = undefined;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @protected\r\n     */\r\n    this.distance = options.distance !== undefined ? options.distance : 20;\r\n\r\n    /**\r\n     * @type {Array.<module:ol/Feature>}\r\n     * @protected\r\n     */\r\n    this.features = [];\r\n\r\n    /**\r\n     * @param {module:ol/Feature} feature Feature.\r\n     * @return {module:ol/geom/Point} Cluster calculation point.\r\n     * @protected\r\n     */\r\n    this.geometryFunction = options.geometryFunction || function(feature) {\r\n      const geometry = /** @type {module:ol/geom/Point} */ (feature.getGeometry());\r\n      assert(geometry instanceof Point,\r\n        10); // The default `geometryFunction` can only handle `module:ol/geom/Point~Point` geometries\r\n      return geometry;\r\n    };\r\n\r\n    /**\r\n     * @type {module:ol/source/Vector}\r\n     * @protected\r\n     */\r\n    this.source = options.source;\r\n\r\n    listen(this.source, EventType.CHANGE, this.refresh, this);\r\n  }\r\n\r\n  /**\r\n   * Get the distance in pixels between clusters.\r\n   * @return {number} Distance.\r\n   * @api\r\n   */\r\n  getDistance() {\r\n    return this.distance;\r\n  }\r\n\r\n  /**\r\n   * Get a reference to the wrapped source.\r\n   * @return {module:ol/source/Vector} Source.\r\n   * @api\r\n   */\r\n  getSource() {\r\n    return this.source;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  loadFeatures(extent, resolution, projection) {\r\n    this.source.loadFeatures(extent, resolution, projection);\r\n    if (resolution !== this.resolution) {\r\n      this.clear();\r\n      this.resolution = resolution;\r\n      this.cluster();\r\n      this.addFeatures(this.features);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the distance in pixels between clusters.\r\n   * @param {number} distance The distance in pixels.\r\n   * @api\r\n   */\r\n  setDistance(distance) {\r\n    this.distance = distance;\r\n    this.refresh();\r\n  }\r\n\r\n  /**\r\n   * handle the source changing\r\n   * @override\r\n   */\r\n  refresh() {\r\n    this.clear();\r\n    this.cluster();\r\n    this.addFeatures(this.features);\r\n    VectorSource.prototype.refresh.call(this);\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  cluster() {\r\n    if (this.resolution === undefined) {\r\n      return;\r\n    }\r\n    this.features.length = 0;\r\n    const extent = createEmpty();\r\n    const mapDistance = this.distance * this.resolution;\r\n    const features = this.source.getFeatures();\r\n\r\n    /**\r\n     * @type {!Object.<string, boolean>}\r\n     */\r\n    const clustered = {};\r\n\r\n    for (let i = 0, ii = features.length; i < ii; i++) {\r\n      const feature = features[i];\r\n      if (!(getUid(feature).toString() in clustered)) {\r\n        const geometry = this.geometryFunction(feature);\r\n        if (geometry) {\r\n          const coordinates = geometry.getCoordinates();\r\n          createOrUpdateFromCoordinate(coordinates, extent);\r\n          buffer(extent, mapDistance, extent);\r\n\r\n          let neighbors = this.source.getFeaturesInExtent(extent);\r\n          neighbors = neighbors.filter(function(neighbor) {\r\n            const uid = getUid(neighbor).toString();\r\n            if (!(uid in clustered)) {\r\n              clustered[uid] = true;\r\n              return true;\r\n            } else {\r\n              return false;\r\n            }\r\n          });\r\n          this.features.push(this.createCluster(neighbors));\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<module:ol/Feature>} features Features\r\n   * @return {module:ol/Feature} The cluster feature.\r\n   * @protected\r\n   */\r\n  createCluster(features) {\r\n    const centroid = [0, 0];\r\n    for (let i = features.length - 1; i >= 0; --i) {\r\n      const geometry = this.geometryFunction(features[i]);\r\n      if (geometry) {\r\n        addCoordinate(centroid, geometry.getCoordinates());\r\n      } else {\r\n        features.splice(i, 1);\r\n      }\r\n    }\r\n    scaleCoordinate(centroid, 1 / features.length);\r\n\r\n    const cluster = new Feature(new Point(centroid));\r\n    cluster.set('features', features);\r\n    return cluster;\r\n  }\r\n}\r\n\r\n\r\nexport default Cluster;\r\n"],"names":["super","const","let","this"],"mappings":"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"}