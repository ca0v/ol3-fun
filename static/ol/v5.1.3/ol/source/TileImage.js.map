{"version":3,"file":"TileImage.js","sources":["../../../src/ol/source/TileImage.js"],"sourcesContent":["/**\r\n * @module ol/source/TileImage\r\n */\r\nimport {ENABLE_RASTER_REPROJECTION} from '../reproj/common.js';\r\nimport {getUid} from '../util.js';\r\nimport ImageTile from '../ImageTile.js';\r\nimport TileCache from '../TileCache.js';\r\nimport TileState from '../TileState.js';\r\nimport {listen} from '../events.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {equivalent, get as getProjection} from '../proj.js';\r\nimport ReprojTile from '../reproj/Tile.js';\r\nimport UrlTile from '../source/UrlTile.js';\r\nimport {getKey, getKeyZXY} from '../tilecoord.js';\r\nimport {getForProjection as getTileGridForProjection} from '../tilegrid.js';\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\r\n * @property {number} [cacheSize=2048] Cache size.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\r\n * access pixel data with the Canvas renderer.  See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [opaque=true] Whether the layer is opaque.\r\n * @property {module:ol/proj~ProjectionLike} projection Projection.\r\n * @property {number} [reprojectionErrorThreshold=0.5] Maximum allowed reprojection error (in pixels).\r\n * Higher values can increase reprojection performance, but decrease precision.\r\n * @property {module:ol/source/State} [state] Source state.\r\n * @property {module:ol/ImageTile~TileClass} [tileClass] Class used to instantiate image tiles.\r\n * Default is {@link module:ol/ImageTile~ImageTile}.\r\n * @property {module:ol/tilegrid/TileGrid} [tileGrid] Tile grid.\r\n * @property {module:ol/Tile~LoadFunction} [tileLoadFunction] Optional function to load a tile given a URL. The default is\r\n * ```js\r\n * function(imageTile, src) {\r\n *   imageTile.getImage().src = src;\r\n * };\r\n * ```\r\n * @property {number} [tilePixelRatio=1] The pixel ratio used by the tile service. For example, if the tile\r\n * service advertizes 256px by 256px tiles but actually sends 512px\r\n * by 512px images (for retina/hidpi devices) then `tilePixelRatio`\r\n * should be set to `2`.\r\n * @property {module:ol/Tile~UrlFunction} [tileUrlFunction] Optional function to get tile URL given a tile coordinate and the projection.\r\n * @property {string} [url] URL template. Must include `{x}`, `{y}` or `{-y}`, and `{z}` placeholders.\r\n * A `{?-?}` template pattern, for example `subdomain{a-f}.domain.com`, may be\r\n * used instead of defining each one separately in the `urls` option.\r\n * @property {Array.<string>} [urls] An array of URL templates.\r\n * @property {boolean} [wrapX] Whether to wrap the world horizontally. The default, is to\r\n * request out-of-bounds tiles from the server. When set to `false`, only one\r\n * world will be rendered. When set to `true`, tiles will be requested for one\r\n * world only, but they will be wrapped horizontally to render multiple worlds.\r\n * @property {number} [transition] Duration of the opacity transition for rendering.\r\n * To disable the opacity transition, pass `transition: 0`.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Base class for sources providing images divided into a tile grid.\r\n *\r\n * @fires module:ol/source/Tile~TileSourceEvent\r\n * @api\r\n */\r\nclass TileImage extends UrlTile {\r\n  /**\r\n   * @param {module:ol/source/TileImage~Options=} options Image tile options.\r\n   */\r\n  constructor(options) {\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      cacheSize: options.cacheSize,\r\n      extent: options.extent,\r\n      opaque: options.opaque,\r\n      projection: options.projection,\r\n      state: options.state,\r\n      tileGrid: options.tileGrid,\r\n      tileLoadFunction: options.tileLoadFunction ?\r\n        options.tileLoadFunction : defaultTileLoadFunction,\r\n      tilePixelRatio: options.tilePixelRatio,\r\n      tileUrlFunction: options.tileUrlFunction,\r\n      url: options.url,\r\n      urls: options.urls,\r\n      wrapX: options.wrapX,\r\n      transition: options.transition\r\n    });\r\n\r\n    /**\r\n     * @protected\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin =\r\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {function(new: module:ol/ImageTile, module:ol/tilecoord~TileCoord, module:ol/TileState, string,\r\n     *        ?string, module:ol/Tile~LoadFunction, module:ol/Tile~Options=)}\r\n     */\r\n    this.tileClass = options.tileClass !== undefined ?\r\n      options.tileClass : ImageTile;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Object.<string, module:ol/TileCache>}\r\n     */\r\n    this.tileCacheForProjection = {};\r\n\r\n    /**\r\n     * @protected\r\n     * @type {!Object.<string, module:ol/tilegrid/TileGrid>}\r\n     */\r\n    this.tileGridForProjection = {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.reprojectionErrorThreshold_ = options.reprojectionErrorThreshold;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.renderReprojectionEdges_ = false;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  canExpireCache() {\r\n    if (!ENABLE_RASTER_REPROJECTION) {\r\n      return UrlTile.prototype.canExpireCache.call(this);\r\n    }\r\n    if (this.tileCache.canExpireCache()) {\r\n      return true;\r\n    } else {\r\n      for (const key in this.tileCacheForProjection) {\r\n        if (this.tileCacheForProjection[key].canExpireCache()) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  expireCache(projection, usedTiles) {\r\n    if (!ENABLE_RASTER_REPROJECTION) {\r\n      UrlTile.prototype.expireCache.call(this, projection, usedTiles);\r\n      return;\r\n    }\r\n    const usedTileCache = this.getTileCacheForProjection(projection);\r\n\r\n    this.tileCache.expireCache(this.tileCache == usedTileCache ? usedTiles : {});\r\n    for (const id in this.tileCacheForProjection) {\r\n      const tileCache = this.tileCacheForProjection[id];\r\n      tileCache.expireCache(tileCache == usedTileCache ? usedTiles : {});\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getGutter(projection) {\r\n    if (ENABLE_RASTER_REPROJECTION &&\r\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\r\n      return 0;\r\n    } else {\r\n      return this.getGutterInternal();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   * @return {number} Gutter.\r\n   */\r\n  getGutterInternal() {\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getOpaque(projection) {\r\n    if (ENABLE_RASTER_REPROJECTION &&\r\n        this.getProjection() && projection && !equivalent(this.getProjection(), projection)) {\r\n      return false;\r\n    } else {\r\n      return UrlTile.prototype.getOpaque.call(this, projection);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getTileGridForProjection(projection) {\r\n    if (!ENABLE_RASTER_REPROJECTION) {\r\n      return UrlTile.prototype.getTileGridForProjection.call(this, projection);\r\n    }\r\n    const thisProj = this.getProjection();\r\n    if (this.tileGrid && (!thisProj || equivalent(thisProj, projection))) {\r\n      return this.tileGrid;\r\n    } else {\r\n      const projKey = getUid(projection).toString();\r\n      if (!(projKey in this.tileGridForProjection)) {\r\n        this.tileGridForProjection[projKey] = getTileGridForProjection(projection);\r\n      }\r\n      return (\r\n        /** @type {!module:ol/tilegrid/TileGrid} */ (this.tileGridForProjection[projKey])\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getTileCacheForProjection(projection) {\r\n    if (!ENABLE_RASTER_REPROJECTION) {\r\n      return UrlTile.prototype.getTileCacheForProjection.call(this, projection);\r\n    }\r\n    const thisProj = this.getProjection(); if (!thisProj || equivalent(thisProj, projection)) {\r\n      return this.tileCache;\r\n    } else {\r\n      const projKey = getUid(projection).toString();\r\n      if (!(projKey in this.tileCacheForProjection)) {\r\n        this.tileCacheForProjection[projKey] = new TileCache(this.tileCache.highWaterMark);\r\n      }\r\n      return this.tileCacheForProjection[projKey];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {module:ol/proj/Projection} projection Projection.\r\n   * @param {string} key The key set on the tile.\r\n   * @return {!module:ol/Tile} Tile.\r\n   * @private\r\n   */\r\n  createTile_(z, x, y, pixelRatio, projection, key) {\r\n    const tileCoord = [z, x, y];\r\n    const urlTileCoord = this.getTileCoordForTileUrlFunction(\r\n      tileCoord, projection);\r\n    const tileUrl = urlTileCoord ?\r\n      this.tileUrlFunction(urlTileCoord, pixelRatio, projection) : undefined;\r\n    const tile = new this.tileClass(\r\n      tileCoord,\r\n      tileUrl !== undefined ? TileState.IDLE : TileState.EMPTY,\r\n      tileUrl !== undefined ? tileUrl : '',\r\n      this.crossOrigin,\r\n      this.tileLoadFunction,\r\n      this.tileOptions);\r\n    tile.key = key;\r\n    listen(tile, EventType.CHANGE,\r\n      this.handleTileChange, this);\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getTile(z, x, y, pixelRatio, projection) {\r\n    const sourceProjection = /** @type {!module:ol/proj/Projection} */ (this.getProjection());\r\n    if (!ENABLE_RASTER_REPROJECTION ||\r\n        !sourceProjection || !projection || equivalent(sourceProjection, projection)) {\r\n      return this.getTileInternal(z, x, y, pixelRatio, sourceProjection || projection);\r\n    } else {\r\n      const cache = this.getTileCacheForProjection(projection);\r\n      const tileCoord = [z, x, y];\r\n      let tile;\r\n      const tileCoordKey = getKey(tileCoord);\r\n      if (cache.containsKey(tileCoordKey)) {\r\n        tile = /** @type {!module:ol/Tile} */ (cache.get(tileCoordKey));\r\n      }\r\n      const key = this.getKey();\r\n      if (tile && tile.key == key) {\r\n        return tile;\r\n      } else {\r\n        const sourceTileGrid = this.getTileGridForProjection(sourceProjection);\r\n        const targetTileGrid = this.getTileGridForProjection(projection);\r\n        const wrappedTileCoord =\r\n            this.getTileCoordForTileUrlFunction(tileCoord, projection);\r\n        const newTile = new ReprojTile(\r\n          sourceProjection, sourceTileGrid,\r\n          projection, targetTileGrid,\r\n          tileCoord, wrappedTileCoord, this.getTilePixelRatio(pixelRatio),\r\n          this.getGutterInternal(),\r\n          function(z, x, y, pixelRatio) {\r\n            return this.getTileInternal(z, x, y, pixelRatio, sourceProjection);\r\n          }.bind(this), this.reprojectionErrorThreshold_,\r\n          this.renderReprojectionEdges_);\r\n        newTile.key = key;\r\n\r\n        if (tile) {\r\n          newTile.interimTile = tile;\r\n          newTile.refreshInterimChain();\r\n          cache.replace(tileCoordKey, newTile);\r\n        } else {\r\n          cache.set(tileCoordKey, newTile);\r\n        }\r\n        return newTile;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {number} z Tile coordinate z.\r\n   * @param {number} x Tile coordinate x.\r\n   * @param {number} y Tile coordinate y.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {!module:ol/proj/Projection} projection Projection.\r\n   * @return {!module:ol/Tile} Tile.\r\n   * @protected\r\n   */\r\n  getTileInternal(z, x, y, pixelRatio, projection) {\r\n    let tile = null;\r\n    const tileCoordKey = getKeyZXY(z, x, y);\r\n    const key = this.getKey();\r\n    if (!this.tileCache.containsKey(tileCoordKey)) {\r\n      tile = this.createTile_(z, x, y, pixelRatio, projection, key);\r\n      this.tileCache.set(tileCoordKey, tile);\r\n    } else {\r\n      tile = this.tileCache.get(tileCoordKey);\r\n      if (tile.key != key) {\r\n        // The source's params changed. If the tile has an interim tile and if we\r\n        // can use it then we use it. Otherwise we create a new tile.  In both\r\n        // cases we attempt to assign an interim tile to the new tile.\r\n        const interimTile = tile;\r\n        tile = this.createTile_(z, x, y, pixelRatio, projection, key);\r\n\r\n        //make the new tile the head of the list,\r\n        if (interimTile.getState() == TileState.IDLE) {\r\n          //the old tile hasn't begun loading yet, and is now outdated, so we can simply discard it\r\n          tile.interimTile = interimTile.interimTile;\r\n        } else {\r\n          tile.interimTile = interimTile;\r\n        }\r\n        tile.refreshInterimChain();\r\n        this.tileCache.replace(tileCoordKey, tile);\r\n      }\r\n    }\r\n    return tile;\r\n  }\r\n\r\n  /**\r\n   * Sets whether to render reprojection edges or not (usually for debugging).\r\n   * @param {boolean} render Render the edges.\r\n   * @api\r\n   */\r\n  setRenderReprojectionEdges(render) {\r\n    if (!ENABLE_RASTER_REPROJECTION ||\r\n        this.renderReprojectionEdges_ == render) {\r\n      return;\r\n    }\r\n    this.renderReprojectionEdges_ = render;\r\n    for (const id in this.tileCacheForProjection) {\r\n      this.tileCacheForProjection[id].clear();\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Sets the tile grid to use when reprojecting the tiles to the given\r\n   * projection instead of the default tile grid for the projection.\r\n   *\r\n   * This can be useful when the default tile grid cannot be created\r\n   * (e.g. projection has no extent defined) or\r\n   * for optimization reasons (custom tile size, resolutions, ...).\r\n   *\r\n   * @param {module:ol/proj~ProjectionLike} projection Projection.\r\n   * @param {module:ol/tilegrid/TileGrid} tilegrid Tile grid to use for the projection.\r\n   * @api\r\n   */\r\n  setTileGridForProjection(projection, tilegrid) {\r\n    if (ENABLE_RASTER_REPROJECTION) {\r\n      const proj = getProjection(projection);\r\n      if (proj) {\r\n        const projKey = getUid(proj).toString();\r\n        if (!(projKey in this.tileGridForProjection)) {\r\n          this.tileGridForProjection[projKey] = tilegrid;\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/ImageTile} imageTile Image tile.\r\n * @param {string} src Source.\r\n */\r\nfunction defaultTileLoadFunction(imageTile, src) {\r\n  imageTile.getImage().src = src;\r\n}\r\n\r\nexport default TileImage;\r\n"],"names":["super","const","this","let"],"mappings":"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"}