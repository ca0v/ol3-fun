{"version":3,"file":"ImageArcGISRest.js","sources":["../../../src/ol/source/ImageArcGISRest.js"],"sourcesContent":["/**\r\n * @module ol/source/ImageArcGISRest\r\n */\r\n\r\nimport ImageWrapper from '../Image.js';\r\nimport {assert} from '../asserts.js';\r\nimport {listen} from '../events.js';\r\nimport EventType from '../events/EventType.js';\r\nimport {containsExtent, getHeight, getWidth} from '../extent.js';\r\nimport {assign} from '../obj.js';\r\nimport ImageSource, {defaultImageLoadFunction} from '../source/Image.js';\r\nimport {appendParams} from '../uri.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/source/Source~AttributionLike} [attributions] Attributions.\r\n * @property {null|string} [crossOrigin] The `crossOrigin` attribute for loaded images.  Note that\r\n * you must provide a `crossOrigin` value if you are using the WebGL renderer or if you want to\r\n * access pixel data with the Canvas renderer.  See\r\n * https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_enabled_image for more detail.\r\n * @property {boolean} [hidpi=true] Use the `ol/Map#pixelRatio` value when requesting the image from\r\n * the remote server.\r\n * @property {module:ol/Image~LoadFunction} [imageLoadFunction] Optional function to load an image given\r\n * a URL.\r\n * @property {Object.<string,*>} params ArcGIS Rest parameters. This field is optional. Service\r\n * defaults will be used for any fields not specified. `FORMAT` is `PNG32` by default. `F` is\r\n * `IMAGE` by default. `TRANSPARENT` is `true` by default.  `BBOX, `SIZE`, `BBOXSR`, and `IMAGESR`\r\n * will be set dynamically. Set `LAYERS` to override the default service layer visibility. See\r\n * http://resources.arcgis.com/en/help/arcgis-rest-api/index.html#/Export_Map/02r3000000v7000000/\r\n * for further reference.\r\n * @property {module:ol/proj~ProjectionLike} projection Projection.\r\n * @property {number} [ratio=1.5] Ratio. `1` means image requests are the size of the map viewport,\r\n * `2` means twice the size of the map viewport, and so on.\r\n * @property {Array.<number>} [resolutions] Resolutions. If specified, requests will be made for\r\n * these resolutions only.\r\n * @property {string} [url] ArcGIS Rest service URL for a Map Service or Image Service. The url\r\n * should include /MapServer or /ImageServer.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Source for data from ArcGIS Rest services providing single, untiled images.\r\n * Useful when underlying map service has labels.\r\n *\r\n * If underlying map service is not using labels,\r\n * take advantage of ol image caching and use\r\n * {@link module:ol/source/TileArcGISRest} data source.\r\n *\r\n * @fires ol/source/Image~ImageSourceEvent\r\n * @api\r\n */\r\nclass ImageArcGISRest extends ImageSource {\r\n  /**\r\n   * @param {module:ol/source/ImageArcGISRest~Options=} opt_options Image ArcGIS Rest Options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options || {};\r\n\r\n    super({\r\n      attributions: options.attributions,\r\n      projection: options.projection,\r\n      resolutions: options.resolutions\r\n    });\r\n\r\n    /**\r\n     * @private\r\n     * @type {?string}\r\n     */\r\n    this.crossOrigin_ =\r\n        options.crossOrigin !== undefined ? options.crossOrigin : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.hidpi_ = options.hidpi !== undefined ? options.hidpi : true;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.url_ = options.url;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/Image~LoadFunction}\r\n     */\r\n    this.imageLoadFunction_ = options.imageLoadFunction !== undefined ?\r\n      options.imageLoadFunction : defaultImageLoadFunction;\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {!Object}\r\n     */\r\n    this.params_ = options.params || {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/Image}\r\n     */\r\n    this.image_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/size~Size}\r\n     */\r\n    this.imageSize_ = [0, 0];\r\n\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.renderedRevision_ = 0;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number}\r\n     */\r\n    this.ratio_ = options.ratio !== undefined ? options.ratio : 1.5;\r\n\r\n  }\r\n\r\n  /**\r\n   * Get the user-provided params, i.e. those passed to the constructor through\r\n   * the \"params\" option, and possibly updated using the updateParams method.\r\n   * @return {Object} Params.\r\n   * @api\r\n   */\r\n  getParams() {\r\n    return this.params_;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getImageInternal(extent, resolution, pixelRatio, projection) {\r\n\r\n    if (this.url_ === undefined) {\r\n      return null;\r\n    }\r\n\r\n    resolution = this.findNearestResolution(resolution);\r\n    pixelRatio = this.hidpi_ ? pixelRatio : 1;\r\n\r\n    const image = this.image_;\r\n    if (image &&\r\n        this.renderedRevision_ == this.getRevision() &&\r\n        image.getResolution() == resolution &&\r\n        image.getPixelRatio() == pixelRatio &&\r\n        containsExtent(image.getExtent(), extent)) {\r\n      return image;\r\n    }\r\n\r\n    const params = {\r\n      'F': 'image',\r\n      'FORMAT': 'PNG32',\r\n      'TRANSPARENT': true\r\n    };\r\n    assign(params, this.params_);\r\n\r\n    extent = extent.slice();\r\n    const centerX = (extent[0] + extent[2]) / 2;\r\n    const centerY = (extent[1] + extent[3]) / 2;\r\n    if (this.ratio_ != 1) {\r\n      const halfWidth = this.ratio_ * getWidth(extent) / 2;\r\n      const halfHeight = this.ratio_ * getHeight(extent) / 2;\r\n      extent[0] = centerX - halfWidth;\r\n      extent[1] = centerY - halfHeight;\r\n      extent[2] = centerX + halfWidth;\r\n      extent[3] = centerY + halfHeight;\r\n    }\r\n\r\n    const imageResolution = resolution / pixelRatio;\r\n\r\n    // Compute an integer width and height.\r\n    const width = Math.ceil(getWidth(extent) / imageResolution);\r\n    const height = Math.ceil(getHeight(extent) / imageResolution);\r\n\r\n    // Modify the extent to match the integer width and height.\r\n    extent[0] = centerX - imageResolution * width / 2;\r\n    extent[2] = centerX + imageResolution * width / 2;\r\n    extent[1] = centerY - imageResolution * height / 2;\r\n    extent[3] = centerY + imageResolution * height / 2;\r\n\r\n    this.imageSize_[0] = width;\r\n    this.imageSize_[1] = height;\r\n\r\n    const url = this.getRequestUrl_(extent, this.imageSize_, pixelRatio,\r\n      projection, params);\r\n\r\n    this.image_ = new ImageWrapper(extent, resolution, pixelRatio,\r\n      url, this.crossOrigin_, this.imageLoadFunction_);\r\n\r\n    this.renderedRevision_ = this.getRevision();\r\n\r\n    listen(this.image_, EventType.CHANGE,\r\n      this.handleImageChange, this);\r\n\r\n    return this.image_;\r\n\r\n  }\r\n\r\n  /**\r\n   * Return the image load function of the source.\r\n   * @return {module:ol/Image~LoadFunction} The image load function.\r\n   * @api\r\n   */\r\n  getImageLoadFunction() {\r\n    return this.imageLoadFunction_;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @param {module:ol/size~Size} size Size.\r\n   * @param {number} pixelRatio Pixel ratio.\r\n   * @param {module:ol/proj/Projection} projection Projection.\r\n   * @param {Object} params Params.\r\n   * @return {string} Request URL.\r\n   * @private\r\n   */\r\n  getRequestUrl_(extent, size, pixelRatio, projection, params) {\r\n    // ArcGIS Server only wants the numeric portion of the projection ID.\r\n    const srid = projection.getCode().split(':').pop();\r\n\r\n    params['SIZE'] = size[0] + ',' + size[1];\r\n    params['BBOX'] = extent.join(',');\r\n    params['BBOXSR'] = srid;\r\n    params['IMAGESR'] = srid;\r\n    params['DPI'] = Math.round(90 * pixelRatio);\r\n\r\n    const url = this.url_;\r\n\r\n    const modifiedUrl = url\r\n      .replace(/MapServer\\/?$/, 'MapServer/export')\r\n      .replace(/ImageServer\\/?$/, 'ImageServer/exportImage');\r\n    if (modifiedUrl == url) {\r\n      assert(false, 50); // `options.featureTypes` should be an Array\r\n    }\r\n    return appendParams(modifiedUrl, params);\r\n  }\r\n\r\n  /**\r\n   * Return the URL used for this ArcGIS source.\r\n   * @return {string|undefined} URL.\r\n   * @api\r\n   */\r\n  getUrl() {\r\n    return this.url_;\r\n  }\r\n\r\n  /**\r\n   * Set the image load function of the source.\r\n   * @param {module:ol/Image~LoadFunction} imageLoadFunction Image load function.\r\n   * @api\r\n   */\r\n  setImageLoadFunction(imageLoadFunction) {\r\n    this.image_ = null;\r\n    this.imageLoadFunction_ = imageLoadFunction;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the URL to use for requests.\r\n   * @param {string|undefined} url URL.\r\n   * @api\r\n   */\r\n  setUrl(url) {\r\n    if (url != this.url_) {\r\n      this.url_ = url;\r\n      this.image_ = null;\r\n      this.changed();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the user-provided params.\r\n   * @param {Object} params Params.\r\n   * @api\r\n   */\r\n  updateParams(params) {\r\n    assign(this.params_, params);\r\n    this.image_ = null;\r\n    this.changed();\r\n  }\r\n}\r\n\r\n\r\nexport default ImageArcGISRest;\r\n"],"names":["const","super"],"mappings":"AAAA;;;;AAIA,OAAO,YAAY,MAAM,aAAa,CAAC;AACvC,QAAQ,MAAM,OAAO,eAAe,CAAC;AACrC,QAAQ,MAAM,OAAO,cAAc,CAAC;AACpC,OAAO,SAAS,MAAM,wBAAwB,CAAC;AAC/C,QAAQ,cAAc,EAAE,SAAS,EAAE,QAAQ,OAAO,cAAc,CAAC;AACjE,QAAQ,MAAM,OAAO,WAAW,CAAC;AACjC,OAAO,WAAW,GAAG,wBAAwB,OAAO,oBAAoB,CAAC;AACzE,QAAQ,YAAY,OAAO,WAAW,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CvC,IAAM,eAAe,GAAoB;EAIvC,wBAAW,CAAC,WAAW,EAAE;;IAEvBA,GAAK,CAAC,OAAO,GAAG,WAAW,IAAI,EAAE,CAAC;;IAElCC,gBAAK,OAAC;MACJ,YAAY,EAAE,OAAO,CAAC,YAAY;MAClC,UAAU,EAAE,OAAO,CAAC,UAAU;MAC9B,WAAW,EAAE,OAAO,CAAC,WAAW;KACjC,CAAC,CAAC;;;;;;IAMH,IAAI,CAAC,YAAY;QACb,OAAO,CAAC,WAAW,KAAK,SAAS,GAAG,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;;;;;;IAMnE,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;;;;;;IAMjE,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,GAAG,CAAC;;;;;;IAMxB,IAAI,CAAC,kBAAkB,GAAG,OAAO,CAAC,iBAAiB,KAAK,SAAS;MAC/D,OAAO,CAAC,iBAAiB,GAAG,wBAAwB,CAAC;;;;;;;IAOvD,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC;;;;;;IAMpC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;;;;;;IAMnB,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;;;;;;IAOzB,IAAI,CAAC,iBAAiB,GAAG,CAAC,CAAC;;;;;;IAM3B,IAAI,CAAC,MAAM,GAAG,OAAO,CAAC,KAAK,KAAK,SAAS,GAAG,OAAO,CAAC,KAAK,GAAG,GAAG,CAAC;;;;;;0DAEjE;;;;;;;;4BAQD,+BAAS,GAAG;IACV,OAAO,IAAI,CAAC,OAAO,CAAC;IACrB;;;;;4BAKD,6CAAgB,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE;;IAE3D,IAAI,IAAI,CAAC,IAAI,KAAK,SAAS,EAAE;MAC3B,OAAO,IAAI,CAAC;KACb;;IAED,UAAU,GAAG,IAAI,CAAC,qBAAqB,CAAC,UAAU,CAAC,CAAC;IACpD,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,UAAU,GAAG,CAAC,CAAC;;IAE1CD,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;IAC1B,IAAI,KAAK;QACL,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,WAAW,EAAE;QAC5C,KAAK,CAAC,aAAa,EAAE,IAAI,UAAU;QACnC,KAAK,CAAC,aAAa,EAAE,IAAI,UAAU;QACnC,cAAc,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,EAAE;MAC7C,OAAO,KAAK,CAAC;KACd;;IAEDA,GAAK,CAAC,MAAM,GAAG;MACb,GAAG,EAAE,OAAO;MACZ,QAAQ,EAAE,OAAO;MACjB,aAAa,EAAE,IAAI;KACpB,CAAC;IACF,MAAM,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;;IAE7B,MAAM,GAAG,MAAM,CAAC,KAAK,EAAE,CAAC;IACxBA,GAAK,CAAC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5CA,GAAK,CAAC,OAAO,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAC5C,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,EAAE;MACpBA,GAAK,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;MACrDA,GAAK,CAAC,UAAU,GAAG,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;MACvD,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,SAAS,CAAC;MAChC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC;MACjC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,SAAS,CAAC;MAChC,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,UAAU,CAAC;KAClC;;IAEDA,GAAK,CAAC,eAAe,GAAG,UAAU,GAAG,UAAU,CAAC;;;IAGhDA,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,CAAC;IAC5DA,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,GAAG,eAAe,CAAC,CAAC;;;IAG9D,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,eAAe,GAAG,KAAK,GAAG,CAAC,CAAC;IAClD,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,eAAe,GAAG,KAAK,GAAG,CAAC,CAAC;IAClD,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,eAAe,GAAG,MAAM,GAAG,CAAC,CAAC;IACnD,MAAM,CAAC,CAAC,CAAC,GAAG,OAAO,GAAG,eAAe,GAAG,MAAM,GAAG,CAAC,CAAC;;IAEnD,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IAC3B,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,GAAG,MAAM,CAAC;;IAE5BA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,IAAI,CAAC,UAAU,EAAE,UAAU;MACjE,UAAU,EAAE,MAAM,CAAC,CAAC;;IAEtB,IAAI,CAAC,MAAM,GAAG,IAAI,YAAY,CAAC,MAAM,EAAE,UAAU,EAAE,UAAU;MAC3D,GAAG,EAAE,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,kBAAkB,CAAC,CAAC;;IAEnD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;;IAE5C,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM;MAClC,IAAI,CAAC,iBAAiB,EAAE,IAAI,CAAC,CAAC;;IAEhC,OAAO,IAAI,CAAC,MAAM,CAAC;;IAEpB;;;;;;;4BAOD,qDAAoB,GAAG;IACrB,OAAO,IAAI,CAAC,kBAAkB,CAAC;IAChC;;;;;;;;;;;4BAWD,yCAAc,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,EAAE;;IAE3DA,GAAK,CAAC,IAAI,GAAG,UAAU,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC;;IAEnD,MAAM,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACzC,MAAM,CAAC,MAAM,CAAC,GAAG,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;IAClC,MAAM,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC;IACxB,MAAM,CAAC,SAAS,CAAC,GAAG,IAAI,CAAC;IACzB,MAAM,CAAC,KAAK,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,EAAE,GAAG,UAAU,CAAC,CAAC;;IAE5CA,GAAK,CAAC,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC;;IAEtBA,GAAK,CAAC,WAAW,GAAG,GAAG;OACpB,OAAO,CAAC,eAAe,EAAE,kBAAkB,CAAC;OAC5C,OAAO,CAAC,iBAAiB,EAAE,yBAAyB,CAAC,CAAC;IACzD,IAAI,WAAW,IAAI,GAAG,EAAE;MACtB,MAAM,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;KACnB;IACD,OAAO,YAAY,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC1C;;;;;;;4BAOD,yBAAM,GAAG;IACP,OAAO,IAAI,CAAC,IAAI,CAAC;IAClB;;;;;;;4BAOD,qDAAoB,CAAC,iBAAiB,EAAE;IACtC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,kBAAkB,GAAG,iBAAiB,CAAC;IAC5C,IAAI,CAAC,OAAO,EAAE,CAAC;IAChB;;;;;;;4BAOD,yBAAM,CAAC,GAAG,EAAE;IACV,IAAI,GAAG,IAAI,IAAI,CAAC,IAAI,EAAE;MACpB,IAAI,CAAC,IAAI,GAAG,GAAG,CAAC;MAChB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;MACnB,IAAI,CAAC,OAAO,EAAE,CAAC;KAChB;IACF;;;;;;;4BAOD,qCAAY,CAAC,MAAM,EAAE;IACnB,MAAM,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;IACnB,IAAI,CAAC,OAAO,EAAE,CAAC;GAChB;;;EA3O2B,cA4O7B;;;AAGD,eAAe,eAAe,CAAC;"}