{"version":3,"file":"transforms.js","sources":["../../../src/ol/proj/transforms.js"],"sourcesContent":["/**\r\n * @module ol/proj/transforms\r\n */\r\nimport {isEmpty} from '../obj.js';\r\n\r\n\r\n/**\r\n * @private\r\n * @type {!Object.<string, Object.<string, module:ol/proj~TransformFunction>>}\r\n */\r\nlet transforms = {};\r\n\r\n\r\n/**\r\n * Clear the transform cache.\r\n */\r\nexport function clear() {\r\n  transforms = {};\r\n}\r\n\r\n\r\n/**\r\n * Registers a conversion function to convert coordinates from the source\r\n * projection to the destination projection.\r\n *\r\n * @param {module:ol/proj/Projection} source Source.\r\n * @param {module:ol/proj/Projection} destination Destination.\r\n * @param {module:ol/proj~TransformFunction} transformFn Transform.\r\n */\r\nexport function add(source, destination, transformFn) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  if (!(sourceCode in transforms)) {\r\n    transforms[sourceCode] = {};\r\n  }\r\n  transforms[sourceCode][destinationCode] = transformFn;\r\n}\r\n\r\n\r\n/**\r\n * Unregisters the conversion function to convert coordinates from the source\r\n * projection to the destination projection.  This method is used to clean up\r\n * cached transforms during testing.\r\n *\r\n * @param {module:ol/proj/Projection} source Source projection.\r\n * @param {module:ol/proj/Projection} destination Destination projection.\r\n * @return {module:ol/proj~TransformFunction} transformFn The unregistered transform.\r\n */\r\nexport function remove(source, destination) {\r\n  const sourceCode = source.getCode();\r\n  const destinationCode = destination.getCode();\r\n  const transform = transforms[sourceCode][destinationCode];\r\n  delete transforms[sourceCode][destinationCode];\r\n  if (isEmpty(transforms[sourceCode])) {\r\n    delete transforms[sourceCode];\r\n  }\r\n  return transform;\r\n}\r\n\r\n\r\n/**\r\n * Get a transform given a source code and a destination code.\r\n * @param {string} sourceCode The code for the source projection.\r\n * @param {string} destinationCode The code for the destination projection.\r\n * @return {module:ol/proj~TransformFunction|undefined} The transform function (if found).\r\n */\r\nexport function get(sourceCode, destinationCode) {\r\n  let transform;\r\n  if (sourceCode in transforms && destinationCode in transforms[sourceCode]) {\r\n    transform = transforms[sourceCode][destinationCode];\r\n  }\r\n  return transform;\r\n}\r\n"],"names":["let","const"],"mappings":"AAAA;;;AAGA,QAAQ,OAAO,OAAO,WAAW,CAAC;;;;;;;AAOlCA,GAAG,CAAC,UAAU,GAAG,EAAE,CAAC;;;;;;AAMpB,OAAO,SAAS,KAAK,GAAG;EACtB,UAAU,GAAG,EAAE,CAAC;CACjB;;;;;;;;;;;AAWD,OAAO,SAAS,GAAG,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,EAAE;EACpDC,GAAK,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;EACpCA,GAAK,CAAC,eAAe,GAAG,WAAW,CAAC,OAAO,EAAE,CAAC;EAC9C,IAAI,CAAC,CAAC,UAAU,IAAI,UAAU,CAAC,EAAE;IAC/B,UAAU,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;GAC7B;EACD,UAAU,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,GAAG,WAAW,CAAC;CACvD;;;;;;;;;;;;AAYD,OAAO,SAAS,MAAM,CAAC,MAAM,EAAE,WAAW,EAAE;EAC1CA,GAAK,CAAC,UAAU,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;EACpCA,GAAK,CAAC,eAAe,GAAG,WAAW,CAAC,OAAO,EAAE,CAAC;EAC9CA,GAAK,CAAC,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,CAAC;EAC1D,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,CAAC;EAC/C,IAAI,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC,EAAE;IACnC,OAAO,UAAU,CAAC,UAAU,CAAC,CAAC;GAC/B;EACD,OAAO,SAAS,CAAC;CAClB;;;;;;;;;AASD,OAAO,SAAS,GAAG,CAAC,UAAU,EAAE,eAAe,EAAE;EAC/CD,GAAG,CAAC,SAAS,CAAC;EACd,IAAI,UAAU,IAAI,UAAU,IAAI,eAAe,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;IACzE,SAAS,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC,eAAe,CAAC,CAAC;GACrD;EACD,OAAO,SAAS,CAAC;CAClB;"}