{"version":3,"file":"Projection.js","sources":["../../../src/ol/proj/Projection.js"],"sourcesContent":["/**\r\n * @module ol/proj/Projection\r\n */\r\nimport {METERS_PER_UNIT} from '../proj/Units.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} code The SRS identifier code, e.g. `EPSG:4326`.\r\n * @property {module:ol/proj/Units|string} [units] Units. Required unless a\r\n * proj4 projection is defined for `code`.\r\n * @property {module:ol/extent~Extent} [extent] The validity extent for the SRS.\r\n * @property {string} [axisOrientation='enu'] The axis orientation as specified in Proj4.\r\n * @property {boolean} [global=false] Whether the projection is valid for the whole globe.\r\n * @property {number} [metersPerUnit] The meters per unit for the SRS.\r\n * If not provided, the `units` are used to get the meters per unit from the {@link module:ol/proj/Units~METERS_PER_UNIT}\r\n * lookup table.\r\n * @property {module:ol/extent~Extent} [worldExtent] The world extent for the SRS.\r\n * @property {function(number, module:ol/coordinate~Coordinate):number} [getPointResolution]\r\n * Function to determine resolution at a point. The function is called with a\r\n * `{number}` view resolution and an `{module:ol/coordinate~Coordinate}` as arguments, and returns\r\n * the `{number}` resolution at the passed coordinate. If this is `undefined`,\r\n * the default {@link module:ol/proj#getPointResolution} function will be used.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Projection definition class. One of these is created for each projection\r\n * supported in the application and stored in the {@link module:ol/proj} namespace.\r\n * You can use these in applications, but this is not required, as API params\r\n * and options use {@link module:ol/proj~ProjectionLike} which means the simple string\r\n * code will suffice.\r\n *\r\n * You can use {@link module:ol/proj~get} to retrieve the object for a particular\r\n * projection.\r\n *\r\n * The library includes definitions for `EPSG:4326` and `EPSG:3857`, together\r\n * with the following aliases:\r\n * * `EPSG:4326`: CRS:84, urn:ogc:def:crs:EPSG:6.6:4326,\r\n *     urn:ogc:def:crs:OGC:1.3:CRS84, urn:ogc:def:crs:OGC:2:84,\r\n *     http://www.opengis.net/gml/srs/epsg.xml#4326,\r\n *     urn:x-ogc:def:crs:EPSG:4326\r\n * * `EPSG:3857`: EPSG:102100, EPSG:102113, EPSG:900913,\r\n *     urn:ogc:def:crs:EPSG:6.18:3:3857,\r\n *     http://www.opengis.net/gml/srs/epsg.xml#3857\r\n *\r\n * If you use [proj4js](https://github.com/proj4js/proj4js), aliases can\r\n * be added using `proj4.defs()`. After all required projection definitions are\r\n * added, call the {@link module:ol/proj/proj4~register} function.\r\n *\r\n * @api\r\n */\r\nclass Projection {\r\n\r\n  /**\r\n   * @param {module:ol/proj/Projection~Options} options Projection options.\r\n   */\r\n  constructor(options) {\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.code_ = options.code;\r\n\r\n    /**\r\n     * Units of projected coordinates. When set to `TILE_PIXELS`, a\r\n     * `this.extent_` and `this.worldExtent_` must be configured properly for each\r\n     * tile.\r\n     * @private\r\n     * @type {module:ol/proj/Units}\r\n     */\r\n    this.units_ = /** @type {module:ol/proj/Units} */ (options.units);\r\n\r\n    /**\r\n     * Validity extent of the projection in projected coordinates. For projections\r\n     * with `TILE_PIXELS` units, this is the extent of the tile in\r\n     * tile pixel space.\r\n     * @private\r\n     * @type {module:ol/extent~Extent}\r\n     */\r\n    this.extent_ = options.extent !== undefined ? options.extent : null;\r\n\r\n    /**\r\n     * Extent of the world in EPSG:4326. For projections with\r\n     * `TILE_PIXELS` units, this is the extent of the tile in\r\n     * projected coordinate space.\r\n     * @private\r\n     * @type {module:ol/extent~Extent}\r\n     */\r\n    this.worldExtent_ = options.worldExtent !== undefined ?\r\n      options.worldExtent : null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {string}\r\n     */\r\n    this.axisOrientation_ = options.axisOrientation !== undefined ?\r\n      options.axisOrientation : 'enu';\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.global_ = options.global !== undefined ? options.global : false;\r\n\r\n    /**\r\n     * @private\r\n     * @type {boolean}\r\n     */\r\n    this.canWrapX_ = !!(this.global_ && this.extent_);\r\n\r\n    /**\r\n     * @private\r\n     * @type {function(number, module:ol/coordinate~Coordinate):number|undefined}\r\n     */\r\n    this.getPointResolutionFunc_ = options.getPointResolution;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/tilegrid/TileGrid}\r\n     */\r\n    this.defaultTileGrid_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|undefined}\r\n     */\r\n    this.metersPerUnit_ = options.metersPerUnit;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} The projection is suitable for wrapping the x-axis\r\n   */\r\n  canWrapX() {\r\n    return this.canWrapX_;\r\n  }\r\n\r\n  /**\r\n   * Get the code for this projection, e.g. 'EPSG:4326'.\r\n   * @return {string} Code.\r\n   * @api\r\n   */\r\n  getCode() {\r\n    return this.code_;\r\n  }\r\n\r\n  /**\r\n   * Get the validity extent for this projection.\r\n   * @return {module:ol/extent~Extent} Extent.\r\n   * @api\r\n   */\r\n  getExtent() {\r\n    return this.extent_;\r\n  }\r\n\r\n  /**\r\n   * Get the units of this projection.\r\n   * @return {module:ol/proj/Units} Units.\r\n   * @api\r\n   */\r\n  getUnits() {\r\n    return this.units_;\r\n  }\r\n\r\n  /**\r\n   * Get the amount of meters per unit of this projection.  If the projection is\r\n   * not configured with `metersPerUnit` or a units identifier, the return is\r\n   * `undefined`.\r\n   * @return {number|undefined} Meters.\r\n   * @api\r\n   */\r\n  getMetersPerUnit() {\r\n    return this.metersPerUnit_ || METERS_PER_UNIT[this.units_];\r\n  }\r\n\r\n  /**\r\n   * Get the world extent for this projection.\r\n   * @return {module:ol/extent~Extent} Extent.\r\n   * @api\r\n   */\r\n  getWorldExtent() {\r\n    return this.worldExtent_;\r\n  }\r\n\r\n  /**\r\n   * Get the axis orientation of this projection.\r\n   * Example values are:\r\n   * enu - the default easting, northing, elevation.\r\n   * neu - northing, easting, up - useful for \"lat/long\" geographic coordinates,\r\n   *     or south orientated transverse mercator.\r\n   * wnu - westing, northing, up - some planetary coordinate systems have\r\n   *     \"west positive\" coordinate systems\r\n   * @return {string} Axis orientation.\r\n   * @api\r\n   */\r\n  getAxisOrientation() {\r\n    return this.axisOrientation_;\r\n  }\r\n\r\n  /**\r\n   * Is this projection a global projection which spans the whole world?\r\n   * @return {boolean} Whether the projection is global.\r\n   * @api\r\n   */\r\n  isGlobal() {\r\n    return this.global_;\r\n  }\r\n\r\n  /**\r\n   * Set if the projection is a global projection which spans the whole world\r\n   * @param {boolean} global Whether the projection is global.\r\n   * @api\r\n   */\r\n  setGlobal(global) {\r\n    this.global_ = global;\r\n    this.canWrapX_ = !!(global && this.extent_);\r\n  }\r\n\r\n  /**\r\n   * @return {module:ol/tilegrid/TileGrid} The default tile grid.\r\n   */\r\n  getDefaultTileGrid() {\r\n    return this.defaultTileGrid_;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/tilegrid/TileGrid} tileGrid The default tile grid.\r\n   */\r\n  setDefaultTileGrid(tileGrid) {\r\n    this.defaultTileGrid_ = tileGrid;\r\n  }\r\n\r\n  /**\r\n   * Set the validity extent for this projection.\r\n   * @param {module:ol/extent~Extent} extent Extent.\r\n   * @api\r\n   */\r\n  setExtent(extent) {\r\n    this.extent_ = extent;\r\n    this.canWrapX_ = !!(this.global_ && extent);\r\n  }\r\n\r\n  /**\r\n   * Set the world extent for this projection.\r\n   * @param {module:ol/extent~Extent} worldExtent World extent\r\n   *     [minlon, minlat, maxlon, maxlat].\r\n   * @api\r\n   */\r\n  setWorldExtent(worldExtent) {\r\n    this.worldExtent_ = worldExtent;\r\n  }\r\n\r\n  /**\r\n   * Set the getPointResolution function (see {@link module:ol/proj~getPointResolution}\r\n   * for this projection.\r\n   * @param {function(number, module:ol/coordinate~Coordinate):number} func Function\r\n   * @api\r\n   */\r\n  setGetPointResolution(func) {\r\n    this.getPointResolutionFunc_ = func;\r\n  }\r\n\r\n  /**\r\n   * Get the custom point resolution function for this projection (if set).\r\n   * @return {function(number, module:ol/coordinate~Coordinate):number|undefined} The custom point\r\n   * resolution function (if set).\r\n   */\r\n  getPointResolutionFunc() {\r\n    return this.getPointResolutionFunc_;\r\n  }\r\n}\r\n\r\nexport default Projection;\r\n"],"names":[],"mappings":"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"}