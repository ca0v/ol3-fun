{"version":3,"file":"extent.js","sources":["../../src/ol/extent.js"],"sourcesContent":["/**\r\n * @module ol/extent\r\n */\r\nimport {assert} from './asserts.js';\r\nimport Corner from './extent/Corner.js';\r\nimport Relationship from './extent/Relationship.js';\r\n\r\n\r\n/**\r\n * An array of numbers representing an extent: `[minx, miny, maxx, maxy]`.\r\n * @typedef {Array.<number>} Extent\r\n * @api\r\n */\r\n\r\n/**\r\n * Build an extent that includes all given coordinates.\r\n *\r\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\r\n * @return {module:ol/extent~Extent} Bounding extent.\r\n * @api\r\n */\r\nexport function boundingExtent(coordinates) {\r\n  const extent = createEmpty();\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<number>} xs Xs.\r\n * @param {Array.<number>} ys Ys.\r\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\r\n * @private\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nfunction _boundingExtentXYs(xs, ys, opt_extent) {\r\n  const minX = Math.min.apply(null, xs);\r\n  const minY = Math.min.apply(null, ys);\r\n  const maxX = Math.max.apply(null, xs);\r\n  const maxY = Math.max.apply(null, ys);\r\n  return createOrUpdate(minX, minY, maxX, maxY, opt_extent);\r\n}\r\n\r\n\r\n/**\r\n * Return extent increased by the provided value.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {number} value The amount by which the extent should be buffered.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n * @api\r\n */\r\nexport function buffer(extent, value, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = extent[0] - value;\r\n    opt_extent[1] = extent[1] - value;\r\n    opt_extent[2] = extent[2] + value;\r\n    opt_extent[3] = extent[3] + value;\r\n    return opt_extent;\r\n  } else {\r\n    return [\r\n      extent[0] - value,\r\n      extent[1] - value,\r\n      extent[2] + value,\r\n      extent[3] + value\r\n    ];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Creates a clone of an extent.\r\n *\r\n * @param {module:ol/extent~Extent} extent Extent to clone.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} The clone.\r\n */\r\nexport function clone(extent, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = extent[0];\r\n    opt_extent[1] = extent[1];\r\n    opt_extent[2] = extent[2];\r\n    opt_extent[3] = extent[3];\r\n    return opt_extent;\r\n  } else {\r\n    return extent.slice();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n * @return {number} Closest squared distance.\r\n */\r\nexport function closestSquaredDistanceXY(extent, x, y) {\r\n  let dx, dy;\r\n  if (x < extent[0]) {\r\n    dx = extent[0] - x;\r\n  } else if (extent[2] < x) {\r\n    dx = x - extent[2];\r\n  } else {\r\n    dx = 0;\r\n  }\r\n  if (y < extent[1]) {\r\n    dy = extent[1] - y;\r\n  } else if (extent[3] < y) {\r\n    dy = y - extent[3];\r\n  } else {\r\n    dy = 0;\r\n  }\r\n  return dx * dx + dy * dy;\r\n}\r\n\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n * @return {boolean} The coordinate is contained in the extent.\r\n * @api\r\n */\r\nexport function containsCoordinate(extent, coordinate) {\r\n  return containsXY(extent, coordinate[0], coordinate[1]);\r\n}\r\n\r\n\r\n/**\r\n * Check if one extent contains another.\r\n *\r\n * An extent is deemed contained if it lies completely within the other extent,\r\n * including if they share one or more edges.\r\n *\r\n * @param {module:ol/extent~Extent} extent1 Extent 1.\r\n * @param {module:ol/extent~Extent} extent2 Extent 2.\r\n * @return {boolean} The second extent is contained by or on the edge of the\r\n *     first.\r\n * @api\r\n */\r\nexport function containsExtent(extent1, extent2) {\r\n  return extent1[0] <= extent2[0] && extent2[2] <= extent1[2] &&\r\n      extent1[1] <= extent2[1] && extent2[3] <= extent1[3];\r\n}\r\n\r\n\r\n/**\r\n * Check if the passed coordinate is contained or on the edge of the extent.\r\n *\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {number} x X coordinate.\r\n * @param {number} y Y coordinate.\r\n * @return {boolean} The x, y values are contained in the extent.\r\n * @api\r\n */\r\nexport function containsXY(extent, x, y) {\r\n  return extent[0] <= x && x <= extent[2] && extent[1] <= y && y <= extent[3];\r\n}\r\n\r\n\r\n/**\r\n * Get the relationship between a coordinate and extent.\r\n * @param {module:ol/extent~Extent} extent The extent.\r\n * @param {module:ol/coordinate~Coordinate} coordinate The coordinate.\r\n * @return {module:ol/extent/Relationship} The relationship (bitwise compare with\r\n *     module:ol/extent/Relationship~Relationship).\r\n */\r\nexport function coordinateRelationship(extent, coordinate) {\r\n  const minX = extent[0];\r\n  const minY = extent[1];\r\n  const maxX = extent[2];\r\n  const maxY = extent[3];\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  let relationship = Relationship.UNKNOWN;\r\n  if (x < minX) {\r\n    relationship = relationship | Relationship.LEFT;\r\n  } else if (x > maxX) {\r\n    relationship = relationship | Relationship.RIGHT;\r\n  }\r\n  if (y < minY) {\r\n    relationship = relationship | Relationship.BELOW;\r\n  } else if (y > maxY) {\r\n    relationship = relationship | Relationship.ABOVE;\r\n  }\r\n  if (relationship === Relationship.UNKNOWN) {\r\n    relationship = Relationship.INTERSECTING;\r\n  }\r\n  return relationship;\r\n}\r\n\r\n\r\n/**\r\n * Create an empty extent.\r\n * @return {module:ol/extent~Extent} Empty extent.\r\n * @api\r\n */\r\nexport function createEmpty() {\r\n  return [Infinity, Infinity, -Infinity, -Infinity];\r\n}\r\n\r\n\r\n/**\r\n * Create a new extent or update the provided extent.\r\n * @param {number} minX Minimum X.\r\n * @param {number} minY Minimum Y.\r\n * @param {number} maxX Maximum X.\r\n * @param {number} maxY Maximum Y.\r\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function createOrUpdate(minX, minY, maxX, maxY, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = minX;\r\n    opt_extent[1] = minY;\r\n    opt_extent[2] = maxX;\r\n    opt_extent[3] = maxY;\r\n    return opt_extent;\r\n  } else {\r\n    return [minX, minY, maxX, maxY];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Create a new empty extent or make the provided one empty.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function createOrUpdateEmpty(opt_extent) {\r\n  return createOrUpdate(\r\n    Infinity, Infinity, -Infinity, -Infinity, opt_extent);\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinate(coordinate, opt_extent) {\r\n  const x = coordinate[0];\r\n  const y = coordinate[1];\r\n  return createOrUpdate(x, y, x, y, opt_extent);\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function createOrUpdateFromCoordinates(coordinates, opt_extent) {\r\n  const extent = createOrUpdateEmpty(opt_extent);\r\n  return extendCoordinates(extent, coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function createOrUpdateFromFlatCoordinates(flatCoordinates, offset, end, stride, opt_extent) {\r\n  const extent = createOrUpdateEmpty(opt_extent);\r\n  return extendFlatCoordinates(extent, flatCoordinates, offset, end, stride);\r\n}\r\n\r\n/**\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function createOrUpdateFromRings(rings, opt_extent) {\r\n  const extent = createOrUpdateEmpty(opt_extent);\r\n  return extendRings(extent, rings);\r\n}\r\n\r\n\r\n/**\r\n * Determine if two extents are equivalent.\r\n * @param {module:ol/extent~Extent} extent1 Extent 1.\r\n * @param {module:ol/extent~Extent} extent2 Extent 2.\r\n * @return {boolean} The two extents are equivalent.\r\n * @api\r\n */\r\nexport function equals(extent1, extent2) {\r\n  return extent1[0] == extent2[0] && extent1[2] == extent2[2] &&\r\n      extent1[1] == extent2[1] && extent1[3] == extent2[3];\r\n}\r\n\r\n\r\n/**\r\n * Modify an extent to include another extent.\r\n * @param {module:ol/extent~Extent} extent1 The extent to be modified.\r\n * @param {module:ol/extent~Extent} extent2 The extent that will be included in the first.\r\n * @return {module:ol/extent~Extent} A reference to the first (extended) extent.\r\n * @api\r\n */\r\nexport function extend(extent1, extent2) {\r\n  if (extent2[0] < extent1[0]) {\r\n    extent1[0] = extent2[0];\r\n  }\r\n  if (extent2[2] > extent1[2]) {\r\n    extent1[2] = extent2[2];\r\n  }\r\n  if (extent2[1] < extent1[1]) {\r\n    extent1[1] = extent2[1];\r\n  }\r\n  if (extent2[3] > extent1[3]) {\r\n    extent1[3] = extent2[3];\r\n  }\r\n  return extent1;\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n */\r\nexport function extendCoordinate(extent, coordinate) {\r\n  if (coordinate[0] < extent[0]) {\r\n    extent[0] = coordinate[0];\r\n  }\r\n  if (coordinate[0] > extent[2]) {\r\n    extent[2] = coordinate[0];\r\n  }\r\n  if (coordinate[1] < extent[1]) {\r\n    extent[1] = coordinate[1];\r\n  }\r\n  if (coordinate[1] > extent[3]) {\r\n    extent[3] = coordinate[1];\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {Array.<module:ol/coordinate~Coordinate>} coordinates Coordinates.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function extendCoordinates(extent, coordinates) {\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    extendCoordinate(extent, coordinates[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {Array.<number>} flatCoordinates Flat coordinates.\r\n * @param {number} offset Offset.\r\n * @param {number} end End.\r\n * @param {number} stride Stride.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function extendFlatCoordinates(extent, flatCoordinates, offset, end, stride) {\r\n  for (; offset < end; offset += stride) {\r\n    extendXY(extent, flatCoordinates[offset], flatCoordinates[offset + 1]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} rings Rings.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function extendRings(extent, rings) {\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    extendCoordinates(extent, rings[i]);\r\n  }\r\n  return extent;\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {number} x X.\r\n * @param {number} y Y.\r\n */\r\nexport function extendXY(extent, x, y) {\r\n  extent[0] = Math.min(extent[0], x);\r\n  extent[1] = Math.min(extent[1], y);\r\n  extent[2] = Math.max(extent[2], x);\r\n  extent[3] = Math.max(extent[3], y);\r\n}\r\n\r\n\r\n/**\r\n * This function calls `callback` for each corner of the extent. If the\r\n * callback returns a truthy value the function returns that value\r\n * immediately. Otherwise the function returns `false`.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {function(this:T, module:ol/coordinate~Coordinate): S} callback Callback.\r\n * @param {T=} opt_this Value to use as `this` when executing `callback`.\r\n * @return {S|boolean} Value.\r\n * @template S, T\r\n */\r\nexport function forEachCorner(extent, callback, opt_this) {\r\n  let val;\r\n  val = callback.call(opt_this, getBottomLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback.call(opt_this, getBottomRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback.call(opt_this, getTopRight(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  val = callback.call(opt_this, getTopLeft(extent));\r\n  if (val) {\r\n    return val;\r\n  }\r\n  return false;\r\n}\r\n\r\n\r\n/**\r\n * Get the size of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {number} Area.\r\n * @api\r\n */\r\nexport function getArea(extent) {\r\n  let area = 0;\r\n  if (!isEmpty(extent)) {\r\n    area = getWidth(extent) * getHeight(extent);\r\n  }\r\n  return area;\r\n}\r\n\r\n\r\n/**\r\n * Get the bottom left coordinate of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {module:ol/coordinate~Coordinate} Bottom left coordinate.\r\n * @api\r\n */\r\nexport function getBottomLeft(extent) {\r\n  return [extent[0], extent[1]];\r\n}\r\n\r\n\r\n/**\r\n * Get the bottom right coordinate of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {module:ol/coordinate~Coordinate} Bottom right coordinate.\r\n * @api\r\n */\r\nexport function getBottomRight(extent) {\r\n  return [extent[2], extent[1]];\r\n}\r\n\r\n\r\n/**\r\n * Get the center coordinate of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {module:ol/coordinate~Coordinate} Center.\r\n * @api\r\n */\r\nexport function getCenter(extent) {\r\n  return [(extent[0] + extent[2]) / 2, (extent[1] + extent[3]) / 2];\r\n}\r\n\r\n\r\n/**\r\n * Get a corner coordinate of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {module:ol/extent/Corner} corner Corner.\r\n * @return {module:ol/coordinate~Coordinate} Corner coordinate.\r\n */\r\nexport function getCorner(extent, corner) {\r\n  let coordinate;\r\n  if (corner === Corner.BOTTOM_LEFT) {\r\n    coordinate = getBottomLeft(extent);\r\n  } else if (corner === Corner.BOTTOM_RIGHT) {\r\n    coordinate = getBottomRight(extent);\r\n  } else if (corner === Corner.TOP_LEFT) {\r\n    coordinate = getTopLeft(extent);\r\n  } else if (corner === Corner.TOP_RIGHT) {\r\n    coordinate = getTopRight(extent);\r\n  } else {\r\n    assert(false, 13); // Invalid corner\r\n  }\r\n  return (\r\n    /** @type {!module:ol/coordinate~Coordinate} */ (coordinate)\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent1 Extent 1.\r\n * @param {module:ol/extent~Extent} extent2 Extent 2.\r\n * @return {number} Enlarged area.\r\n */\r\nexport function getEnlargedArea(extent1, extent2) {\r\n  const minX = Math.min(extent1[0], extent2[0]);\r\n  const minY = Math.min(extent1[1], extent2[1]);\r\n  const maxX = Math.max(extent1[2], extent2[2]);\r\n  const maxY = Math.max(extent1[3], extent2[3]);\r\n  return (maxX - minX) * (maxY - minY);\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/coordinate~Coordinate} center Center.\r\n * @param {number} resolution Resolution.\r\n * @param {number} rotation Rotation.\r\n * @param {module:ol/size~Size} size Size.\r\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function getForViewAndSize(center, resolution, rotation, size, opt_extent) {\r\n  const dx = resolution * size[0] / 2;\r\n  const dy = resolution * size[1] / 2;\r\n  const cosRotation = Math.cos(rotation);\r\n  const sinRotation = Math.sin(rotation);\r\n  const xCos = dx * cosRotation;\r\n  const xSin = dx * sinRotation;\r\n  const yCos = dy * cosRotation;\r\n  const ySin = dy * sinRotation;\r\n  const x = center[0];\r\n  const y = center[1];\r\n  const x0 = x - xCos + ySin;\r\n  const x1 = x - xCos - ySin;\r\n  const x2 = x + xCos - ySin;\r\n  const x3 = x + xCos + ySin;\r\n  const y0 = y - xSin - yCos;\r\n  const y1 = y - xSin + yCos;\r\n  const y2 = y + xSin + yCos;\r\n  const y3 = y + xSin - yCos;\r\n  return createOrUpdate(\r\n    Math.min(x0, x1, x2, x3), Math.min(y0, y1, y2, y3),\r\n    Math.max(x0, x1, x2, x3), Math.max(y0, y1, y2, y3),\r\n    opt_extent);\r\n}\r\n\r\n\r\n/**\r\n * Get the height of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {number} Height.\r\n * @api\r\n */\r\nexport function getHeight(extent) {\r\n  return extent[3] - extent[1];\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent1 Extent 1.\r\n * @param {module:ol/extent~Extent} extent2 Extent 2.\r\n * @return {number} Intersection area.\r\n */\r\nexport function getIntersectionArea(extent1, extent2) {\r\n  const intersection = getIntersection(extent1, extent2);\r\n  return getArea(intersection);\r\n}\r\n\r\n\r\n/**\r\n * Get the intersection of two extents.\r\n * @param {module:ol/extent~Extent} extent1 Extent 1.\r\n * @param {module:ol/extent~Extent} extent2 Extent 2.\r\n * @param {module:ol/extent~Extent=} opt_extent Optional extent to populate with intersection.\r\n * @return {module:ol/extent~Extent} Intersecting extent.\r\n * @api\r\n */\r\nexport function getIntersection(extent1, extent2, opt_extent) {\r\n  const intersection = opt_extent ? opt_extent : createEmpty();\r\n  if (intersects(extent1, extent2)) {\r\n    if (extent1[0] > extent2[0]) {\r\n      intersection[0] = extent1[0];\r\n    } else {\r\n      intersection[0] = extent2[0];\r\n    }\r\n    if (extent1[1] > extent2[1]) {\r\n      intersection[1] = extent1[1];\r\n    } else {\r\n      intersection[1] = extent2[1];\r\n    }\r\n    if (extent1[2] < extent2[2]) {\r\n      intersection[2] = extent1[2];\r\n    } else {\r\n      intersection[2] = extent2[2];\r\n    }\r\n    if (extent1[3] < extent2[3]) {\r\n      intersection[3] = extent1[3];\r\n    } else {\r\n      intersection[3] = extent2[3];\r\n    }\r\n  } else {\r\n    createOrUpdateEmpty(intersection);\r\n  }\r\n  return intersection;\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {number} Margin.\r\n */\r\nexport function getMargin(extent) {\r\n  return getWidth(extent) + getHeight(extent);\r\n}\r\n\r\n\r\n/**\r\n * Get the size (width, height) of an extent.\r\n * @param {module:ol/extent~Extent} extent The extent.\r\n * @return {module:ol/size~Size} The extent size.\r\n * @api\r\n */\r\nexport function getSize(extent) {\r\n  return [extent[2] - extent[0], extent[3] - extent[1]];\r\n}\r\n\r\n\r\n/**\r\n * Get the top left coordinate of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {module:ol/coordinate~Coordinate} Top left coordinate.\r\n * @api\r\n */\r\nexport function getTopLeft(extent) {\r\n  return [extent[0], extent[3]];\r\n}\r\n\r\n\r\n/**\r\n * Get the top right coordinate of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {module:ol/coordinate~Coordinate} Top right coordinate.\r\n * @api\r\n */\r\nexport function getTopRight(extent) {\r\n  return [extent[2], extent[3]];\r\n}\r\n\r\n\r\n/**\r\n * Get the width of an extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {number} Width.\r\n * @api\r\n */\r\nexport function getWidth(extent) {\r\n  return extent[2] - extent[0];\r\n}\r\n\r\n\r\n/**\r\n * Determine if one extent intersects another.\r\n * @param {module:ol/extent~Extent} extent1 Extent 1.\r\n * @param {module:ol/extent~Extent} extent2 Extent.\r\n * @return {boolean} The two extents intersect.\r\n * @api\r\n */\r\nexport function intersects(extent1, extent2) {\r\n  return extent1[0] <= extent2[2] &&\r\n      extent1[2] >= extent2[0] &&\r\n      extent1[1] <= extent2[3] &&\r\n      extent1[3] >= extent2[1];\r\n}\r\n\r\n\r\n/**\r\n * Determine if an extent is empty.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @return {boolean} Is empty.\r\n * @api\r\n */\r\nexport function isEmpty(extent) {\r\n  return extent[2] < extent[0] || extent[3] < extent[1];\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {module:ol/extent~Extent=} opt_extent Extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n */\r\nexport function returnOrUpdate(extent, opt_extent) {\r\n  if (opt_extent) {\r\n    opt_extent[0] = extent[0];\r\n    opt_extent[1] = extent[1];\r\n    opt_extent[2] = extent[2];\r\n    opt_extent[3] = extent[3];\r\n    return opt_extent;\r\n  } else {\r\n    return extent;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {number} value Value.\r\n */\r\nexport function scaleFromCenter(extent, value) {\r\n  const deltaX = ((extent[2] - extent[0]) / 2) * (value - 1);\r\n  const deltaY = ((extent[3] - extent[1]) / 2) * (value - 1);\r\n  extent[0] -= deltaX;\r\n  extent[2] += deltaX;\r\n  extent[1] -= deltaY;\r\n  extent[3] += deltaY;\r\n}\r\n\r\n\r\n/**\r\n * Determine if the segment between two coordinates intersects (crosses,\r\n * touches, or is contained by) the provided extent.\r\n * @param {module:ol/extent~Extent} extent The extent.\r\n * @param {module:ol/coordinate~Coordinate} start Segment start coordinate.\r\n * @param {module:ol/coordinate~Coordinate} end Segment end coordinate.\r\n * @return {boolean} The segment intersects the extent.\r\n */\r\nexport function intersectsSegment(extent, start, end) {\r\n  let intersects = false;\r\n  const startRel = coordinateRelationship(extent, start);\r\n  const endRel = coordinateRelationship(extent, end);\r\n  if (startRel === Relationship.INTERSECTING ||\r\n      endRel === Relationship.INTERSECTING) {\r\n    intersects = true;\r\n  } else {\r\n    const minX = extent[0];\r\n    const minY = extent[1];\r\n    const maxX = extent[2];\r\n    const maxY = extent[3];\r\n    const startX = start[0];\r\n    const startY = start[1];\r\n    const endX = end[0];\r\n    const endY = end[1];\r\n    const slope = (endY - startY) / (endX - startX);\r\n    let x, y;\r\n    if (!!(endRel & Relationship.ABOVE) &&\r\n        !(startRel & Relationship.ABOVE)) {\r\n      // potentially intersects top\r\n      x = endX - ((endY - maxY) / slope);\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (!intersects && !!(endRel & Relationship.RIGHT) &&\r\n        !(startRel & Relationship.RIGHT)) {\r\n      // potentially intersects right\r\n      y = endY - ((endX - maxX) * slope);\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n    if (!intersects && !!(endRel & Relationship.BELOW) &&\r\n        !(startRel & Relationship.BELOW)) {\r\n      // potentially intersects bottom\r\n      x = endX - ((endY - minY) / slope);\r\n      intersects = x >= minX && x <= maxX;\r\n    }\r\n    if (!intersects && !!(endRel & Relationship.LEFT) &&\r\n        !(startRel & Relationship.LEFT)) {\r\n      // potentially intersects left\r\n      y = endY - ((endX - minX) * slope);\r\n      intersects = y >= minY && y <= maxY;\r\n    }\r\n\r\n  }\r\n  return intersects;\r\n}\r\n\r\n\r\n/**\r\n * Apply a transform function to the extent.\r\n * @param {module:ol/extent~Extent} extent Extent.\r\n * @param {module:ol/proj~TransformFunction} transformFn Transform function.\r\n * Called with `[minX, minY, maxX, maxY]` extent coordinates.\r\n * @param {module:ol/extent~Extent=} opt_extent Destination extent.\r\n * @return {module:ol/extent~Extent} Extent.\r\n * @api\r\n */\r\nexport function applyTransform(extent, transformFn, opt_extent) {\r\n  const coordinates = [\r\n    extent[0], extent[1],\r\n    extent[0], extent[3],\r\n    extent[2], extent[1],\r\n    extent[2], extent[3]\r\n  ];\r\n  transformFn(coordinates, coordinates, 2);\r\n  const xs = [coordinates[0], coordinates[2], coordinates[4], coordinates[6]];\r\n  const ys = [coordinates[1], coordinates[3], coordinates[5], coordinates[7]];\r\n  return _boundingExtentXYs(xs, ys, opt_extent);\r\n}\r\n"],"names":["const","let"],"mappings":"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"}