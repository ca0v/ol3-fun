{"version":3,"file":"PointerEvent.js","sources":["../../../src/ol/pointer/PointerEvent.js"],"sourcesContent":["/**\r\n * @module ol/pointer/PointerEvent\r\n */\r\n\r\n// Based on https://github.com/Polymer/PointerEvents\r\n\r\n// Copyright (c) 2013 The Polymer Authors. All rights reserved.\r\n//\r\n// Redistribution and use in source and binary forms, with or without\r\n// modification, are permitted provided that the following conditions are\r\n// met:\r\n//\r\n// * Redistributions of source code must retain the above copyright\r\n// notice, this list of conditions and the following disclaimer.\r\n// * Redistributions in binary form must reproduce the above\r\n// copyright notice, this list of conditions and the following disclaimer\r\n// in the documentation and/or other materials provided with the\r\n// distribution.\r\n// * Neither the name of Google Inc. nor the names of its\r\n// contributors may be used to endorse or promote products derived from\r\n// this software without specific prior written permission.\r\n//\r\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n// \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\r\n// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\r\n// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\r\n// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\r\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\r\n// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\r\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n\r\nimport Event from '../events/Event.js';\r\n\r\n\r\n/**\r\n * Is the `buttons` property supported?\r\n * @type {boolean}\r\n */\r\nlet HAS_BUTTONS = false;\r\n\r\n\r\nclass PointerEvent extends Event {\r\n\r\n  /**\r\n   * A class for pointer events.\r\n   *\r\n   * This class is used as an abstraction for mouse events,\r\n   * touch events and even native pointer events.\r\n   *\r\n   * @param {string} type The type of the event to create.\r\n   * @param {Event} originalEvent The event.\r\n   * @param {Object.<string, ?>=} opt_eventDict An optional dictionary of\r\n   *    initial event properties.\r\n   */\r\n  constructor(type, originalEvent, opt_eventDict) {\r\n    super(type);\r\n\r\n    /**\r\n     * @const\r\n     * @type {Event}\r\n     */\r\n    this.originalEvent = originalEvent;\r\n\r\n    const eventDict = opt_eventDict ? opt_eventDict : {};\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.buttons = this.getButtons_(eventDict);\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.pressure = this.getPressure_(eventDict, this.buttons);\r\n\r\n    // MouseEvent related properties\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.bubbles = 'bubbles' in eventDict ? eventDict['bubbles'] : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.cancelable = 'cancelable' in eventDict ? eventDict['cancelable'] : false;\r\n\r\n    /**\r\n     * @type {Object}\r\n     */\r\n    this.view = 'view' in eventDict ? eventDict['view'] : null;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.detail = 'detail' in eventDict ? eventDict['detail'] : null;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.screenX = 'screenX' in eventDict ? eventDict['screenX'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.screenY = 'screenY' in eventDict ? eventDict['screenY'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.clientX = 'clientX' in eventDict ? eventDict['clientX'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.clientY = 'clientY' in eventDict ? eventDict['clientY'] : 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.ctrlKey = 'ctrlKey' in eventDict ? eventDict['ctrlKey'] : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.altKey = 'altKey' in eventDict ? eventDict['altKey'] : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.shiftKey = 'shiftKey' in eventDict ? eventDict['shiftKey'] : false;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.metaKey = 'metaKey' in eventDict ? eventDict['metaKey'] : false;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.button = 'button' in eventDict ? eventDict['button'] : 0;\r\n\r\n    /**\r\n     * @type {Node}\r\n     */\r\n    this.relatedTarget = 'relatedTarget' in eventDict ?\r\n      eventDict['relatedTarget'] : null;\r\n\r\n    // PointerEvent related properties\r\n\r\n    /**\r\n     * @const\r\n     * @type {number}\r\n     */\r\n    this.pointerId = 'pointerId' in eventDict ? eventDict['pointerId'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.width = 'width' in eventDict ? eventDict['width'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.height = 'height' in eventDict ? eventDict['height'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.tiltX = 'tiltX' in eventDict ? eventDict['tiltX'] : 0;\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.tiltY = 'tiltY' in eventDict ? eventDict['tiltY'] : 0;\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.pointerType = 'pointerType' in eventDict ? eventDict['pointerType'] : '';\r\n\r\n    /**\r\n     * @type {number}\r\n     */\r\n    this.hwTimestamp = 'hwTimestamp' in eventDict ? eventDict['hwTimestamp'] : 0;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     */\r\n    this.isPrimary = 'isPrimary' in eventDict ? eventDict['isPrimary'] : false;\r\n\r\n    // keep the semantics of preventDefault\r\n    if (originalEvent.preventDefault) {\r\n      this.preventDefault = function() {\r\n        originalEvent.preventDefault();\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object.<string, ?>} eventDict The event dictionary.\r\n   * @return {number} Button indicator.\r\n   */\r\n  getButtons_(eventDict) {\r\n    // According to the w3c spec,\r\n    // http://www.w3.org/TR/DOM-Level-3-Events/#events-MouseEvent-button\r\n    // MouseEvent.button == 0 can mean either no mouse button depressed, or the\r\n    // left mouse button depressed.\r\n    //\r\n    // As of now, the only way to distinguish between the two states of\r\n    // MouseEvent.button is by using the deprecated MouseEvent.which property, as\r\n    // this maps mouse buttons to positive integers > 0, and uses 0 to mean that\r\n    // no mouse button is held.\r\n    //\r\n    // MouseEvent.which is derived from MouseEvent.button at MouseEvent creation,\r\n    // but initMouseEvent does not expose an argument with which to set\r\n    // MouseEvent.which. Calling initMouseEvent with a buttonArg of 0 will set\r\n    // MouseEvent.button == 0 and MouseEvent.which == 1, breaking the expectations\r\n    // of app developers.\r\n    //\r\n    // The only way to propagate the correct state of MouseEvent.which and\r\n    // MouseEvent.button to a new MouseEvent.button == 0 and MouseEvent.which == 0\r\n    // is to call initMouseEvent with a buttonArg value of -1.\r\n    //\r\n    // This is fixed with DOM Level 4's use of buttons\r\n    let buttons;\r\n    if (eventDict.buttons || HAS_BUTTONS) {\r\n      buttons = eventDict.buttons;\r\n    } else {\r\n      switch (eventDict.which) {\r\n        case 1: buttons = 1; break;\r\n        case 2: buttons = 4; break;\r\n        case 3: buttons = 2; break;\r\n        default: buttons = 0;\r\n      }\r\n    }\r\n    return buttons;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object.<string, ?>} eventDict The event dictionary.\r\n   * @param {number} buttons Button indicator.\r\n   * @return {number} The pressure.\r\n   */\r\n  getPressure_(eventDict, buttons) {\r\n    // Spec requires that pointers without pressure specified use 0.5 for down\r\n    // state and 0 for up state.\r\n    let pressure = 0;\r\n    if (eventDict.pressure) {\r\n      pressure = eventDict.pressure;\r\n    } else {\r\n      pressure = buttons ? 0.5 : 0;\r\n    }\r\n    return pressure;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Checks if the `buttons` property is supported.\r\n */\r\n(function() {\r\n  try {\r\n    const ev = new MouseEvent('click', {buttons: 1});\r\n    HAS_BUTTONS = ev.buttons === 1;\r\n  } catch (e) {\r\n    // pass\r\n  }\r\n})();\r\n\r\nexport default PointerEvent;\r\n"],"names":["let","super","const"],"mappings":"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"}