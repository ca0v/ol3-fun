{"version":3,"file":"dom.js","sources":["../../src/ol/dom.js"],"sourcesContent":["/**\r\n * @module ol/dom\r\n */\r\n\r\n\r\n/**\r\n * Create an html canvas element and returns its 2d context.\r\n * @param {number=} opt_width Canvas width.\r\n * @param {number=} opt_height Canvas height.\r\n * @return {CanvasRenderingContext2D} The context.\r\n */\r\nexport function createCanvasContext2D(opt_width, opt_height) {\r\n  const canvas = /** @type {HTMLCanvasElement} */ (document.createElement('CANVAS'));\r\n  if (opt_width) {\r\n    canvas.width = opt_width;\r\n  }\r\n  if (opt_height) {\r\n    canvas.height = opt_height;\r\n  }\r\n  return /** @type {CanvasRenderingContext2D} */ (canvas.getContext('2d'));\r\n}\r\n\r\n\r\n/**\r\n * Get the current computed width for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerWidth(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The width.\r\n */\r\nexport function outerWidth(element) {\r\n  let width = element.offsetWidth;\r\n  const style = getComputedStyle(element);\r\n  width += parseInt(style.marginLeft, 10) + parseInt(style.marginRight, 10);\r\n\r\n  return width;\r\n}\r\n\r\n\r\n/**\r\n * Get the current computed height for the given element including margin,\r\n * padding and border.\r\n * Equivalent to jQuery's `$(el).outerHeight(true)`.\r\n * @param {!HTMLElement} element Element.\r\n * @return {number} The height.\r\n */\r\nexport function outerHeight(element) {\r\n  let height = element.offsetHeight;\r\n  const style = getComputedStyle(element);\r\n  height += parseInt(style.marginTop, 10) + parseInt(style.marginBottom, 10);\r\n\r\n  return height;\r\n}\r\n\r\n/**\r\n * @param {Node} newNode Node to replace old node\r\n * @param {Node} oldNode The node to be replaced\r\n */\r\nexport function replaceNode(newNode, oldNode) {\r\n  const parent = oldNode.parentNode;\r\n  if (parent) {\r\n    parent.replaceChild(newNode, oldNode);\r\n  }\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove.\r\n * @returns {Node} The node that was removed or null.\r\n */\r\nexport function removeNode(node) {\r\n  return node && node.parentNode ? node.parentNode.removeChild(node) : null;\r\n}\r\n\r\n/**\r\n * @param {Node} node The node to remove the children from.\r\n */\r\nexport function removeChildren(node) {\r\n  while (node.lastChild) {\r\n    node.removeChild(node.lastChild);\r\n  }\r\n}\r\n"],"names":["const","let"],"mappings":"AAAA;;;;;;;;;;;AAWA,OAAO,SAAS,qBAAqB,CAAC,SAAS,EAAE,UAAU,EAAE;EAC3DA,GAAK,CAAC,MAAM,oCAAoC,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC;EACnF,IAAI,SAAS,EAAE;IACb,MAAM,CAAC,KAAK,GAAG,SAAS,CAAC;GAC1B;EACD,IAAI,UAAU,EAAE;IACd,MAAM,CAAC,MAAM,GAAG,UAAU,CAAC;GAC5B;EACD,+CAA+C,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;CAC1E;;;;;;;;;;AAUD,OAAO,SAAS,UAAU,CAAC,OAAO,EAAE;EAClCC,GAAG,CAAC,KAAK,GAAG,OAAO,CAAC,WAAW,CAAC;EAChCD,GAAK,CAAC,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;EACxC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,UAAU,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;;EAE1E,OAAO,KAAK,CAAC;CACd;;;;;;;;;;AAUD,OAAO,SAAS,WAAW,CAAC,OAAO,EAAE;EACnCC,GAAG,CAAC,MAAM,GAAG,OAAO,CAAC,YAAY,CAAC;EAClCD,GAAK,CAAC,KAAK,GAAG,gBAAgB,CAAC,OAAO,CAAC,CAAC;EACxC,MAAM,IAAI,QAAQ,CAAC,KAAK,CAAC,SAAS,EAAE,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,YAAY,EAAE,EAAE,CAAC,CAAC;;EAE3E,OAAO,MAAM,CAAC;CACf;;;;;;AAMD,OAAO,SAAS,WAAW,CAAC,OAAO,EAAE,OAAO,EAAE;EAC5CA,GAAK,CAAC,MAAM,GAAG,OAAO,CAAC,UAAU,CAAC;EAClC,IAAI,MAAM,EAAE;IACV,MAAM,CAAC,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;GACvC;CACF;;;;;;AAMD,OAAO,SAAS,UAAU,CAAC,IAAI,EAAE;EAC/B,OAAO,IAAI,IAAI,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC;CAC3E;;;;;AAKD,OAAO,SAAS,cAAc,CAAC,IAAI,EAAE;EACnC,OAAO,IAAI,CAAC,SAAS,EAAE;IACrB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;GAClC;CACF;"}