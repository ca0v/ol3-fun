{"version":3,"file":"Pointer.js","sources":["../../../src/ol/interaction/Pointer.js"],"sourcesContent":["/**\r\n * @module ol/interaction/Pointer\r\n */\r\nimport {FALSE, UNDEFINED} from '../functions.js';\r\nimport MapBrowserEventType from '../MapBrowserEventType.js';\r\nimport MapBrowserPointerEvent from '../MapBrowserPointerEvent.js';\r\nimport Interaction from '../interaction/Interaction.js';\r\nimport {getValues} from '../obj.js';\r\n\r\n\r\n/**\r\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\r\n * @this {module:ol/interaction/Pointer}\r\n */\r\nconst handleDragEvent = UNDEFINED;\r\n\r\n\r\n/**\r\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\r\n * @return {boolean} Capture dragging.\r\n * @this {module:ol/interaction/Pointer}\r\n */\r\nconst handleUpEvent = FALSE;\r\n\r\n\r\n/**\r\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\r\n * @return {boolean} Capture dragging.\r\n * @this {module:ol/interaction/Pointer}\r\n */\r\nconst handleDownEvent = FALSE;\r\n\r\n\r\n/**\r\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\r\n * @this {module:ol/interaction/Pointer}\r\n */\r\nconst handleMoveEvent = UNDEFINED;\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleDownEvent]\r\n * Function handling \"down\" events. If the function returns `true` then a drag\r\n * sequence is started.\r\n * @property {(function(module:ol/MapBrowserPointerEvent))} [handleDragEvent]\r\n * Function handling \"drag\" events. This function is called on \"move\" events\r\n * during a drag sequence.\r\n * @property {(function(module:ol/MapBrowserEvent):boolean)} [handleEvent]\r\n * Method called by the map to notify the interaction that a browser event was\r\n * dispatched to the map. The function may return `false` to prevent the\r\n * propagation of the event to other interactions in the map's interactions\r\n * chain.\r\n * @property {(function(module:ol/MapBrowserPointerEvent))} [handleMoveEvent]\r\n * Function handling \"move\" events. This function is called on \"move\" events,\r\n * also during a drag sequence (so during a drag sequence both the\r\n * `handleDragEvent` function and this function are called).\r\n * @property {(function(module:ol/MapBrowserPointerEvent):boolean)} [handleUpEvent]\r\n *  Function handling \"up\" events. If the function returns `false` then the\r\n * current drag sequence is stopped.\r\n * @property {function(boolean):boolean} stopDown\r\n * Should the down event be propagated to other interactions, or should be\r\n * stopped?\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Base class that calls user-defined functions on `down`, `move` and `up`\r\n * events. This class also manages \"drag sequences\".\r\n *\r\n * When the `handleDownEvent` user function returns `true` a drag sequence is\r\n * started. During a drag sequence the `handleDragEvent` user function is\r\n * called on `move` events. The drag sequence ends when the `handleUpEvent`\r\n * user function is called and returns `false`.\r\n * @api\r\n */\r\nclass PointerInteraction extends Interaction {\r\n  /**\r\n   * @param {module:ol/interaction/Pointer~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super({\r\n      handleEvent: options.handleEvent || handleEvent\r\n    });\r\n\r\n    /**\r\n     * @type {function(module:ol/MapBrowserPointerEvent):boolean}\r\n     * @private\r\n     */\r\n    this.handleDownEvent_ = options.handleDownEvent ?\r\n      options.handleDownEvent : handleDownEvent;\r\n\r\n    /**\r\n     * @type {function(module:ol/MapBrowserPointerEvent)}\r\n     * @private\r\n     */\r\n    this.handleDragEvent_ = options.handleDragEvent ?\r\n      options.handleDragEvent : handleDragEvent;\r\n\r\n    /**\r\n     * @type {function(module:ol/MapBrowserPointerEvent)}\r\n     * @private\r\n     */\r\n    this.handleMoveEvent_ = options.handleMoveEvent ?\r\n      options.handleMoveEvent : handleMoveEvent;\r\n\r\n    /**\r\n     * @type {function(module:ol/MapBrowserPointerEvent):boolean}\r\n     * @private\r\n     */\r\n    this.handleUpEvent_ = options.handleUpEvent ?\r\n      options.handleUpEvent : handleUpEvent;\r\n\r\n    /**\r\n     * @type {boolean}\r\n     * @protected\r\n     */\r\n    this.handlingDownUpSequence = false;\r\n\r\n    /**\r\n     * This function is used to determine if \"down\" events should be propagated\r\n     * to other interactions or should be stopped.\r\n     * @type {function(boolean):boolean}\r\n     * @protected\r\n     */\r\n    this.stopDown = options.stopDown ? options.stopDown : stopDown;\r\n\r\n    /**\r\n     * @type {!Object.<string, module:ol/pointer/PointerEvent>}\r\n     * @private\r\n     */\r\n    this.trackedPointers_ = {};\r\n\r\n    /**\r\n     * @type {Array.<module:ol/pointer/PointerEvent>}\r\n     * @protected\r\n     */\r\n    this.targetPointers = [];\r\n\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\r\n   * @private\r\n   */\r\n  updateTrackedPointers_(mapBrowserEvent) {\r\n    if (isPointerDraggingEvent(mapBrowserEvent)) {\r\n      const event = mapBrowserEvent.pointerEvent;\r\n\r\n      const id = event.pointerId.toString();\r\n      if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\r\n        delete this.trackedPointers_[id];\r\n      } else if (mapBrowserEvent.type ==\r\n          MapBrowserEventType.POINTERDOWN) {\r\n        this.trackedPointers_[id] = event;\r\n      } else if (id in this.trackedPointers_) {\r\n        // update only when there was a pointerdown event for this pointer\r\n        this.trackedPointers_[id] = event;\r\n      }\r\n      this.targetPointers = getValues(this.trackedPointers_);\r\n    }\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<module:ol/pointer/PointerEvent>} pointerEvents List of events.\r\n * @return {module:ol/pixel~Pixel} Centroid pixel.\r\n */\r\nexport function centroid(pointerEvents) {\r\n  const length = pointerEvents.length;\r\n  let clientX = 0;\r\n  let clientY = 0;\r\n  for (let i = 0; i < length; i++) {\r\n    clientX += pointerEvents[i].clientX;\r\n    clientY += pointerEvents[i].clientY;\r\n  }\r\n  return [clientX / length, clientY / length];\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/MapBrowserPointerEvent} mapBrowserEvent Event.\r\n * @return {boolean} Whether the event is a pointerdown, pointerdrag\r\n *     or pointerup event.\r\n */\r\nfunction isPointerDraggingEvent(mapBrowserEvent) {\r\n  const type = mapBrowserEvent.type;\r\n  return type === MapBrowserEventType.POINTERDOWN ||\r\n    type === MapBrowserEventType.POINTERDRAG ||\r\n    type === MapBrowserEventType.POINTERUP;\r\n}\r\n\r\n\r\n/**\r\n * Handles the {@link module:ol/MapBrowserEvent map browser event} and may call into\r\n * other functions, if event sequences like e.g. 'drag' or 'down-up' etc. are\r\n * detected.\r\n * @param {module:ol/MapBrowserEvent} mapBrowserEvent Map browser event.\r\n * @return {boolean} `false` to stop event propagation.\r\n * @this {module:ol/interaction/Pointer}\r\n * @api\r\n */\r\nexport function handleEvent(mapBrowserEvent) {\r\n  if (!(mapBrowserEvent instanceof MapBrowserPointerEvent)) {\r\n    return true;\r\n  }\r\n\r\n  let stopEvent = false;\r\n  this.updateTrackedPointers_(mapBrowserEvent);\r\n  if (this.handlingDownUpSequence) {\r\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERDRAG) {\r\n      this.handleDragEvent_(mapBrowserEvent);\r\n    } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERUP) {\r\n      const handledUp = this.handleUpEvent_(mapBrowserEvent);\r\n      this.handlingDownUpSequence = handledUp && this.targetPointers.length > 0;\r\n    }\r\n  } else {\r\n    if (mapBrowserEvent.type == MapBrowserEventType.POINTERDOWN) {\r\n      const handled = this.handleDownEvent_(mapBrowserEvent);\r\n      this.handlingDownUpSequence = handled;\r\n      stopEvent = this.stopDown(handled);\r\n    } else if (mapBrowserEvent.type == MapBrowserEventType.POINTERMOVE) {\r\n      this.handleMoveEvent_(mapBrowserEvent);\r\n    }\r\n  }\r\n  return !stopEvent;\r\n}\r\n\r\n\r\nexport default PointerInteraction;\r\n\r\n/**\r\n * @param {boolean} handled Was the event handled by the interaction?\r\n * @return {boolean} Should the `down` event be stopped?\r\n */\r\nfunction stopDown(handled) {\r\n  return handled;\r\n}\r\n"],"names":["const","super","let"],"mappings":"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"}