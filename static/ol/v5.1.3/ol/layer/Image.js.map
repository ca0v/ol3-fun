{"version":3,"file":"Image.js","sources":["../../../src/ol/layer/Image.js"],"sourcesContent":["/**\r\n * @module ol/layer/Image\r\n */\r\nimport LayerType from '../LayerType.js';\r\nimport Layer from '../layer/Layer.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link module:ol/Map#addLayer}.\r\n * @property {module:ol/source/Image} [source] Source for this layer.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Server-rendered images that are available for arbitrary extents and\r\n * resolutions.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @fires module:ol/render/Event~RenderEvent\r\n * @api\r\n */\r\nclass ImageLayer extends Layer {\r\n\r\n  /**\r\n   * @param {module:ol/layer/Image~Options=} opt_options Layer options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ? opt_options : {};\r\n    super(options);\r\n\r\n    /**\r\n     * The layer type.\r\n     * @protected\r\n     * @type {module:ol/LayerType}\r\n     */\r\n    this.type = LayerType.IMAGE;\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n/**\r\n * Return the associated {@link module:ol/source/Image source} of the image layer.\r\n * @function\r\n * @return {module:ol/source/Image} Source.\r\n * @api\r\n */\r\nImageLayer.prototype.getSource;\r\nexport default ImageLayer;\r\n"],"names":["const","super"],"mappings":"AAAA;;;AAGA,OAAO,SAAS,MAAM,iBAAiB,CAAC;AACxC,OAAO,KAAK,MAAM,mBAAmB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkCtC,IAAM,UAAU,GAAc;EAK5B,mBAAW,CAAC,WAAW,EAAE;IACvBA,GAAK,CAAC,OAAO,GAAG,WAAW,GAAG,WAAW,GAAG,EAAE,CAAC;IAC/CC,UAAK,OAAC,OAAO,CAAC,CAAC;;;;;;;IAOf,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC,KAAK,CAAC;;;;;;GAE7B;;;EAhBsB,QAkBxB;;;;;;;;;AASD,UAAU,CAAC,SAAS,CAAC,SAAS,CAAC;AAC/B,eAAe,UAAU,CAAC;"}