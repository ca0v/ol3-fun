{"version":3,"file":"Vector.js","sources":["../../../src/ol/layer/Vector.js"],"sourcesContent":["/**\r\n * @module ol/layer/Vector\r\n */\r\nimport LayerType from '../LayerType.js';\r\nimport Layer from '../layer/Layer.js';\r\nimport VectorRenderType from '../layer/VectorRenderType.js';\r\nimport {assign} from '../obj.js';\r\nimport {createDefaultStyle, toFunction as toStyleFunction} from '../style/Style.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [opacity=1] Opacity (0, 1).\r\n * @property {boolean} [visible=true] Visibility.\r\n * @property {module:ol/extent~Extent} [extent] The bounding extent for layer rendering.  The layer will not be\r\n * rendered outside of this extent.\r\n * @property {number} [zIndex=0] The z-index for layer rendering.  At rendering time, the layers\r\n * will be ordered, first by Z-index and then by position.\r\n * @property {number} [minResolution] The minimum resolution (inclusive) at which this layer will be\r\n * visible.\r\n * @property {number} [maxResolution] The maximum resolution (exclusive) below which this layer will\r\n * be visible.\r\n * @property {module:ol/render~OrderFunction} [renderOrder] Render order. Function to be used when sorting\r\n * features before rendering. By default features are drawn in the order that they are created. Use\r\n * `null` to avoid the sort, but get an undefined draw order.\r\n * @property {number} [renderBuffer=100] The buffer in pixels around the viewport extent used by the\r\n * renderer when getting features from the vector source for the rendering or hit-detection.\r\n * Recommended value: the size of the largest symbol, line width or label.\r\n * @property {module:ol/layer/VectorRenderType|string} [renderMode='vector'] Render mode for vector layers:\r\n *  * `'image'`: Vector layers are rendered as images. Great performance, but point symbols and\r\n *    texts are always rotated with the view and pixels are scaled during zoom animations.\r\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering even during\r\n *    animations, but slower performance.\r\n * @property {module:ol/source/Vector} [source] Source.\r\n * @property {module:ol/PluggableMap} [map] Sets the layer as overlay on a map. The map will not manage\r\n * this layer in its layers collection, and the layer will be rendered on top. This is useful for\r\n * temporary layers. The standard way to add a layer to a map and have it managed by the map is to\r\n * use {@link module:ol/Map#addLayer}.\r\n * @property {boolean} [declutter=false] Declutter images and text. Decluttering is applied to all\r\n * image and text styles, and the priority is defined by the z-index of the style. Lower z-index\r\n * means higher priority.\r\n * @property {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} [style] Layer style. See\r\n * {@link module:ol/style} for default style which will be used if this is not defined.\r\n * @property {boolean} [updateWhileAnimating=false] When set to `true` and `renderMode`\r\n * is `vector`, feature batches will be recreated during animations. This means that no\r\n * vectors will be shown clipped, but the setting will have a performance impact for large\r\n * amounts of vector data. When set to `false`, batches will be recreated when no animation\r\n * is active.\r\n * @property {boolean} [updateWhileInteracting=false] When set to `true` and `renderMode`\r\n * is `vector`, feature batches will be recreated during interactions. See also\r\n * `updateWhileAnimating`.\r\n */\r\n\r\n\r\n/**\r\n * @enum {string}\r\n * Render mode for vector layers:\r\n *  * `'image'`: Vector layers are rendered as images. Great performance, but\r\n *    point symbols and texts are always rotated with the view and pixels are\r\n *    scaled during zoom animations.\r\n *  * `'vector'`: Vector layers are rendered as vectors. Most accurate rendering\r\n *    even during animations, but slower performance.\r\n * @api\r\n */\r\nexport const RenderType = {\r\n  IMAGE: 'image',\r\n  VECTOR: 'vector'\r\n};\r\n\r\n\r\n/**\r\n * @enum {string}\r\n * @private\r\n */\r\nconst Property = {\r\n  RENDER_ORDER: 'renderOrder'\r\n};\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Vector data that is rendered client-side.\r\n * Note that any property set in the options is set as a {@link module:ol/Object~BaseObject}\r\n * property on the layer object; for example, setting `title: 'My Title'` in the\r\n * options means that `title` is observable, and has get/set accessors.\r\n *\r\n * @api\r\n */\r\nclass VectorLayer extends Layer {\r\n  /**\r\n   * @param {module:ol/layer/Vector~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    const options = opt_options ?\r\n      opt_options : /** @type {module:ol/layer/Vector~Options} */ ({});\r\n\r\n    const baseOptions = assign({}, options);\r\n\r\n    delete baseOptions.style;\r\n    delete baseOptions.renderBuffer;\r\n    delete baseOptions.updateWhileAnimating;\r\n    delete baseOptions.updateWhileInteracting;\r\n    super(baseOptions);\r\n\r\n    /**\r\n    * @private\r\n    * @type {boolean}\r\n    */\r\n    this.declutter_ = options.declutter !== undefined ? options.declutter : false;\r\n\r\n    /**\r\n    * @type {number}\r\n    * @private\r\n    */\r\n    this.renderBuffer_ = options.renderBuffer !== undefined ?\r\n      options.renderBuffer : 100;\r\n\r\n    /**\r\n    * User provided style.\r\n    * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\r\n    * @private\r\n    */\r\n    this.style_ = null;\r\n\r\n    /**\r\n    * Style function for use within the library.\r\n    * @type {module:ol/style/Style~StyleFunction|undefined}\r\n    * @private\r\n    */\r\n    this.styleFunction_ = undefined;\r\n\r\n    this.setStyle(options.style);\r\n\r\n    /**\r\n    * @type {boolean}\r\n    * @private\r\n    */\r\n    this.updateWhileAnimating_ = options.updateWhileAnimating !== undefined ?\r\n      options.updateWhileAnimating : false;\r\n\r\n    /**\r\n    * @type {boolean}\r\n    * @private\r\n    */\r\n    this.updateWhileInteracting_ = options.updateWhileInteracting !== undefined ?\r\n      options.updateWhileInteracting : false;\r\n\r\n    /**\r\n    * @private\r\n    * @type {module:ol/layer/VectorTileRenderType|string}\r\n    */\r\n    this.renderMode_ = options.renderMode || VectorRenderType.VECTOR;\r\n\r\n    /**\r\n    * The layer type.\r\n    * @protected\r\n    * @type {module:ol/LayerType}\r\n    */\r\n    this.type = LayerType.VECTOR;\r\n\r\n  }\r\n\r\n  /**\r\n  * @return {boolean} Declutter.\r\n  */\r\n  getDeclutter() {\r\n    return this.declutter_;\r\n  }\r\n\r\n  /**\r\n  * @param {boolean} declutter Declutter.\r\n  */\r\n  setDeclutter(declutter) {\r\n    this.declutter_ = declutter;\r\n  }\r\n\r\n  /**\r\n  * @return {number|undefined} Render buffer.\r\n  */\r\n  getRenderBuffer() {\r\n    return this.renderBuffer_;\r\n  }\r\n\r\n  /**\r\n  * @return {function(module:ol/Feature, module:ol/Feature): number|null|undefined} Render\r\n  *     order.\r\n  */\r\n  getRenderOrder() {\r\n    return (\r\n    /** @type {module:ol/render~OrderFunction|null|undefined} */ (this.get(Property.RENDER_ORDER))\r\n    );\r\n  }\r\n\r\n  /**\r\n  * Get the style for features.  This returns whatever was passed to the `style`\r\n  * option at construction or to the `setStyle` method.\r\n  * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\r\n  *     Layer style.\r\n  * @api\r\n  */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n  * Get the style function.\r\n  * @return {module:ol/style/Style~StyleFunction|undefined} Layer style function.\r\n  * @api\r\n  */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n  * @return {boolean} Whether the rendered layer should be updated while\r\n  *     animating.\r\n  */\r\n  getUpdateWhileAnimating() {\r\n    return this.updateWhileAnimating_;\r\n  }\r\n\r\n  /**\r\n  * @return {boolean} Whether the rendered layer should be updated while\r\n  *     interacting.\r\n  */\r\n  getUpdateWhileInteracting() {\r\n    return this.updateWhileInteracting_;\r\n  }\r\n\r\n  /**\r\n  * @param {module:ol/render~OrderFunction|null|undefined} renderOrder\r\n  *     Render order.\r\n  */\r\n  setRenderOrder(renderOrder) {\r\n    this.set(Property.RENDER_ORDER, renderOrder);\r\n  }\r\n\r\n  /**\r\n  * Set the style for features.  This can be a single style object, an array\r\n  * of styles, or a function that takes a feature and resolution and returns\r\n  * an array of styles. If it is `undefined` the default style is used. If\r\n  * it is `null` the layer has no style (a `null` style), so only features\r\n  * that have their own styles will be rendered in the layer. See\r\n  * {@link module:ol/style} for information on the default style.\r\n  * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction|null|undefined}\r\n  *     style Layer style.\r\n  * @api\r\n  */\r\n  setStyle(style) {\r\n    this.style_ = style !== undefined ? style : createDefaultStyle;\r\n    this.styleFunction_ = style === null ?\r\n      undefined : toStyleFunction(this.style_);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n  * @return {module:ol/layer/VectorRenderType|string} The render mode.\r\n  */\r\n  getRenderMode() {\r\n    return this.renderMode_;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Return the associated {@link module:ol/source/Vector vectorsource} of the layer.\r\n * @function\r\n * @return {module:ol/source/Vector} Source.\r\n * @api\r\n */\r\nVectorLayer.prototype.getSource;\r\n\r\n\r\nexport default VectorLayer;\r\n"],"names":["const","super"],"mappings":"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"}