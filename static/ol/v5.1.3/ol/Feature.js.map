{"version":3,"file":"Feature.js","sources":["../../src/ol/Feature.js"],"sourcesContent":["/**\r\n * @module ol/Feature\r\n */\r\nimport {assert} from './asserts.js';\r\nimport {listen, unlisten, unlistenByKey} from './events.js';\r\nimport EventType from './events/EventType.js';\r\nimport BaseObject, {getChangeEventType} from './Object.js';\r\nimport Geometry from './geom/Geometry.js';\r\nimport Style from './style/Style.js';\r\n\r\n/**\r\n * @classdesc\r\n * A vector object for geographic features with a geometry and other\r\n * attribute properties, similar to the features in vector file formats like\r\n * GeoJSON.\r\n *\r\n * Features can be styled individually with `setStyle`; otherwise they use the\r\n * style of their vector layer.\r\n *\r\n * Note that attribute properties are set as {@link module:ol/Object} properties on\r\n * the feature object, so they are observable, and have get/set accessors.\r\n *\r\n * Typically, a feature has a single geometry property. You can set the\r\n * geometry using the `setGeometry` method and get it with `getGeometry`.\r\n * It is possible to store more than one geometry on a feature using attribute\r\n * properties. By default, the geometry used for rendering is identified by\r\n * the property name `geometry`. If you want to use another geometry property\r\n * for rendering, use the `setGeometryName` method to change the attribute\r\n * property associated with the geometry for the feature.  For example:\r\n *\r\n * ```js\r\n *\r\n * import Feature from 'ol/Feature';\r\n * import Polygon from 'ol/geom/Polygon';\r\n * import Point from 'ol/geom/Point';\r\n *\r\n * var feature = new Feature({\r\n *   geometry: new Polygon(polyCoords),\r\n *   labelPoint: new Point(labelCoords),\r\n *   name: 'My Polygon'\r\n * });\r\n *\r\n * // get the polygon geometry\r\n * var poly = feature.getGeometry();\r\n *\r\n * // Render the feature as a point using the coordinates from labelPoint\r\n * feature.setGeometryName('labelPoint');\r\n *\r\n * // get the point geometry\r\n * var point = feature.getGeometry();\r\n * ```\r\n *\r\n * @api\r\n */\r\nclass Feature extends BaseObject {\r\n  /**\r\n   * @param {module:ol/geom/Geometry|Object.<string, *>=} opt_geometryOrProperties\r\n   *     You may pass a Geometry object directly, or an object literal containing\r\n   *     properties. If you pass an object literal, you may include a Geometry\r\n   *     associated with a `geometry` key.\r\n   */\r\n  constructor(opt_geometryOrProperties) {\r\n\r\n    super();\r\n\r\n    /**\r\n     * @private\r\n     * @type {number|string|undefined}\r\n     */\r\n    this.id_ = undefined;\r\n\r\n    /**\r\n     * @type {string}\r\n     * @private\r\n     */\r\n    this.geometryName_ = 'geometry';\r\n\r\n    /**\r\n     * User provided style.\r\n     * @private\r\n     * @type {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction}\r\n     */\r\n    this.style_ = null;\r\n\r\n    /**\r\n     * @private\r\n     * @type {module:ol/style/Style~StyleFunction|undefined}\r\n     */\r\n    this.styleFunction_ = undefined;\r\n\r\n    /**\r\n     * @private\r\n     * @type {?module:ol/events~EventsKey}\r\n     */\r\n    this.geometryChangeKey_ = null;\r\n\r\n    listen(\r\n      this, getChangeEventType(this.geometryName_),\r\n      this.handleGeometryChanged_, this);\r\n\r\n    if (opt_geometryOrProperties !== undefined) {\r\n      if (opt_geometryOrProperties instanceof Geometry ||\r\n          !opt_geometryOrProperties) {\r\n        const geometry = opt_geometryOrProperties;\r\n        this.setGeometry(geometry);\r\n      } else {\r\n        /** @type {Object.<string, *>} */\r\n        const properties = opt_geometryOrProperties;\r\n        this.setProperties(properties);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clone this feature. If the original feature has a geometry it\r\n   * is also cloned. The feature id is not set in the clone.\r\n   * @return {module:ol/Feature} The clone.\r\n   * @api\r\n   */\r\n  clone() {\r\n    const clone = new Feature(this.getProperties());\r\n    clone.setGeometryName(this.getGeometryName());\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      clone.setGeometry(geometry.clone());\r\n    }\r\n    const style = this.getStyle();\r\n    if (style) {\r\n      clone.setStyle(style);\r\n    }\r\n    return clone;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's default geometry.  A feature may have any number of named\r\n   * geometries.  The \"default\" geometry (the one that is rendered by default) is\r\n   * set when calling {@link module:ol/Feature~Feature#setGeometry}.\r\n   * @return {module:ol/geom/Geometry|undefined} The default geometry for the feature.\r\n   * @api\r\n   * @observable\r\n   */\r\n  getGeometry() {\r\n    return (\r\n      /** @type {module:ol/geom/Geometry|undefined} */ (this.get(this.geometryName_))\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get the feature identifier.  This is a stable identifier for the feature and\r\n   * is either set when reading data from a remote source or set explicitly by\r\n   * calling {@link module:ol/Feature~Feature#setId}.\r\n   * @return {number|string|undefined} Id.\r\n   * @api\r\n   */\r\n  getId() {\r\n    return this.id_;\r\n  }\r\n\r\n  /**\r\n   * Get the name of the feature's default geometry.  By default, the default\r\n   * geometry is named `geometry`.\r\n   * @return {string} Get the property name associated with the default geometry\r\n   *     for this feature.\r\n   * @api\r\n   */\r\n  getGeometryName() {\r\n    return this.geometryName_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style. Will return what was provided to the\r\n   * {@link module:ol/Feature~Feature#setStyle} method.\r\n   * @return {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} The feature style.\r\n   * @api\r\n   */\r\n  getStyle() {\r\n    return this.style_;\r\n  }\r\n\r\n  /**\r\n   * Get the feature's style function.\r\n   * @return {module:ol/style/Style~StyleFunction|undefined} Return a function\r\n   * representing the current style of this feature.\r\n   * @api\r\n   */\r\n  getStyleFunction() {\r\n    return this.styleFunction_;\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChange_() {\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  handleGeometryChanged_() {\r\n    if (this.geometryChangeKey_) {\r\n      unlistenByKey(this.geometryChangeKey_);\r\n      this.geometryChangeKey_ = null;\r\n    }\r\n    const geometry = this.getGeometry();\r\n    if (geometry) {\r\n      this.geometryChangeKey_ = listen(geometry,\r\n        EventType.CHANGE, this.handleGeometryChange_, this);\r\n    }\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the default geometry for the feature.  This will update the property\r\n   * with the name returned by {@link module:ol/Feature~Feature#getGeometryName}.\r\n   * @param {module:ol/geom/Geometry|undefined} geometry The new geometry.\r\n   * @api\r\n   * @observable\r\n   */\r\n  setGeometry(geometry) {\r\n    this.set(this.geometryName_, geometry);\r\n  }\r\n\r\n  /**\r\n   * Set the style for the feature.  This can be a single style object, an array\r\n   * of styles, or a function that takes a resolution and returns an array of\r\n   * styles. If it is `null` the feature has no style (a `null` style).\r\n   * @param {module:ol/style/Style|Array.<module:ol/style/Style>|module:ol/style/Style~StyleFunction} style Style for this feature.\r\n   * @api\r\n   * @fires module:ol/events/Event~Event#event:change\r\n   */\r\n  setStyle(style) {\r\n    this.style_ = style;\r\n    this.styleFunction_ = !style ? undefined : createStyleFunction(style);\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the feature id.  The feature id is considered stable and may be used when\r\n   * requesting features or comparing identifiers returned from a remote source.\r\n   * The feature id can be used with the\r\n   * {@link module:ol/source/Vector~VectorSource#getFeatureById} method.\r\n   * @param {number|string|undefined} id The feature id.\r\n   * @api\r\n   * @fires module:ol/events/Event~Event#event:change\r\n   */\r\n  setId(id) {\r\n    this.id_ = id;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Set the property name to be used when getting the feature's default geometry.\r\n   * When calling {@link module:ol/Feature~Feature#getGeometry}, the value of the property with\r\n   * this name will be returned.\r\n   * @param {string} name The property name of the default geometry.\r\n   * @api\r\n   */\r\n  setGeometryName(name) {\r\n    unlisten(\r\n      this, getChangeEventType(this.geometryName_),\r\n      this.handleGeometryChanged_, this);\r\n    this.geometryName_ = name;\r\n    listen(\r\n      this, getChangeEventType(this.geometryName_),\r\n      this.handleGeometryChanged_, this);\r\n    this.handleGeometryChanged_();\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Convert the provided object into a feature style function.  Functions passed\r\n * through unchanged.  Arrays of module:ol/style/Style or single style objects wrapped\r\n * in a new feature style function.\r\n * @param {module:ol/style/Style~StyleFunction|!Array.<module:ol/style/Style>|!module:ol/style/Style} obj\r\n *     A feature style function, a single style, or an array of styles.\r\n * @return {module:ol/style/Style~StyleFunction} A style function.\r\n */\r\nexport function createStyleFunction(obj) {\r\n  if (typeof obj === 'function') {\r\n    return obj;\r\n  } else {\r\n    /**\r\n     * @type {Array.<module:ol/style/Style>}\r\n     */\r\n    let styles;\r\n    if (Array.isArray(obj)) {\r\n      styles = obj;\r\n    } else {\r\n      assert(obj instanceof Style,\r\n        41); // Expected an `module:ol/style/Style~Style` or an array of `module:ol/style/Style~Style`\r\n      styles = [obj];\r\n    }\r\n    return function() {\r\n      return styles;\r\n    };\r\n  }\r\n}\r\nexport default Feature;\r\n"],"names":["super","const","let"],"mappings":"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"}