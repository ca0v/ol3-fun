{"version":3,"file":"rotationconstraint.js","sources":["../../src/ol/rotationconstraint.js"],"sourcesContent":["/**\r\n * @module ol/rotationconstraint\r\n */\r\nimport {toRadians} from './math.js';\r\n\r\n\r\n/**\r\n * @typedef {function((number|undefined), number): (number|undefined)} Type\r\n */\r\n\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @param {number} delta Delta.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function disable(rotation, delta) {\r\n  if (rotation !== undefined) {\r\n    return 0;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {number|undefined} rotation Rotation.\r\n * @param {number} delta Delta.\r\n * @return {number|undefined} Rotation.\r\n */\r\nexport function none(rotation, delta) {\r\n  if (rotation !== undefined) {\r\n    return rotation + delta;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {number} n N.\r\n * @return {module:ol/rotationconstraint~Type} Rotation constraint.\r\n */\r\nexport function createSnapToN(n) {\r\n  const theta = 2 * Math.PI / n;\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {number} delta Delta.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function(rotation, delta) {\r\n      if (rotation !== undefined) {\r\n        rotation = Math.floor((rotation + delta) / theta + 0.5) * theta;\r\n        return rotation;\r\n      } else {\r\n        return undefined;\r\n      }\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * @param {number=} opt_tolerance Tolerance.\r\n * @return {module:ol/rotationconstraint~Type} Rotation constraint.\r\n */\r\nexport function createSnapToZero(opt_tolerance) {\r\n  const tolerance = opt_tolerance || toRadians(5);\r\n  return (\r\n    /**\r\n     * @param {number|undefined} rotation Rotation.\r\n     * @param {number} delta Delta.\r\n     * @return {number|undefined} Rotation.\r\n     */\r\n    function(rotation, delta) {\r\n      if (rotation !== undefined) {\r\n        if (Math.abs(rotation + delta) <= tolerance) {\r\n          return 0;\r\n        } else {\r\n          return rotation + delta;\r\n        }\r\n      } else {\r\n        return undefined;\r\n      }\r\n    });\r\n}\r\n"],"names":["const"],"mappings":"AAAA;;;AAGA,QAAQ,SAAS,OAAO,WAAW,CAAC;;;;;;;;;;;;;AAapC,OAAO,SAAS,OAAO,CAAC,QAAQ,EAAE,KAAK,EAAE;EACvC,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,OAAO,CAAC,CAAC;GACV,MAAM;IACL,OAAO,SAAS,CAAC;GAClB;CACF;;;;;;;;AAQD,OAAO,SAAS,IAAI,CAAC,QAAQ,EAAE,KAAK,EAAE;EACpC,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,OAAO,QAAQ,GAAG,KAAK,CAAC;GACzB,MAAM;IACL,OAAO,SAAS,CAAC;GAClB;CACF;;;;;;;AAOD,OAAO,SAAS,aAAa,CAAC,CAAC,EAAE;EAC/BA,GAAK,CAAC,KAAK,GAAG,CAAC,GAAG,IAAI,CAAC,EAAE,GAAG,CAAC,CAAC;EAC9B,OAAO;;;;;;IAML,SAAS,QAAQ,EAAE,KAAK,EAAE;MACxB,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,GAAG,KAAK,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,KAAK,CAAC;QAChE,OAAO,QAAQ,CAAC;OACjB,MAAM;QACL,OAAO,SAAS,CAAC;OAClB;KACF,CAAC,CAAC;CACN;;;;;;;AAOD,OAAO,SAAS,gBAAgB,CAAC,aAAa,EAAE;EAC9CA,GAAK,CAAC,SAAS,GAAG,aAAa,IAAI,SAAS,CAAC,CAAC,CAAC,CAAC;EAChD,OAAO;;;;;;IAML,SAAS,QAAQ,EAAE,KAAK,EAAE;MACxB,IAAI,QAAQ,KAAK,SAAS,EAAE;QAC1B,IAAI,IAAI,CAAC,GAAG,CAAC,QAAQ,GAAG,KAAK,CAAC,IAAI,SAAS,EAAE;UAC3C,OAAO,CAAC,CAAC;SACV,MAAM;UACL,OAAO,QAAQ,GAAG,KAAK,CAAC;SACzB;OACF,MAAM;QACL,OAAO,SAAS,CAAC;OAClB;KACF,CAAC,CAAC;CACN;"}