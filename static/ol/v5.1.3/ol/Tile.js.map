{"version":3,"file":"Tile.js","sources":["../../src/ol/Tile.js"],"sourcesContent":["/**\r\n * @module ol/Tile\r\n */\r\nimport TileState from './TileState.js';\r\nimport {easeIn} from './easing.js';\r\nimport EventTarget from './events/EventTarget.js';\r\nimport EventType from './events/EventType.js';\r\n\r\n\r\n/**\r\n * A function that takes an {@link module:ol/Tile} for the tile and a\r\n * `{string}` for the url as arguments.\r\n *\r\n * @typedef {function(module:ol/Tile, string)} LoadFunction\r\n * @api\r\n */\r\n\r\n/**\r\n * {@link module:ol/source/Tile~Tile} sources use a function of this type to get\r\n * the url that provides a tile for a given tile coordinate.\r\n *\r\n * This function takes an {@link module:ol/tilecoord~TileCoord} for the tile\r\n * coordinate, a `{number}` representing the pixel ratio and a\r\n * {@link module:ol/proj/Projection} for the projection  as arguments\r\n * and returns a `{string}` representing the tile URL, or undefined if no tile\r\n * should be requested for the passed tile coordinate.\r\n *\r\n * @typedef {function(module:ol/tilecoord~TileCoord, number,\r\n *           module:ol/proj/Projection): (string|undefined)} UrlFunction\r\n * @api\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {number} [transition=250] A duration for tile opacity\r\n * transitions in milliseconds. A duration of 0 disables the opacity transition.\r\n * @api\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Base class for tiles.\r\n *\r\n * @abstract\r\n  */\r\nclass Tile extends EventTarget {\r\n\r\n  /**\r\n   * @param {module:ol/tilecoord~TileCoord} tileCoord Tile coordinate.\r\n   * @param {module:ol/TileState} state State.\r\n   * @param {module:ol/Tile~Options=} opt_options Tile options.\r\n   */\r\n  constructor(tileCoord, state, opt_options) {\r\n    super();\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    /**\r\n     * @type {module:ol/tilecoord~TileCoord}\r\n     */\r\n    this.tileCoord = tileCoord;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {module:ol/TileState}\r\n     */\r\n    this.state = state;\r\n\r\n    /**\r\n     * An \"interim\" tile for this tile. The interim tile may be used while this\r\n     * one is loading, for \"smooth\" transitions when changing params/dimensions\r\n     * on the source.\r\n     * @type {module:ol/Tile}\r\n     */\r\n    this.interimTile = null;\r\n\r\n    /**\r\n     * A key assigned to the tile. This is used by the tile source to determine\r\n     * if this tile can effectively be used, or if a new tile should be created\r\n     * and this one be used as an interim tile for this new tile.\r\n     * @type {string}\r\n     */\r\n    this.key = '';\r\n\r\n    /**\r\n     * The duration for the opacity transition.\r\n     * @type {number}\r\n     */\r\n    this.transition_ = options.transition === undefined ? 250 : options.transition;\r\n\r\n    /**\r\n     * Lookup of start times for rendering transitions.  If the start time is\r\n     * equal to -1, the transition is complete.\r\n     * @type {Object.<number, number>}\r\n     */\r\n    this.transitionStarts_ = {};\r\n\r\n  }\r\n\r\n  /**\r\n   * @protected\r\n   */\r\n  changed() {\r\n    this.dispatchEvent(EventType.CHANGE);\r\n  }\r\n\r\n  /**\r\n   * @return {string} Key.\r\n   */\r\n  getKey() {\r\n    return this.key + '/' + this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * Get the interim tile most suitable for rendering using the chain of interim\r\n   * tiles. This corresponds to the  most recent tile that has been loaded, if no\r\n   * such tile exists, the original tile is returned.\r\n   * @return {!module:ol/Tile} Best tile for rendering.\r\n   */\r\n  getInterimTile() {\r\n    if (!this.interimTile) {\r\n      //empty chain\r\n      return this;\r\n    }\r\n    let tile = this.interimTile;\r\n\r\n    // find the first loaded tile and return it. Since the chain is sorted in\r\n    // decreasing order of creation time, there is no need to search the remainder\r\n    // of the list (all those tiles correspond to older requests and will be\r\n    // cleaned up by refreshInterimChain)\r\n    do {\r\n      if (tile.getState() == TileState.LOADED) {\r\n        return tile;\r\n      }\r\n      tile = tile.interimTile;\r\n    } while (tile);\r\n\r\n    // we can not find a better tile\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Goes through the chain of interim tiles and discards sections of the chain\r\n   * that are no longer relevant.\r\n   */\r\n  refreshInterimChain() {\r\n    if (!this.interimTile) {\r\n      return;\r\n    }\r\n\r\n    let tile = this.interimTile;\r\n    let prev = this;\r\n\r\n    do {\r\n      if (tile.getState() == TileState.LOADED) {\r\n        //we have a loaded tile, we can discard the rest of the list\r\n        //we would could abort any LOADING tile request\r\n        //older than this tile (i.e. any LOADING tile following this entry in the chain)\r\n        tile.interimTile = null;\r\n        break;\r\n      } else if (tile.getState() == TileState.LOADING) {\r\n        //keep this LOADING tile any loaded tiles later in the chain are\r\n        //older than this tile, so we're still interested in the request\r\n        prev = tile;\r\n      } else if (tile.getState() == TileState.IDLE) {\r\n        //the head of the list is the most current tile, we don't need\r\n        //to start any other requests for this chain\r\n        prev.interimTile = tile.interimTile;\r\n      } else {\r\n        prev = tile;\r\n      }\r\n      tile = prev.interimTile;\r\n    } while (tile);\r\n  }\r\n\r\n  /**\r\n   * Get the tile coordinate for this tile.\r\n   * @return {module:ol/tilecoord~TileCoord} The tile coordinate.\r\n   * @api\r\n   */\r\n  getTileCoord() {\r\n    return this.tileCoord;\r\n  }\r\n\r\n  /**\r\n   * @return {module:ol/TileState} State.\r\n   */\r\n  getState() {\r\n    return this.state;\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/TileState} state State.\r\n   */\r\n  setState(state) {\r\n    this.state = state;\r\n    this.changed();\r\n  }\r\n\r\n  /**\r\n   * Load the image or retry if loading previously failed.\r\n   * Loading is taken care of by the tile queue, and calling this method is\r\n   * only needed for preloading or for reloading in case of an error.\r\n   * @abstract\r\n   * @api\r\n   */\r\n  load() {}\r\n\r\n  /**\r\n   * Get the alpha value for rendering.\r\n   * @param {number} id An id for the renderer.\r\n   * @param {number} time The render frame time.\r\n   * @return {number} A number between 0 and 1.\r\n   */\r\n  getAlpha(id, time) {\r\n    if (!this.transition_) {\r\n      return 1;\r\n    }\r\n\r\n    let start = this.transitionStarts_[id];\r\n    if (!start) {\r\n      start = time;\r\n      this.transitionStarts_[id] = start;\r\n    } else if (start === -1) {\r\n      return 1;\r\n    }\r\n\r\n    const delta = time - start + (1000 / 60); // avoid rendering at 0\r\n    if (delta >= this.transition_) {\r\n      return 1;\r\n    }\r\n    return easeIn(delta / this.transition_);\r\n  }\r\n\r\n  /**\r\n   * Determine if a tile is in an alpha transition.  A tile is considered in\r\n   * transition if tile.getAlpha() has not yet been called or has been called\r\n   * and returned 1.\r\n   * @param {number} id An id for the renderer.\r\n   * @return {boolean} The tile is in transition.\r\n   */\r\n  inTransition(id) {\r\n    if (!this.transition_) {\r\n      return false;\r\n    }\r\n    return this.transitionStarts_[id] !== -1;\r\n  }\r\n\r\n  /**\r\n   * Mark a transition as complete.\r\n   * @param {number} id An id for the renderer.\r\n   */\r\n  endTransition(id) {\r\n    if (this.transition_) {\r\n      this.transitionStarts_[id] = -1;\r\n    }\r\n  }\r\n}\r\n\r\n\r\nexport default Tile;\r\n"],"names":["super","const","let"],"mappings":"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"}