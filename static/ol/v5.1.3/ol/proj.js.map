{"version":3,"file":"proj.js","sources":["../../src/ol/proj.js"],"sourcesContent":["/**\r\n * @module ol/proj\r\n */\r\n\r\n/**\r\n * The ol/proj module stores:\r\n * * a list of {@link module:ol/proj/Projection}\r\n * objects, one for each projection supported by the application\r\n * * a list of transform functions needed to convert coordinates in one projection\r\n * into another.\r\n *\r\n * The static functions are the methods used to maintain these.\r\n * Each transform function can handle not only simple coordinate pairs, but also\r\n * large arrays of coordinates such as vector geometries.\r\n *\r\n * When loaded, the library adds projection objects for EPSG:4326 (WGS84\r\n * geographic coordinates) and EPSG:3857 (Web or Spherical Mercator, as used\r\n * for example by Bing Maps or OpenStreetMap), together with the relevant\r\n * transform functions.\r\n *\r\n * Additional transforms may be added by using the http://proj4js.org/\r\n * library (version 2.2 or later). You can use the full build supplied by\r\n * Proj4js, or create a custom build to support those projections you need; see\r\n * the Proj4js website for how to do this. You also need the Proj4js definitions\r\n * for the required projections. These definitions can be obtained from\r\n * https://epsg.io/, and are a JS function, so can be loaded in a script\r\n * tag (as in the examples) or pasted into your application.\r\n *\r\n * After all required projection definitions are added to proj4's registry (by\r\n * using `proj4.defs()`), simply call `register(proj4)` from the `ol/proj/proj4`\r\n * package. Existing transforms are not changed by this function. See\r\n * examples/wms-image-custom-proj for an example of this.\r\n *\r\n * Additional projection definitions can be registered with `proj4.defs()` any\r\n * time. Just make sure to call `register(proj4)` again; for example, with user-supplied data where you don't\r\n * know in advance what projections are needed, you can initially load minimal\r\n * support and then load whichever are requested.\r\n *\r\n * Note that Proj4js does not support projection extents. If you want to add\r\n * one for creating default tile grids, you can add it after the Projection\r\n * object has been created with `setExtent`, for example,\r\n * `get('EPSG:1234').setExtent(extent)`.\r\n *\r\n * In addition to Proj4js support, any transform functions can be added with\r\n * {@link module:ol/proj~addCoordinateTransforms}. To use this, you must first create\r\n * a {@link module:ol/proj/Projection} object for the new projection and add it with\r\n * {@link module:ol/proj~addProjection}. You can then add the forward and inverse\r\n * functions with {@link module:ol/proj~addCoordinateTransforms}. See\r\n * examples/wms-custom-proj for an example of this.\r\n *\r\n * Note that if no transforms are needed and you only need to define the\r\n * projection, just add a {@link module:ol/proj/Projection} with\r\n * {@link module:ol/proj~addProjection}. See examples/wms-no-proj for an example of\r\n * this.\r\n */\r\nimport {getDistance} from './sphere.js';\r\nimport {applyTransform} from './extent.js';\r\nimport {modulo} from './math.js';\r\nimport {toEPSG4326, fromEPSG4326, PROJECTIONS as EPSG3857_PROJECTIONS} from './proj/epsg3857.js';\r\nimport {PROJECTIONS as EPSG4326_PROJECTIONS} from './proj/epsg4326.js';\r\nimport Projection from './proj/Projection.js';\r\nimport Units, {METERS_PER_UNIT} from './proj/Units.js';\r\nimport * as projections from './proj/projections.js';\r\nimport {add as addTransformFunc, clear as clearTransformFuncs, get as getTransformFunc} from './proj/transforms.js';\r\n\r\n\r\n/**\r\n * A projection as {@link module:ol/proj/Projection}, SRS identifier\r\n * string or undefined.\r\n * @typedef {module:ol/proj/Projection|string|undefined} ProjectionLike\r\n * @api\r\n */\r\n\r\n\r\n/**\r\n * A transform function accepts an array of input coordinate values, an optional\r\n * output array, and an optional dimension (default should be 2).  The function\r\n * transforms the input coordinate values, populates the output array, and\r\n * returns the output array.\r\n *\r\n * @typedef {function(Array.<number>, Array.<number>=, number=): Array.<number>} TransformFunction\r\n * @api\r\n */\r\n\r\n\r\nexport {METERS_PER_UNIT};\r\n\r\n\r\n/**\r\n * @param {Array.<number>} input Input coordinate array.\r\n * @param {Array.<number>=} opt_output Output array of coordinate values.\r\n * @param {number=} opt_dimension Dimension.\r\n * @return {Array.<number>} Output coordinate array (new array, same coordinate\r\n *     values).\r\n */\r\nexport function cloneTransform(input, opt_output, opt_dimension) {\r\n  let output;\r\n  if (opt_output !== undefined) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      opt_output[i] = input[i];\r\n    }\r\n    output = opt_output;\r\n  } else {\r\n    output = input.slice();\r\n  }\r\n  return output;\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<number>} input Input coordinate array.\r\n * @param {Array.<number>=} opt_output Output array of coordinate values.\r\n * @param {number=} opt_dimension Dimension.\r\n * @return {Array.<number>} Input coordinate array (same array as input).\r\n */\r\nexport function identityTransform(input, opt_output, opt_dimension) {\r\n  if (opt_output !== undefined && input !== opt_output) {\r\n    for (let i = 0, ii = input.length; i < ii; ++i) {\r\n      opt_output[i] = input[i];\r\n    }\r\n    input = opt_output;\r\n  }\r\n  return input;\r\n}\r\n\r\n\r\n/**\r\n * Add a Projection object to the list of supported projections that can be\r\n * looked up by their code.\r\n *\r\n * @param {module:ol/proj/Projection} projection Projection instance.\r\n * @api\r\n */\r\nexport function addProjection(projection) {\r\n  projections.add(projection.getCode(), projection);\r\n  addTransformFunc(projection, projection, cloneTransform);\r\n}\r\n\r\n\r\n/**\r\n * @param {Array.<module:ol/proj/Projection>} projections Projections.\r\n */\r\nexport function addProjections(projections) {\r\n  projections.forEach(addProjection);\r\n}\r\n\r\n\r\n/**\r\n * Fetches a Projection object for the code specified.\r\n *\r\n * @param {module:ol/proj~ProjectionLike} projectionLike Either a code string which is\r\n *     a combination of authority and identifier such as \"EPSG:4326\", or an\r\n *     existing projection object, or undefined.\r\n * @return {module:ol/proj/Projection} Projection object, or null if not in list.\r\n * @api\r\n */\r\nexport function get(projectionLike) {\r\n  let projection = null;\r\n  if (projectionLike instanceof Projection) {\r\n    projection = projectionLike;\r\n  } else if (typeof projectionLike === 'string') {\r\n    const code = projectionLike;\r\n    projection = projections.get(code);\r\n  }\r\n  return projection;\r\n}\r\n\r\n\r\n/**\r\n * Get the resolution of the point in degrees or distance units.\r\n * For projections with degrees as the unit this will simply return the\r\n * provided resolution. For other projections the point resolution is\r\n * by default estimated by transforming the 'point' pixel to EPSG:4326,\r\n * measuring its width and height on the normal sphere,\r\n * and taking the average of the width and height.\r\n * A custom function can be provided for a specific projection, either\r\n * by setting the `getPointResolution` option in the\r\n * {@link module:ol/proj/Projection~Projection} constructor or by using\r\n * {@link module:ol/proj/Projection~Projection#setGetPointResolution} to change an existing\r\n * projection object.\r\n * @param {module:ol/proj~ProjectionLike} projection The projection.\r\n * @param {number} resolution Nominal resolution in projection units.\r\n * @param {module:ol/coordinate~Coordinate} point Point to find adjusted resolution at.\r\n * @param {module:ol/proj/Units=} opt_units Units to get the point resolution in.\r\n * Default is the projection's units.\r\n * @return {number} Point resolution.\r\n * @api\r\n */\r\nexport function getPointResolution(projection, resolution, point, opt_units) {\r\n  projection = get(projection);\r\n  let pointResolution;\r\n  const getter = projection.getPointResolutionFunc();\r\n  if (getter) {\r\n    pointResolution = getter(resolution, point);\r\n  } else {\r\n    const units = projection.getUnits();\r\n    if (units == Units.DEGREES && !opt_units || opt_units == Units.DEGREES) {\r\n      pointResolution = resolution;\r\n    } else {\r\n      // Estimate point resolution by transforming the center pixel to EPSG:4326,\r\n      // measuring its width and height on the normal sphere, and taking the\r\n      // average of the width and height.\r\n      const toEPSG4326 = getTransformFromProjections(projection, get('EPSG:4326'));\r\n      let vertices = [\r\n        point[0] - resolution / 2, point[1],\r\n        point[0] + resolution / 2, point[1],\r\n        point[0], point[1] - resolution / 2,\r\n        point[0], point[1] + resolution / 2\r\n      ];\r\n      vertices = toEPSG4326(vertices, vertices, 2);\r\n      const width = getDistance(vertices.slice(0, 2), vertices.slice(2, 4));\r\n      const height = getDistance(vertices.slice(4, 6), vertices.slice(6, 8));\r\n      pointResolution = (width + height) / 2;\r\n      const metersPerUnit = opt_units ?\r\n        METERS_PER_UNIT[opt_units] :\r\n        projection.getMetersPerUnit();\r\n      if (metersPerUnit !== undefined) {\r\n        pointResolution /= metersPerUnit;\r\n      }\r\n    }\r\n  }\r\n  return pointResolution;\r\n}\r\n\r\n\r\n/**\r\n * Registers transformation functions that don't alter coordinates. Those allow\r\n * to transform between projections with equal meaning.\r\n *\r\n * @param {Array.<module:ol/proj/Projection>} projections Projections.\r\n * @api\r\n */\r\nexport function addEquivalentProjections(projections) {\r\n  addProjections(projections);\r\n  projections.forEach(function(source) {\r\n    projections.forEach(function(destination) {\r\n      if (source !== destination) {\r\n        addTransformFunc(source, destination, cloneTransform);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Registers transformation functions to convert coordinates in any projection\r\n * in projection1 to any projection in projection2.\r\n *\r\n * @param {Array.<module:ol/proj/Projection>} projections1 Projections with equal\r\n *     meaning.\r\n * @param {Array.<module:ol/proj/Projection>} projections2 Projections with equal\r\n *     meaning.\r\n * @param {module:ol/proj~TransformFunction} forwardTransform Transformation from any\r\n *   projection in projection1 to any projection in projection2.\r\n * @param {module:ol/proj~TransformFunction} inverseTransform Transform from any projection\r\n *   in projection2 to any projection in projection1..\r\n */\r\nexport function addEquivalentTransforms(projections1, projections2, forwardTransform, inverseTransform) {\r\n  projections1.forEach(function(projection1) {\r\n    projections2.forEach(function(projection2) {\r\n      addTransformFunc(projection1, projection2, forwardTransform);\r\n      addTransformFunc(projection2, projection1, inverseTransform);\r\n    });\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * Clear all cached projections and transforms.\r\n */\r\nexport function clearAllProjections() {\r\n  projections.clear();\r\n  clearTransformFuncs();\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/proj/Projection|string|undefined} projection Projection.\r\n * @param {string} defaultCode Default code.\r\n * @return {module:ol/proj/Projection} Projection.\r\n */\r\nexport function createProjection(projection, defaultCode) {\r\n  if (!projection) {\r\n    return get(defaultCode);\r\n  } else if (typeof projection === 'string') {\r\n    return get(projection);\r\n  } else {\r\n    return (\r\n      /** @type {module:ol/proj/Projection} */ (projection)\r\n    );\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Creates a {@link module:ol/proj~TransformFunction} from a simple 2D coordinate transform\r\n * function.\r\n * @param {function(module:ol/coordinate~Coordinate): module:ol/coordinate~Coordinate} coordTransform Coordinate\r\n *     transform.\r\n * @return {module:ol/proj~TransformFunction} Transform function.\r\n */\r\nexport function createTransformFromCoordinateTransform(coordTransform) {\r\n  return (\r\n    /**\r\n     * @param {Array.<number>} input Input.\r\n     * @param {Array.<number>=} opt_output Output.\r\n     * @param {number=} opt_dimension Dimension.\r\n     * @return {Array.<number>} Output.\r\n     */\r\n    function(input, opt_output, opt_dimension) {\r\n      const length = input.length;\r\n      const dimension = opt_dimension !== undefined ? opt_dimension : 2;\r\n      const output = opt_output !== undefined ? opt_output : new Array(length);\r\n      for (let i = 0; i < length; i += dimension) {\r\n        const point = coordTransform([input[i], input[i + 1]]);\r\n        output[i] = point[0];\r\n        output[i + 1] = point[1];\r\n        for (let j = dimension - 1; j >= 2; --j) {\r\n          output[i + j] = input[i + j];\r\n        }\r\n      }\r\n      return output;\r\n    });\r\n}\r\n\r\n\r\n/**\r\n * Registers coordinate transform functions to convert coordinates between the\r\n * source projection and the destination projection.\r\n * The forward and inverse functions convert coordinate pairs; this function\r\n * converts these into the functions used internally which also handle\r\n * extents and coordinate arrays.\r\n *\r\n * @param {module:ol/proj~ProjectionLike} source Source projection.\r\n * @param {module:ol/proj~ProjectionLike} destination Destination projection.\r\n * @param {function(module:ol/coordinate~Coordinate): module:ol/coordinate~Coordinate} forward The forward transform\r\n *     function (that is, from the source projection to the destination\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}.\r\n * @param {function(module:ol/coordinate~Coordinate): module:ol/coordinate~Coordinate} inverse The inverse transform\r\n *     function (that is, from the destination projection to the source\r\n *     projection) that takes a {@link module:ol/coordinate~Coordinate} as argument and returns\r\n *     the transformed {@link module:ol/coordinate~Coordinate}.\r\n * @api\r\n */\r\nexport function addCoordinateTransforms(source, destination, forward, inverse) {\r\n  const sourceProj = get(source);\r\n  const destProj = get(destination);\r\n  addTransformFunc(sourceProj, destProj, createTransformFromCoordinateTransform(forward));\r\n  addTransformFunc(destProj, sourceProj, createTransformFromCoordinateTransform(inverse));\r\n}\r\n\r\n\r\n/**\r\n * Transforms a coordinate from longitude/latitude to a different projection.\r\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate as longitude and latitude, i.e.\r\n *     an array with longitude as 1st and latitude as 2nd element.\r\n * @param {module:ol/proj~ProjectionLike=} opt_projection Target projection. The\r\n *     default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {module:ol/coordinate~Coordinate} Coordinate projected to the target projection.\r\n * @api\r\n */\r\nexport function fromLonLat(coordinate, opt_projection) {\r\n  return transform(coordinate, 'EPSG:4326',\r\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857');\r\n}\r\n\r\n\r\n/**\r\n * Transforms a coordinate to longitude/latitude.\r\n * @param {module:ol/coordinate~Coordinate} coordinate Projected coordinate.\r\n * @param {module:ol/proj~ProjectionLike=} opt_projection Projection of the coordinate.\r\n *     The default is Web Mercator, i.e. 'EPSG:3857'.\r\n * @return {module:ol/coordinate~Coordinate} Coordinate as longitude and latitude, i.e. an array\r\n *     with longitude as 1st and latitude as 2nd element.\r\n * @api\r\n */\r\nexport function toLonLat(coordinate, opt_projection) {\r\n  const lonLat = transform(coordinate,\r\n    opt_projection !== undefined ? opt_projection : 'EPSG:3857', 'EPSG:4326');\r\n  const lon = lonLat[0];\r\n  if (lon < -180 || lon > 180) {\r\n    lonLat[0] = modulo(lon + 180, 360) - 180;\r\n  }\r\n  return lonLat;\r\n}\r\n\r\n\r\n/**\r\n * Checks if two projections are the same, that is every coordinate in one\r\n * projection does represent the same geographic point as the same coordinate in\r\n * the other projection.\r\n *\r\n * @param {module:ol/proj/Projection} projection1 Projection 1.\r\n * @param {module:ol/proj/Projection} projection2 Projection 2.\r\n * @return {boolean} Equivalent.\r\n * @api\r\n */\r\nexport function equivalent(projection1, projection2) {\r\n  if (projection1 === projection2) {\r\n    return true;\r\n  }\r\n  const equalUnits = projection1.getUnits() === projection2.getUnits();\r\n  if (projection1.getCode() === projection2.getCode()) {\r\n    return equalUnits;\r\n  } else {\r\n    const transformFunc = getTransformFromProjections(projection1, projection2);\r\n    return transformFunc === cloneTransform && equalUnits;\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Searches in the list of transform functions for the function for converting\r\n * coordinates from the source projection to the destination projection.\r\n *\r\n * @param {module:ol/proj/Projection} sourceProjection Source Projection object.\r\n * @param {module:ol/proj/Projection} destinationProjection Destination Projection\r\n *     object.\r\n * @return {module:ol/proj~TransformFunction} Transform function.\r\n */\r\nexport function getTransformFromProjections(sourceProjection, destinationProjection) {\r\n  const sourceCode = sourceProjection.getCode();\r\n  const destinationCode = destinationProjection.getCode();\r\n  let transformFunc = getTransformFunc(sourceCode, destinationCode);\r\n  if (!transformFunc) {\r\n    transformFunc = identityTransform;\r\n  }\r\n  return transformFunc;\r\n}\r\n\r\n\r\n/**\r\n * Given the projection-like objects, searches for a transformation\r\n * function to convert a coordinates array from the source projection to the\r\n * destination projection.\r\n *\r\n * @param {module:ol/proj~ProjectionLike} source Source.\r\n * @param {module:ol/proj~ProjectionLike} destination Destination.\r\n * @return {module:ol/proj~TransformFunction} Transform function.\r\n * @api\r\n */\r\nexport function getTransform(source, destination) {\r\n  const sourceProjection = get(source);\r\n  const destinationProjection = get(destination);\r\n  return getTransformFromProjections(sourceProjection, destinationProjection);\r\n}\r\n\r\n\r\n/**\r\n * Transforms a coordinate from source projection to destination projection.\r\n * This returns a new coordinate (and does not modify the original).\r\n *\r\n * See {@link module:ol/proj~transformExtent} for extent transformation.\r\n * See the transform method of {@link module:ol/geom/Geometry~Geometry} and its\r\n * subclasses for geometry transforms.\r\n *\r\n * @param {module:ol/coordinate~Coordinate} coordinate Coordinate.\r\n * @param {module:ol/proj~ProjectionLike} source Source projection-like.\r\n * @param {module:ol/proj~ProjectionLike} destination Destination projection-like.\r\n * @return {module:ol/coordinate~Coordinate} Coordinate.\r\n * @api\r\n */\r\nexport function transform(coordinate, source, destination) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return transformFunc(coordinate, undefined, coordinate.length);\r\n}\r\n\r\n\r\n/**\r\n * Transforms an extent from source projection to destination projection.  This\r\n * returns a new extent (and does not modify the original).\r\n *\r\n * @param {module:ol/extent~Extent} extent The extent to transform.\r\n * @param {module:ol/proj~ProjectionLike} source Source projection-like.\r\n * @param {module:ol/proj~ProjectionLike} destination Destination projection-like.\r\n * @return {module:ol/extent~Extent} The transformed extent.\r\n * @api\r\n */\r\nexport function transformExtent(extent, source, destination) {\r\n  const transformFunc = getTransform(source, destination);\r\n  return applyTransform(extent, transformFunc);\r\n}\r\n\r\n\r\n/**\r\n * Transforms the given point to the destination projection.\r\n *\r\n * @param {module:ol/coordinate~Coordinate} point Point.\r\n * @param {module:ol/proj/Projection} sourceProjection Source projection.\r\n * @param {module:ol/proj/Projection} destinationProjection Destination projection.\r\n * @return {module:ol/coordinate~Coordinate} Point.\r\n */\r\nexport function transformWithProjections(point, sourceProjection, destinationProjection) {\r\n  const transformFunc = getTransformFromProjections(sourceProjection, destinationProjection);\r\n  return transformFunc(point);\r\n}\r\n\r\n/**\r\n * Add transforms to and from EPSG:4326 and EPSG:3857.  This function is called\r\n * by when this module is executed and should only need to be called again after\r\n * `clearAllProjections()` is called (e.g. in tests).\r\n */\r\nexport function addCommon() {\r\n  // Add transformations that don't alter coordinates to convert within set of\r\n  // projections with equal meaning.\r\n  addEquivalentProjections(EPSG3857_PROJECTIONS);\r\n  addEquivalentProjections(EPSG4326_PROJECTIONS);\r\n  // Add transformations to convert EPSG:4326 like coordinates to EPSG:3857 like\r\n  // coordinates and back.\r\n  addEquivalentTransforms(EPSG4326_PROJECTIONS, EPSG3857_PROJECTIONS, fromEPSG4326, toEPSG4326);\r\n}\r\n\r\naddCommon();\r\n"],"names":["let","const"],"mappings":"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"}