{"version":3,"file":"size.js","sources":["../../src/ol/size.js"],"sourcesContent":["/**\r\n * @module ol/size\r\n */\r\n\r\n\r\n/**\r\n * An array of numbers representing a size: `[width, height]`.\r\n * @typedef {Array.<number>} Size\r\n * @api\r\n */\r\n\r\n\r\n/**\r\n * Returns a buffered size.\r\n * @param {module:ol/size~Size} size Size.\r\n * @param {number} num The amount by which to buffer.\r\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\r\n * @return {module:ol/size~Size} The buffered size.\r\n */\r\nexport function buffer(size, num, opt_size) {\r\n  if (opt_size === undefined) {\r\n    opt_size = [0, 0];\r\n  }\r\n  opt_size[0] = size[0] + 2 * num;\r\n  opt_size[1] = size[1] + 2 * num;\r\n  return opt_size;\r\n}\r\n\r\n\r\n/**\r\n * Determines if a size has a positive area.\r\n * @param {module:ol/size~Size} size The size to test.\r\n * @return {boolean} The size has a positive area.\r\n */\r\nexport function hasArea(size) {\r\n  return size[0] > 0 && size[1] > 0;\r\n}\r\n\r\n\r\n/**\r\n * Returns a size scaled by a ratio. The result will be an array of integers.\r\n * @param {module:ol/size~Size} size Size.\r\n * @param {number} ratio Ratio.\r\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\r\n * @return {module:ol/size~Size} The scaled size.\r\n */\r\nexport function scale(size, ratio, opt_size) {\r\n  if (opt_size === undefined) {\r\n    opt_size = [0, 0];\r\n  }\r\n  opt_size[0] = (size[0] * ratio + 0.5) | 0;\r\n  opt_size[1] = (size[1] * ratio + 0.5) | 0;\r\n  return opt_size;\r\n}\r\n\r\n\r\n/**\r\n * Returns an `module:ol/size~Size` array for the passed in number (meaning: square) or\r\n * `module:ol/size~Size` array.\r\n * (meaning: non-square),\r\n * @param {number|module:ol/size~Size} size Width and height.\r\n * @param {module:ol/size~Size=} opt_size Optional reusable size array.\r\n * @return {module:ol/size~Size} Size.\r\n * @api\r\n */\r\nexport function toSize(size, opt_size) {\r\n  if (Array.isArray(size)) {\r\n    return size;\r\n  } else {\r\n    if (opt_size === undefined) {\r\n      opt_size = [size, size];\r\n    } else {\r\n      opt_size[0] = opt_size[1] = /** @type {number} */ (size);\r\n    }\r\n    return opt_size;\r\n  }\r\n}\r\n"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,SAAS,MAAM,CAAC,IAAI,EAAE,GAAG,EAAE,QAAQ,EAAE;EAC1C,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;GACnB;EACD,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EAChC,QAAQ,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC;EAChC,OAAO,QAAQ,CAAC;CACjB;;;;;;;;AAQD,OAAO,SAAS,OAAO,CAAC,IAAI,EAAE;EAC5B,OAAO,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;CACnC;;;;;;;;;;AAUD,OAAO,SAAS,KAAK,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,EAAE;EAC3C,IAAI,QAAQ,KAAK,SAAS,EAAE;IAC1B,QAAQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;GACnB;EACD,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1C,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,KAAK,GAAG,GAAG,CAAC,GAAG,CAAC,CAAC;EAC1C,OAAO,QAAQ,CAAC;CACjB;;;;;;;;;;;;AAYD,OAAO,SAAS,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE;EACrC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;IACvB,OAAO,IAAI,CAAC;GACb,MAAM;IACL,IAAI,QAAQ,KAAK,SAAS,EAAE;MAC1B,QAAQ,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;KACzB,MAAM;MACL,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,yBAAyB,CAAC,IAAI,CAAC,CAAC;KAC1D;IACD,OAAO,QAAQ,CAAC;GACjB;CACF;"}