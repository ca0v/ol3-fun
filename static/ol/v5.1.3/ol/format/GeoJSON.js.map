{"version":3,"file":"GeoJSON.js","sources":["../../../src/ol/format/GeoJSON.js"],"sourcesContent":["/**\r\n * @module ol/format/GeoJSON\r\n */\r\n// TODO: serialize dataProjection as crs member when writing\r\n// see https://github.com/openlayers/openlayers/issues/2078\r\n\r\nimport {assert} from '../asserts.js';\r\nimport Feature from '../Feature.js';\r\nimport {transformWithOptions} from '../format/Feature.js';\r\nimport JSONFeature from '../format/JSONFeature.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {assign, isEmpty} from '../obj.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/proj~ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {module:ol/proj~ProjectionLike} [featureProjection] Projection for features read or\r\n * written by the format.  Options passed to read or write methods will take precedence.\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n * @property {boolean} [extractGeometryName=false] Certain GeoJSON providers include\r\n * the geometry_name field in the feature GeoJSON. If set to `true` the GeoJSON reader\r\n * will look for that field to set the geometry name. If both this field is set to `true`\r\n * and a `geometryName` is provided, the `geometryName` will take precedence.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the GeoJSON format.\r\n *\r\n  * @api\r\n */\r\nclass GeoJSON extends JSONFeature {\r\n\r\n  /**\r\n   * @param {module:ol/format/GeoJSON~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ?\r\n        options.dataProjection : 'EPSG:4326');\r\n\r\n    if (options.featureProjection) {\r\n      this.defaultFeatureProjection = getProjection(options.featureProjection);\r\n    }\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n\r\n    /**\r\n     * Look for the geometry name in the feature GeoJSON\r\n     * @type {boolean|undefined}\r\n     * @private\r\n     */\r\n    this.extractGeometryName_ = options.extractGeometryName;\r\n\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeatureFromObject(object, opt_options) {\r\n    /**\r\n     * @type {GeoJSONFeature}\r\n     */\r\n    let geoJSONFeature = null;\r\n    if (object.type === 'Feature') {\r\n      geoJSONFeature = /** @type {GeoJSONFeature} */ (object);\r\n    } else {\r\n      geoJSONFeature = /** @type {GeoJSONFeature} */ ({\r\n        type: 'Feature',\r\n        geometry: /** @type {GeoJSONGeometry|GeoJSONGeometryCollection} */ (object)\r\n      });\r\n    }\r\n\r\n    const geometry = readGeometry(geoJSONFeature.geometry, opt_options);\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    } else if (this.extractGeometryName_ && geoJSONFeature.geometry_name !== undefined) {\r\n      feature.setGeometryName(geoJSONFeature.geometry_name);\r\n    }\r\n    feature.setGeometry(geometry);\r\n    if (geoJSONFeature.id !== undefined) {\r\n      feature.setId(geoJSONFeature.id);\r\n    }\r\n    if (geoJSONFeature.properties) {\r\n      feature.setProperties(geoJSONFeature.properties);\r\n    }\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeaturesFromObject(object, opt_options) {\r\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\r\n    /** @type {Array.<module:ol/Feature>} */\r\n    let features = null;\r\n    if (geoJSONObject.type === 'FeatureCollection') {\r\n      const geoJSONFeatureCollection = /** @type {GeoJSONFeatureCollection} */ (object);\r\n      features = [];\r\n      const geoJSONFeatures = geoJSONFeatureCollection.features;\r\n      for (let i = 0, ii = geoJSONFeatures.length; i < ii; ++i) {\r\n        features.push(this.readFeatureFromObject(geoJSONFeatures[i], opt_options));\r\n      }\r\n    } else {\r\n      features = [this.readFeatureFromObject(object, opt_options)];\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readGeometryFromObject(object, opt_options) {\r\n    return readGeometry(/** @type {GeoJSONGeometry} */ (object), opt_options);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readProjectionFromObject(object) {\r\n    const geoJSONObject = /** @type {GeoJSONObject} */ (object);\r\n    const crs = geoJSONObject.crs;\r\n    let projection;\r\n    if (crs) {\r\n      if (crs.type == 'name') {\r\n        projection = getProjection(crs.properties.name);\r\n      } else {\r\n        assert(false, 36); // Unknown SRS type\r\n      }\r\n    } else {\r\n      projection = this.dataProjection;\r\n    }\r\n    return (\r\n      /** @type {module:ol/proj/Projection} */ (projection)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a GeoJSON Feature object.\r\n   *\r\n   * @param {module:ol/Feature} feature Feature.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {GeoJSONFeature} Object.\r\n   * @override\r\n   * @api\r\n   */\r\n  writeFeatureObject(feature, opt_options) {\r\n    opt_options = this.adaptOptions(opt_options);\r\n\r\n    const object = /** @type {GeoJSONFeature} */ ({\r\n      'type': 'Feature'\r\n    });\r\n    const id = feature.getId();\r\n    if (id !== undefined) {\r\n      object.id = id;\r\n    }\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object.geometry = writeGeometry(geometry, opt_options);\r\n    } else {\r\n      object.geometry = null;\r\n    }\r\n    const properties = feature.getProperties();\r\n    delete properties[feature.getGeometryName()];\r\n    if (!isEmpty(properties)) {\r\n      object.properties = properties;\r\n    } else {\r\n      object.properties = null;\r\n    }\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a GeoJSON object.\r\n   *\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {GeoJSONFeatureCollection} GeoJSON Object.\r\n   * @override\r\n   * @api\r\n   */\r\n  writeFeaturesObject(features, opt_options) {\r\n    opt_options = this.adaptOptions(opt_options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], opt_options));\r\n    }\r\n    return /** @type {GeoJSONFeatureCollection} */ ({\r\n      type: 'FeatureCollection',\r\n      features: objects\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a GeoJSON object.\r\n   *\r\n   * @param {module:ol/geom/Geometry} geometry Geometry.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {GeoJSONGeometry|GeoJSONGeometryCollection} Object.\r\n   * @override\r\n   * @api\r\n   */\r\n  writeGeometryObject(geometry, opt_options) {\r\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, function(GeoJSONObject): module:ol/geom/Geometry>}\r\n */\r\nconst GEOMETRY_READERS = {\r\n  'Point': readPointGeometry,\r\n  'LineString': readLineStringGeometry,\r\n  'Polygon': readPolygonGeometry,\r\n  'MultiPoint': readMultiPointGeometry,\r\n  'MultiLineString': readMultiLineStringGeometry,\r\n  'MultiPolygon': readMultiPolygonGeometry,\r\n  'GeometryCollection': readGeometryCollectionGeometry\r\n};\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, function(module:ol/geom/Geometry, module:ol/format/Feature~WriteOptions=): (GeoJSONGeometry|GeoJSONGeometryCollection)>}\r\n */\r\nconst GEOMETRY_WRITERS = {\r\n  'Point': writePointGeometry,\r\n  'LineString': writeLineStringGeometry,\r\n  'Polygon': writePolygonGeometry,\r\n  'MultiPoint': writeMultiPointGeometry,\r\n  'MultiLineString': writeMultiLineStringGeometry,\r\n  'MultiPolygon': writeMultiPolygonGeometry,\r\n  'GeometryCollection': writeGeometryCollectionGeometry,\r\n  'Circle': writeEmptyGeometryCollectionGeometry\r\n};\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry|GeoJSONGeometryCollection} object Object.\r\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n * @return {module:ol/geom/Geometry} Geometry.\r\n */\r\nfunction readGeometry(object, opt_options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  const geometryReader = GEOMETRY_READERS[object.type];\r\n  return (\r\n    /** @type {module:ol/geom/Geometry} */ (transformWithOptions(geometryReader(object), false, opt_options))\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometryCollection} object Object.\r\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n * @return {module:ol/geom/GeometryCollection} Geometry collection.\r\n */\r\nfunction readGeometryCollectionGeometry(object, opt_options) {\r\n  const geometries = object.geometries.map(\r\n    /**\r\n     * @param {GeoJSONGeometry} geometry Geometry.\r\n     * @return {module:ol/geom/Geometry} geometry Geometry.\r\n     */\r\n    function(geometry) {\r\n      return readGeometry(geometry, opt_options);\r\n    });\r\n  return new GeometryCollection(geometries);\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry} object Object.\r\n * @return {module:ol/geom/Point} Point.\r\n */\r\nfunction readPointGeometry(object) {\r\n  return new Point(object.coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry} object Object.\r\n * @return {module:ol/geom/LineString} LineString.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  return new LineString(object.coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry} object Object.\r\n * @return {module:ol/geom/MultiLineString} MultiLineString.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  return new MultiLineString(object.coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry} object Object.\r\n * @return {module:ol/geom/MultiPoint} MultiPoint.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  return new MultiPoint(object.coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry} object Object.\r\n * @return {module:ol/geom/MultiPolygon} MultiPolygon.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  return new MultiPolygon(object.coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {GeoJSONGeometry} object Object.\r\n * @return {module:ol/geom/Polygon} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  return new Polygon(object.coordinates);\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry|GeoJSONGeometryCollection} GeoJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, opt_options) {\r\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\r\n  return geometryWriter(/** @type {module:ol/geom/Geometry} */ (\r\n    transformWithOptions(geometry, true, opt_options)), opt_options);\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @return {GeoJSONGeometryCollection} Empty GeoJSON geometry collection.\r\n */\r\nfunction writeEmptyGeometryCollectionGeometry(geometry) {\r\n  return /** @type {GeoJSONGeometryCollection} */ ({\r\n    type: 'GeometryCollection',\r\n    geometries: []\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/GeometryCollection} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometryCollection} GeoJSON geometry collection.\r\n */\r\nfunction writeGeometryCollectionGeometry(geometry, opt_options) {\r\n  const geometries = geometry.getGeometriesArray().map(function(geometry) {\r\n    const options = assign({}, opt_options);\r\n    delete options.featureProjection;\r\n    return writeGeometry(geometry, options);\r\n  });\r\n  return /** @type {GeoJSONGeometryCollection} */ ({\r\n    type: 'GeometryCollection',\r\n    geometries: geometries\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/LineString} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(geometry, opt_options) {\r\n  return /** @type {GeoJSONGeometry} */ ({\r\n    type: 'LineString',\r\n    coordinates: geometry.getCoordinates()\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/MultiLineString} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\r\n  return /** @type {GeoJSONGeometry} */ ({\r\n    type: 'MultiLineString',\r\n    coordinates: geometry.getCoordinates()\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/MultiPoint} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(geometry, opt_options) {\r\n  return /** @type {GeoJSONGeometry} */ ({\r\n    type: 'MultiPoint',\r\n    coordinates: geometry.getCoordinates()\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/MultiPolygon} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\r\n  let right;\r\n  if (opt_options) {\r\n    right = opt_options.rightHanded;\r\n  }\r\n  return /** @type {GeoJSONGeometry} */ ({\r\n    type: 'MultiPolygon',\r\n    coordinates: geometry.getCoordinates(right)\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Point} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, opt_options) {\r\n  return /** @type {GeoJSONGeometry} */ ({\r\n    type: 'Point',\r\n    coordinates: geometry.getCoordinates()\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Polygon} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {GeoJSONGeometry} GeoJSON geometry.\r\n */\r\nfunction writePolygonGeometry(geometry, opt_options) {\r\n  let right;\r\n  if (opt_options) {\r\n    right = opt_options.rightHanded;\r\n  }\r\n  return /** @type {GeoJSONGeometry} */ ({\r\n    type: 'Polygon',\r\n    coordinates: geometry.getCoordinates(right)\r\n  });\r\n}\r\n\r\n\r\nexport default GeoJSON;\r\n"],"names":["const","super","let","this"],"mappings":"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"}