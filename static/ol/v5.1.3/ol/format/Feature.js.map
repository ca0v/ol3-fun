{"version":3,"file":"Feature.js","sources":["../../../src/ol/format/Feature.js"],"sourcesContent":["/**\r\n * @module ol/format/Feature\r\n */\r\nimport Geometry from '../geom/Geometry.js';\r\nimport {assign} from '../obj.js';\r\nimport {get as getProjection, equivalent as equivalentProjection, transformExtent} from '../proj.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} ReadOptions\r\n * @property {module:ol/proj~ProjectionLike} dataProjection Projection of the data we are reading.\r\n * If not provided, the projection will be derived from the data (where possible) or\r\n * the `dataProjection` of the format is assigned (where set). If the projection\r\n * can not be derived from the data and if no `dataProjection` is set for a format,\r\n * the features will not be reprojected.\r\n * @property {module:ol/extent~Extent} extent Tile extent of the tile being read. This is only used and\r\n * required for {@link module:ol/format/MVT}.\r\n * @property {module:ol/proj~ProjectionLike} featureProjection Projection of the feature geometries\r\n * created by the format reader. If not provided, features will be returned in the\r\n * `dataProjection`.\r\n */\r\n\r\n\r\n/**\r\n * @typedef {Object} WriteOptions\r\n * @property {module:ol/proj~ProjectionLike} dataProjection Projection of the data we are writing.\r\n * If not provided, the `dataProjection` of the format is assigned (where set).\r\n * If no `dataProjection` is set for a format, the features will be returned\r\n * in the `featureProjection`.\r\n * @property {module:ol/proj~ProjectionLike} featureProjection Projection of the feature geometries\r\n * that will be serialized by the format writer. If not provided, geometries are assumed\r\n * to be in the `dataProjection` if that is set; in other words, they are not transformed.\r\n * @property {boolean} [rightHanded] When writing geometries, follow the right-hand\r\n * rule for linear ring orientation.  This means that polygons will have counter-clockwise\r\n * exterior rings and clockwise interior rings.  By default, coordinates are serialized\r\n * as they are provided at construction.  If `true`, the right-hand rule will\r\n * be applied.  If `false`, the left-hand rule will be applied (clockwise for\r\n * exterior and counter-clockwise for interior rings).  Note that not all\r\n * formats support this.  The GeoJSON format does use this property when writing\r\n * geometries.\r\n * @property {number} [decimals] Maximum number of decimal places for coordinates.\r\n * Coordinates are stored internally as floats, but floating-point arithmetic can create\r\n * coordinates with a large number of decimal places, not generally wanted on output.\r\n * Set a number here to round coordinates. Can also be used to ensure that\r\n * coordinates read in can be written back out with the same number of decimals.\r\n * Default is no rounding.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for feature formats.\r\n * {module:ol/format/Feature~FeatureFormat} subclasses provide the ability to decode and encode\r\n * {@link module:ol/Feature~Feature} objects from a variety of commonly used geospatial\r\n * file formats.  See the documentation for each format for more details.\r\n *\r\n * @abstract\r\n * @api\r\n */\r\nclass FeatureFormat {\r\n  constructor() {\r\n\r\n    /**\r\n     * @protected\r\n     * @type {module:ol/proj/Projection}\r\n     */\r\n    this.dataProjection = null;\r\n\r\n    /**\r\n     * @protected\r\n     * @type {module:ol/proj/Projection}\r\n     */\r\n    this.defaultFeatureProjection = null;\r\n\r\n  }\r\n\r\n  /**\r\n   * Adds the data projection to the read options.\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @return {module:ol/format/Feature~ReadOptions|undefined} Options.\r\n   * @protected\r\n   */\r\n  getReadOptions(source, opt_options) {\r\n    let options;\r\n    if (opt_options) {\r\n      options = {\r\n        dataProjection: opt_options.dataProjection ?\r\n          opt_options.dataProjection : this.readProjection(source),\r\n        featureProjection: opt_options.featureProjection\r\n      };\r\n    }\r\n    return this.adaptOptions(options);\r\n  }\r\n\r\n  /**\r\n   * Sets the `dataProjection` on the options, if no `dataProjection`\r\n   * is set.\r\n   * @param {module:ol/format/Feature~WriteOptions|module:ol/format/Feature~ReadOptions|undefined} options\r\n   *     Options.\r\n   * @protected\r\n   * @return {module:ol/format/Feature~WriteOptions|module:ol/format/Feature~ReadOptions|undefined}\r\n   *     Updated options.\r\n   */\r\n  adaptOptions(options) {\r\n    return assign({\r\n      dataProjection: this.dataProjection,\r\n      featureProjection: this.defaultFeatureProjection\r\n    }, options);\r\n  }\r\n\r\n  /**\r\n   * Get the extent from the source of the last {@link readFeatures} call.\r\n   * @return {module:ol/extent~Extent} Tile extent.\r\n   */\r\n  getLastExtent() {\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @return {module:ol/format/FormatType} Format.\r\n   */\r\n  getType() {}\r\n\r\n  /**\r\n   * Read a single feature from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {module:ol/Feature} Feature.\r\n   */\r\n  readFeature(source, opt_options) {}\r\n\r\n  /**\r\n   * Read all features from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Node|ArrayBuffer|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {Array.<module:ol/Feature>} Features.\r\n   */\r\n  readFeatures(source, opt_options) {}\r\n\r\n  /**\r\n   * Read a single geometry from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {module:ol/geom/Geometry} Geometry.\r\n   */\r\n  readGeometry(source, opt_options) {}\r\n\r\n  /**\r\n   * Read the projection from a source.\r\n   *\r\n   * @abstract\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @return {module:ol/proj/Projection} Projection.\r\n   */\r\n  readProjection(source) {}\r\n\r\n  /**\r\n   * Encode a feature in this format.\r\n   *\r\n   * @abstract\r\n   * @param {module:ol/Feature} feature Feature.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Result.\r\n   */\r\n  writeFeature(feature, opt_options) {}\r\n\r\n  /**\r\n   * Encode an array of features in this format.\r\n   *\r\n   * @abstract\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Result.\r\n   */\r\n  writeFeatures(features, opt_options) {}\r\n\r\n  /**\r\n   * Write a single geometry in this format.\r\n   *\r\n   * @abstract\r\n   * @param {module:ol/geom/Geometry} geometry Geometry.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Result.\r\n   */\r\n  writeGeometry(geometry, opt_options) {}\r\n}\r\n\r\nexport default FeatureFormat;\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry|module:ol/extent~Extent} geometry Geometry.\r\n * @param {boolean} write Set to true for writing, false for reading.\r\n * @param {(module:ol/format/Feature~WriteOptions|module:ol/format/Feature~ReadOptions)=} opt_options\r\n *     Options.\r\n * @return {module:ol/geom/Geometry|module:ol/extent~Extent} Transformed geometry.\r\n */\r\nexport function transformWithOptions(geometry, write, opt_options) {\r\n  const featureProjection = opt_options ?\r\n    getProjection(opt_options.featureProjection) : null;\r\n  const dataProjection = opt_options ?\r\n    getProjection(opt_options.dataProjection) : null;\r\n  /**\r\n   * @type {module:ol/geom/Geometry|module:ol/extent~Extent}\r\n   */\r\n  let transformed;\r\n  if (featureProjection && dataProjection &&\r\n      !equivalentProjection(featureProjection, dataProjection)) {\r\n    if (geometry instanceof Geometry) {\r\n      transformed = (write ? geometry.clone() : geometry).transform(\r\n        write ? featureProjection : dataProjection,\r\n        write ? dataProjection : featureProjection);\r\n    } else {\r\n      // FIXME this is necessary because GML treats extents\r\n      // as geometries\r\n      transformed = transformExtent(\r\n        geometry,\r\n        dataProjection,\r\n        featureProjection);\r\n    }\r\n  } else {\r\n    transformed = geometry;\r\n  }\r\n  if (write && opt_options && opt_options.decimals !== undefined) {\r\n    const power = Math.pow(10, opt_options.decimals);\r\n    // if decimals option on write, round each coordinate appropriately\r\n    /**\r\n     * @param {Array.<number>} coordinates Coordinates.\r\n     * @return {Array.<number>} Transformed coordinates.\r\n     */\r\n    const transform = function(coordinates) {\r\n      for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n        coordinates[i] = Math.round(coordinates[i] * power) / power;\r\n      }\r\n      return coordinates;\r\n    };\r\n    if (transformed === geometry) {\r\n      transformed = transformed.clone();\r\n    }\r\n    transformed.applyTransform(transform);\r\n  }\r\n  return transformed;\r\n}\r\n"],"names":["let","const"],"mappings":"AAAA;;;AAGA,OAAO,QAAQ,MAAM,qBAAqB,CAAC;AAC3C,QAAQ,MAAM,OAAO,WAAW,CAAC;AACjC,QAAQ,GAAG,IAAI,aAAa,EAAE,UAAU,IAAI,oBAAoB,EAAE,eAAe,OAAO,YAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwDrG,IAAM,aAAa,GACjB,sBAAW,GAAG;;EAEd,AAAE;GACD,AAAE;GACF,AAAE;GACF,AAAE;EACH,AAAE,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;;EAE7B,AAAE;GACD,AAAE;GACF,AAAE;GACF,AAAE;EACH,AAAE,IAAI,CAAC,wBAAwB,GAAG,IAAI,CAAC;;AAEzC,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,yCAAc,CAAC,MAAM,EAAE,WAAW,EAAE;EACpC,AAAEA,GAAG,CAAC,OAAO,CAAC;EACd,AAAE,IAAI,WAAW,EAAE;IACjB,AAAE,OAAO,GAAG;MACV,AAAE,cAAc,EAAE,WAAW,CAAC,cAAc;QAC1C,AAAE,WAAW,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC;MAC5D,AAAE,iBAAiB,EAAE,WAAW,CAAC,iBAAiB;IACpD,AAAE,CAAC,CAAC;EACN,AAAE,CAAC;EACH,AAAE,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;AACtC,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE,IAAI,AAAE;CACR,AAAE;CACF,AAAE;CACF,AAAE,IAAI,AAAE;CACR,AAAE;AACH,wBAAE,qCAAY,CAAC,OAAO,EAAE;EACtB,AAAE,OAAO,MAAM,CAAC;IACd,AAAE,cAAc,EAAE,IAAI,CAAC,cAAc;IACrC,AAAE,iBAAiB,EAAE,IAAI,CAAC,wBAAwB;EACpD,AAAE,CAAC,EAAE,OAAO,CAAC,CAAC;AAChB,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,uCAAa,GAAG;EAChB,AAAE,OAAO,IAAI,CAAC;AAChB,AAAE,EAAC;;AAEH,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,2BAAO,GAAG,GAAE;;AAEd,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,mCAAW,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;AAErC,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,qCAAY,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;AAEtC,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,qCAAY,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;AAEtC,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,yCAAc,CAAC,MAAM,EAAE,GAAE;;AAE3B,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,qCAAY,CAAC,OAAO,EAAE,WAAW,EAAE,GAAE;;AAEvC,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,uCAAa,CAAC,QAAQ,EAAE,WAAW,EAAE,GAAE;;AAEzC,AAAE;CACD,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;CACF,AAAE;AACH,wBAAE,uCAAa,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE,CACxC;;AAED,eAAe,aAAa,CAAC;;;;;;;;;AAS7B,OAAO,SAAS,oBAAoB,CAAC,QAAQ,EAAE,KAAK,EAAE,WAAW,EAAE;EACjEC,GAAK,CAAC,iBAAiB,GAAG,WAAW;IACnC,aAAa,CAAC,WAAW,CAAC,iBAAiB,CAAC,GAAG,IAAI,CAAC;EACtDA,GAAK,CAAC,cAAc,GAAG,WAAW;IAChC,aAAa,CAAC,WAAW,CAAC,cAAc,CAAC,GAAG,IAAI,CAAC;;;;EAInDD,GAAG,CAAC,WAAW,CAAC;EAChB,IAAI,iBAAiB,IAAI,cAAc;MACnC,CAAC,oBAAoB,CAAC,iBAAiB,EAAE,cAAc,CAAC,EAAE;IAC5D,IAAI,QAAQ,YAAY,QAAQ,EAAE;MAChC,WAAW,GAAG,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,EAAE,GAAG,QAAQ,CAAC,CAAC,SAAS;QAC3D,KAAK,GAAG,iBAAiB,GAAG,cAAc;QAC1C,KAAK,GAAG,cAAc,GAAG,iBAAiB,CAAC,CAAC;KAC/C,MAAM;;;MAGL,WAAW,GAAG,eAAe;QAC3B,QAAQ;QACR,cAAc;QACd,iBAAiB,CAAC,CAAC;KACtB;GACF,MAAM;IACL,WAAW,GAAG,QAAQ,CAAC;GACxB;EACD,IAAI,KAAK,IAAI,WAAW,IAAI,WAAW,CAAC,QAAQ,KAAK,SAAS,EAAE;IAC9DC,GAAK,CAAC,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,WAAW,CAAC,QAAQ,CAAC,CAAC;;;;;;IAMjDA,GAAK,CAAC,SAAS,GAAG,SAAS,WAAW,EAAE;MACtC,KAAKD,GAAG,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,GAAG,EAAE,EAAE,EAAE,CAAC,EAAE;QACpD,WAAW,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;OAC7D;MACD,OAAO,WAAW,CAAC;KACpB,CAAC;IACF,IAAI,WAAW,KAAK,QAAQ,EAAE;MAC5B,WAAW,GAAG,WAAW,CAAC,KAAK,EAAE,CAAC;KACnC;IACD,WAAW,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC;GACvC;EACD,OAAO,WAAW,CAAC;CACpB;"}