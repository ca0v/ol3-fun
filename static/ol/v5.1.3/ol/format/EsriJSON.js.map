{"version":3,"file":"EsriJSON.js","sources":["../../../src/ol/format/EsriJSON.js"],"sourcesContent":["/**\r\n * @module ol/format/EsriJSON\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {assert} from '../asserts.js';\r\nimport {containsExtent} from '../extent.js';\r\nimport {transformWithOptions} from '../format/Feature.js';\r\nimport JSONFeature from '../format/JSONFeature.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport LinearRing from '../geom/LinearRing.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {deflateCoordinates} from '../geom/flat/deflate.js';\r\nimport {linearRingIsClockwise} from '../geom/flat/orient.js';\r\nimport {assign, isEmpty} from '../obj.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Object.<module:ol/geom/GeometryType, function(EsriJSONGeometry): module:ol/geom/Geometry>}\r\n */\r\nconst GEOMETRY_READERS = {};\r\nGEOMETRY_READERS[GeometryType.POINT] = readPointGeometry;\r\nGEOMETRY_READERS[GeometryType.LINE_STRING] = readLineStringGeometry;\r\nGEOMETRY_READERS[GeometryType.POLYGON] = readPolygonGeometry;\r\nGEOMETRY_READERS[GeometryType.MULTI_POINT] = readMultiPointGeometry;\r\nGEOMETRY_READERS[GeometryType.MULTI_LINE_STRING] = readMultiLineStringGeometry;\r\nGEOMETRY_READERS[GeometryType.MULTI_POLYGON] = readMultiPolygonGeometry;\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, function(module:ol/geom/Geometry, module:ol/format/Feature~WriteOptions=): (EsriJSONGeometry)>}\r\n */\r\nconst GEOMETRY_WRITERS = {};\r\nGEOMETRY_WRITERS[GeometryType.POINT] = writePointGeometry;\r\nGEOMETRY_WRITERS[GeometryType.LINE_STRING] = writeLineStringGeometry;\r\nGEOMETRY_WRITERS[GeometryType.POLYGON] = writePolygonGeometry;\r\nGEOMETRY_WRITERS[GeometryType.MULTI_POINT] = writeMultiPointGeometry;\r\nGEOMETRY_WRITERS[GeometryType.MULTI_LINE_STRING] = writeMultiLineStringGeometry;\r\nGEOMETRY_WRITERS[GeometryType.MULTI_POLYGON] = writeMultiPolygonGeometry;\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {string} [geometryName] Geometry name to use when creating features.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading and writing data in the EsriJSON format.\r\n *\r\n * @api\r\n */\r\nclass EsriJSON extends JSONFeature {\r\n\r\n  /**\r\n   * @param {module:ol/format/EsriJSON~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    super();\r\n\r\n    /**\r\n     * Name of the geometry attribute for features.\r\n     * @type {string|undefined}\r\n     * @private\r\n     */\r\n    this.geometryName_ = options.geometryName;\r\n\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeatureFromObject(object, opt_options) {\r\n    const esriJSONFeature = /** @type {EsriJSONFeature} */ (object);\r\n    const geometry = readGeometry(esriJSONFeature.geometry, opt_options);\r\n    const feature = new Feature();\r\n    if (this.geometryName_) {\r\n      feature.setGeometryName(this.geometryName_);\r\n    }\r\n    feature.setGeometry(geometry);\r\n    if (opt_options && opt_options.idField &&\r\n      esriJSONFeature.attributes[opt_options.idField]) {\r\n      feature.setId(/** @type {number} */(esriJSONFeature.attributes[opt_options.idField]));\r\n    }\r\n    if (esriJSONFeature.attributes) {\r\n      feature.setProperties(esriJSONFeature.attributes);\r\n    }\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeaturesFromObject(object, opt_options) {\r\n    const esriJSONObject = /** @type {EsriJSONObject} */ (object);\r\n    const options = opt_options ? opt_options : {};\r\n    if (esriJSONObject.features) {\r\n      const esriJSONFeatureCollection = /** @type {EsriJSONFeatureCollection} */ (object);\r\n      /** @type {Array.<module:ol/Feature>} */\r\n      const features = [];\r\n      const esriJSONFeatures = esriJSONFeatureCollection.features;\r\n      options.idField = object.objectIdFieldName;\r\n      for (let i = 0, ii = esriJSONFeatures.length; i < ii; ++i) {\r\n        features.push(this.readFeatureFromObject(esriJSONFeatures[i], options));\r\n      }\r\n      return features;\r\n    } else {\r\n      return [this.readFeatureFromObject(object, options)];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readGeometryFromObject(object, opt_options) {\r\n    return readGeometry(/** @type {EsriJSONGeometry} */(object), opt_options);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readProjectionFromObject(object) {\r\n    const esriJSONObject = /** @type {EsriJSONObject} */ (object);\r\n    if (esriJSONObject.spatialReference && esriJSONObject.spatialReference.wkid) {\r\n      const crs = esriJSONObject.spatialReference.wkid;\r\n      return getProjection('EPSG:' + crs);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Encode a geometry as a EsriJSON object.\r\n   *\r\n   * @param {module:ol/geom/Geometry} geometry Geometry.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {EsriJSONGeometry} Object.\r\n   * @override\r\n   * @api\r\n   */\r\n  writeGeometryObject(geometry, opt_options) {\r\n    return writeGeometry(geometry, this.adaptOptions(opt_options));\r\n  }\r\n\r\n  /**\r\n   * Encode a feature as a esriJSON Feature object.\r\n   *\r\n   * @param {module:ol/Feature} feature Feature.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {Object} Object.\r\n   * @override\r\n   * @api\r\n   */\r\n  writeFeatureObject(feature, opt_options) {\r\n    opt_options = this.adaptOptions(opt_options);\r\n    const object = {};\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      object['geometry'] = writeGeometry(geometry, opt_options);\r\n      if (opt_options && opt_options.featureProjection) {\r\n        object['geometry']['spatialReference'] = /** @type {EsriJSONCRS} */({\r\n          wkid: getProjection(opt_options.featureProjection).getCode().split(':').pop()\r\n        });\r\n      }\r\n    }\r\n    const properties = feature.getProperties();\r\n    delete properties[feature.getGeometryName()];\r\n    if (!isEmpty(properties)) {\r\n      object['attributes'] = properties;\r\n    } else {\r\n      object['attributes'] = {};\r\n    }\r\n    return object;\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as a EsriJSON object.\r\n   *\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {Object} EsriJSON Object.\r\n   * @override\r\n   * @api\r\n   */\r\n  writeFeaturesObject(features, opt_options) {\r\n    opt_options = this.adaptOptions(opt_options);\r\n    const objects = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      objects.push(this.writeFeatureObject(features[i], opt_options));\r\n    }\r\n    return /** @type {EsriJSONFeatureCollection} */ ({\r\n      'features': objects\r\n    });\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n * @return {module:ol/geom/Geometry} Geometry.\r\n */\r\nfunction readGeometry(object, opt_options) {\r\n  if (!object) {\r\n    return null;\r\n  }\r\n  /** @type {module:ol/geom/GeometryType} */\r\n  let type;\r\n  if (typeof object.x === 'number' && typeof object.y === 'number') {\r\n    type = GeometryType.POINT;\r\n  } else if (object.points) {\r\n    type = GeometryType.MULTI_POINT;\r\n  } else if (object.paths) {\r\n    if (object.paths.length === 1) {\r\n      type = GeometryType.LINE_STRING;\r\n    } else {\r\n      type = GeometryType.MULTI_LINE_STRING;\r\n    }\r\n  } else if (object.rings) {\r\n    const layout = getGeometryLayout(object);\r\n    const rings = convertRings(object.rings, layout);\r\n    object = /** @type {EsriJSONGeometry} */(assign({}, object));\r\n    if (rings.length === 1) {\r\n      type = GeometryType.POLYGON;\r\n      object.rings = rings[0];\r\n    } else {\r\n      type = GeometryType.MULTI_POLYGON;\r\n      object.rings = rings;\r\n    }\r\n  }\r\n  const geometryReader = GEOMETRY_READERS[type];\r\n  return (\r\n    /** @type {module:ol/geom/Geometry} */ (transformWithOptions(geometryReader(object), false, opt_options))\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * Determines inner and outer rings.\r\n * Checks if any polygons in this array contain any other polygons in this\r\n * array. It is used for checking for holes.\r\n * Logic inspired by: https://github.com/Esri/terraformer-arcgis-parser\r\n * @param {Array.<!Array.<!Array.<number>>>} rings Rings.\r\n * @param {module:ol/geom/GeometryLayout} layout Geometry layout.\r\n * @return {Array.<!Array.<!Array.<number>>>} Transformed rings.\r\n */\r\nfunction convertRings(rings, layout) {\r\n  const flatRing = [];\r\n  const outerRings = [];\r\n  const holes = [];\r\n  let i, ii;\r\n  for (i = 0, ii = rings.length; i < ii; ++i) {\r\n    flatRing.length = 0;\r\n    deflateCoordinates(flatRing, 0, rings[i], layout.length);\r\n    // is this ring an outer ring? is it clockwise?\r\n    const clockwise = linearRingIsClockwise(flatRing, 0,\r\n      flatRing.length, layout.length);\r\n    if (clockwise) {\r\n      outerRings.push([rings[i]]);\r\n    } else {\r\n      holes.push(rings[i]);\r\n    }\r\n  }\r\n  while (holes.length) {\r\n    const hole = holes.shift();\r\n    let matched = false;\r\n    // loop over all outer rings and see if they contain our hole.\r\n    for (i = outerRings.length - 1; i >= 0; i--) {\r\n      const outerRing = outerRings[i][0];\r\n      const containsHole = containsExtent(\r\n        new LinearRing(outerRing).getExtent(),\r\n        new LinearRing(hole).getExtent()\r\n      );\r\n      if (containsHole) {\r\n        // the hole is contained push it into our polygon\r\n        outerRings[i].push(hole);\r\n        matched = true;\r\n        break;\r\n      }\r\n    }\r\n    if (!matched) {\r\n      // no outer rings contain this hole turn it into and outer\r\n      // ring (reverse it)\r\n      outerRings.push([hole.reverse()]);\r\n    }\r\n  }\r\n  return outerRings;\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/Geometry} Point.\r\n */\r\nfunction readPointGeometry(object) {\r\n  let point;\r\n  if (object.m !== undefined && object.z !== undefined) {\r\n    point = new Point([object.x, object.y, object.z, object.m],\r\n      GeometryLayout.XYZM);\r\n  } else if (object.z !== undefined) {\r\n    point = new Point([object.x, object.y, object.z],\r\n      GeometryLayout.XYZ);\r\n  } else if (object.m !== undefined) {\r\n    point = new Point([object.x, object.y, object.m],\r\n      GeometryLayout.XYM);\r\n  } else {\r\n    point = new Point([object.x, object.y]);\r\n  }\r\n  return point;\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/Geometry} LineString.\r\n */\r\nfunction readLineStringGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new LineString(object.paths[0], layout);\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/Geometry} MultiLineString.\r\n */\r\nfunction readMultiLineStringGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiLineString(object.paths, layout);\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/GeometryLayout} The geometry layout to use.\r\n */\r\nfunction getGeometryLayout(object) {\r\n  let layout = GeometryLayout.XY;\r\n  if (object.hasZ === true && object.hasM === true) {\r\n    layout = GeometryLayout.XYZM;\r\n  } else if (object.hasZ === true) {\r\n    layout = GeometryLayout.XYZ;\r\n  } else if (object.hasM === true) {\r\n    layout = GeometryLayout.XYM;\r\n  }\r\n  return layout;\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/Geometry} MultiPoint.\r\n */\r\nfunction readMultiPointGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiPoint(object.points, layout);\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/Geometry} MultiPolygon.\r\n */\r\nfunction readMultiPolygonGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new MultiPolygon(\r\n    /** @type {Array.<Array.<Array.<Array.<number>>>>} */(object.rings),\r\n    layout);\r\n}\r\n\r\n\r\n/**\r\n * @param {EsriJSONGeometry} object Object.\r\n * @return {module:ol/geom/Geometry} Polygon.\r\n */\r\nfunction readPolygonGeometry(object) {\r\n  const layout = getGeometryLayout(object);\r\n  return new Polygon(object.rings, layout);\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONGeometry} EsriJSON geometry.\r\n */\r\nfunction writePointGeometry(geometry, opt_options) {\r\n  const coordinates = /** @type {module:ol/geom/Point} */ (geometry).getCoordinates();\r\n  let esriJSON;\r\n  const layout = /** @type {module:ol/geom/Point} */ (geometry).getLayout();\r\n  if (layout === GeometryLayout.XYZ) {\r\n    esriJSON = /** @type {EsriJSONPoint} */ ({\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      z: coordinates[2]\r\n    });\r\n  } else if (layout === GeometryLayout.XYM) {\r\n    esriJSON = /** @type {EsriJSONPoint} */ ({\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      m: coordinates[2]\r\n    });\r\n  } else if (layout === GeometryLayout.XYZM) {\r\n    esriJSON = /** @type {EsriJSONPoint} */ ({\r\n      x: coordinates[0],\r\n      y: coordinates[1],\r\n      z: coordinates[2],\r\n      m: coordinates[3]\r\n    });\r\n  } else if (layout === GeometryLayout.XY) {\r\n    esriJSON = /** @type {EsriJSONPoint} */ ({\r\n      x: coordinates[0],\r\n      y: coordinates[1]\r\n    });\r\n  } else {\r\n    assert(false, 34); // Invalid geometry layout\r\n  }\r\n  return /** @type {EsriJSONGeometry} */ (esriJSON);\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/SimpleGeometry} geometry Geometry.\r\n * @return {Object} Object with boolean hasZ and hasM keys.\r\n */\r\nfunction getHasZM(geometry) {\r\n  const layout = geometry.getLayout();\r\n  return {\r\n    hasZ: (layout === GeometryLayout.XYZ ||\r\n      layout === GeometryLayout.XYZM),\r\n    hasM: (layout === GeometryLayout.XYM ||\r\n      layout === GeometryLayout.XYZM)\r\n  };\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONPolyline} EsriJSON geometry.\r\n */\r\nfunction writeLineStringGeometry(geometry, opt_options) {\r\n  const hasZM = getHasZM(/** @type {module:ol/geom/LineString} */(geometry));\r\n  return (\r\n    /** @type {EsriJSONPolyline} */ {\r\n      hasZ: hasZM.hasZ,\r\n      hasM: hasZM.hasM,\r\n      paths: [\r\n        /** @type {module:ol/geom/LineString} */ (geometry).getCoordinates()\r\n      ]\r\n    }\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONPolygon} EsriJSON geometry.\r\n */\r\nfunction writePolygonGeometry(geometry, opt_options) {\r\n  // Esri geometries use the left-hand rule\r\n  const hasZM = getHasZM(/** @type {module:ol/geom/Polygon} */(geometry));\r\n  return (\r\n    /** @type {EsriJSONPolygon} */ {\r\n      hasZ: hasZM.hasZ,\r\n      hasM: hasZM.hasM,\r\n      rings: /** @type {module:ol/geom/Polygon} */ (geometry).getCoordinates(false)\r\n    }\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONPolyline} EsriJSON geometry.\r\n */\r\nfunction writeMultiLineStringGeometry(geometry, opt_options) {\r\n  const hasZM = getHasZM(/** @type {module:ol/geom/MultiLineString} */(geometry));\r\n  return (\r\n    /** @type {EsriJSONPolyline} */ {\r\n      hasZ: hasZM.hasZ,\r\n      hasM: hasZM.hasM,\r\n      paths: /** @type {module:ol/geom/MultiLineString} */ (geometry).getCoordinates()\r\n    }\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONMultipoint} EsriJSON geometry.\r\n */\r\nfunction writeMultiPointGeometry(geometry, opt_options) {\r\n  const hasZM = getHasZM(/** @type {module:ol/geom/MultiPoint} */(geometry));\r\n  return (\r\n    /** @type {EsriJSONMultipoint} */ {\r\n      hasZ: hasZM.hasZ,\r\n      hasM: hasZM.hasM,\r\n      points: /** @type {module:ol/geom/MultiPoint} */ (geometry).getCoordinates()\r\n    }\r\n  );\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONPolygon} EsriJSON geometry.\r\n */\r\nfunction writeMultiPolygonGeometry(geometry, opt_options) {\r\n  const hasZM = getHasZM(/** @type {module:ol/geom/MultiPolygon} */(geometry));\r\n  const coordinates = /** @type {module:ol/geom/MultiPolygon} */ (geometry).getCoordinates(false);\r\n  const output = [];\r\n  for (let i = 0; i < coordinates.length; i++) {\r\n    for (let x = coordinates[i].length - 1; x >= 0; x--) {\r\n      output.push(coordinates[i][x]);\r\n    }\r\n  }\r\n  return /** @type {EsriJSONPolygon} */ ({\r\n    hasZ: hasZM.hasZ,\r\n    hasM: hasZM.hasM,\r\n    rings: output\r\n  });\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Geometry} geometry Geometry.\r\n * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n * @return {EsriJSONGeometry} EsriJSON geometry.\r\n */\r\nfunction writeGeometry(geometry, opt_options) {\r\n  const geometryWriter = GEOMETRY_WRITERS[geometry.getType()];\r\n  return geometryWriter(/** @type {module:ol/geom/Geometry} */(\r\n    transformWithOptions(geometry, true, opt_options)), opt_options);\r\n}\r\n\r\n\r\nexport default EsriJSON;\r\n"],"names":["const","super","let","this"],"mappings":"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"}