{"version":3,"file":"IGC.js","sources":["../../../src/ol/format/IGC.js"],"sourcesContent":["/**\r\n * @module ol/format/IGC\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {transformWithOptions} from '../format/Feature.js';\r\nimport TextFeature from '../format/TextFeature.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n/**\r\n * IGC altitude/z. One of 'barometric', 'gps', 'none'.\r\n * @enum {string}\r\n */\r\nconst IGCZ = {\r\n  BAROMETRIC: 'barometric',\r\n  GPS: 'gps',\r\n  NONE: 'none'\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst B_RECORD_RE =\r\n    /^B(\\d{2})(\\d{2})(\\d{2})(\\d{2})(\\d{5})([NS])(\\d{3})(\\d{5})([EW])([AV])(\\d{5})(\\d{5})/;\r\n\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst H_RECORD_RE = /^H.([A-Z]{3}).*?:(.*)/;\r\n\r\n\r\n/**\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst HFDTE_RECORD_RE = /^HFDTE(\\d{2})(\\d{2})(\\d{2})/;\r\n\r\n\r\n/**\r\n * A regular expression matching the newline characters `\\r\\n`, `\\r` and `\\n`.\r\n *\r\n * @const\r\n * @type {RegExp}\r\n */\r\nconst NEWLINE_RE = /\\r\\n|\\r|\\n/;\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {IGCZ|string} [altitudeMode='none'] Altitude mode. Possible\r\n * values are `'barometric'`, `'gps'`, and `'none'`.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for `*.igc` flight recording files.\r\n *\r\n * As IGC sources contain a single feature,\r\n * {@link module:ol/format/IGC~IGC#readFeatures} will return the feature in an\r\n * array\r\n *\r\n * @api\r\n */\r\nclass IGC extends TextFeature {\r\n\r\n  /**\r\n   * @param {module:ol/format/IGC~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    super();\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    this.dataProjection = getProjection('EPSG:4326');\r\n\r\n    /**\r\n     * @private\r\n     * @type {IGCZ}\r\n     */\r\n    this.altitudeMode_ = options.altitudeMode ? options.altitudeMode : IGCZ.NONE;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeatureFromText(text, opt_options) {\r\n    const altitudeMode = this.altitudeMode_;\r\n    const lines = text.split(NEWLINE_RE);\r\n    /** @type {Object.<string, string>} */\r\n    const properties = {};\r\n    const flatCoordinates = [];\r\n    let year = 2000;\r\n    let month = 0;\r\n    let day = 1;\r\n    let lastDateTime = -1;\r\n    let i, ii;\r\n    for (i = 0, ii = lines.length; i < ii; ++i) {\r\n      const line = lines[i];\r\n      let m;\r\n      if (line.charAt(0) == 'B') {\r\n        m = B_RECORD_RE.exec(line);\r\n        if (m) {\r\n          const hour = parseInt(m[1], 10);\r\n          const minute = parseInt(m[2], 10);\r\n          const second = parseInt(m[3], 10);\r\n          let y = parseInt(m[4], 10) + parseInt(m[5], 10) / 60000;\r\n          if (m[6] == 'S') {\r\n            y = -y;\r\n          }\r\n          let x = parseInt(m[7], 10) + parseInt(m[8], 10) / 60000;\r\n          if (m[9] == 'W') {\r\n            x = -x;\r\n          }\r\n          flatCoordinates.push(x, y);\r\n          if (altitudeMode != IGCZ.NONE) {\r\n            let z;\r\n            if (altitudeMode == IGCZ.GPS) {\r\n              z = parseInt(m[11], 10);\r\n            } else if (altitudeMode == IGCZ.BAROMETRIC) {\r\n              z = parseInt(m[12], 10);\r\n            } else {\r\n              z = 0;\r\n            }\r\n            flatCoordinates.push(z);\r\n          }\r\n          let dateTime = Date.UTC(year, month, day, hour, minute, second);\r\n          // Detect UTC midnight wrap around.\r\n          if (dateTime < lastDateTime) {\r\n            dateTime = Date.UTC(year, month, day + 1, hour, minute, second);\r\n          }\r\n          flatCoordinates.push(dateTime / 1000);\r\n          lastDateTime = dateTime;\r\n        }\r\n      } else if (line.charAt(0) == 'H') {\r\n        m = HFDTE_RECORD_RE.exec(line);\r\n        if (m) {\r\n          day = parseInt(m[1], 10);\r\n          month = parseInt(m[2], 10) - 1;\r\n          year = 2000 + parseInt(m[3], 10);\r\n        } else {\r\n          m = H_RECORD_RE.exec(line);\r\n          if (m) {\r\n            properties[m[1]] = m[2].trim();\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if (flatCoordinates.length === 0) {\r\n      return null;\r\n    }\r\n    const layout = altitudeMode == IGCZ.NONE ? GeometryLayout.XYM : GeometryLayout.XYZM;\r\n    const lineString = new LineString(flatCoordinates, layout);\r\n    const feature = new Feature(transformWithOptions(lineString, false, opt_options));\r\n    feature.setProperties(properties);\r\n    return feature;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeaturesFromText(text, opt_options) {\r\n    const feature = this.readFeatureFromText(text, opt_options);\r\n    if (feature) {\r\n      return [feature];\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  writeFeatureText(feature, opt_options) {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  writeFeaturesText(features, opt_options) {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  writeGeometryText(geometry, opt_options) {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  readGeometryFromText(text, opt_options) {}\r\n}\r\n\r\nexport default IGC;\r\n"],"names":["const","super","let"],"mappings":"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"}