{"version":3,"file":"TopoJSON.js","sources":["../../../src/ol/format/TopoJSON.js"],"sourcesContent":["/**\r\n * @module ol/format/TopoJSON\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {transformWithOptions} from '../format/Feature.js';\r\nimport JSONFeature from '../format/JSONFeature.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport {get as getProjection} from '../proj.js';\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {module:ol/proj~ProjectionLike} [dataProjection='EPSG:4326'] Default data projection.\r\n * @property {string} [layerName] Set the name of the TopoJSON topology\r\n * `objects`'s children as feature property with the specified name. This means\r\n * that when set to `'layer'`, a topology like\r\n * ```\r\n * {\r\n *   \"type\": \"Topology\",\r\n *   \"objects\": {\r\n *     \"example\": {\r\n *       \"type\": \"GeometryCollection\",\r\n *       \"geometries\": []\r\n *     }\r\n *   }\r\n * }\r\n * ```\r\n * will result in features that have a property `'layer'` set to `'example'`.\r\n * When not set, no property will be added to features.\r\n * @property {Array.<string>} [layers] Names of the TopoJSON topology's\r\n * `objects`'s children to read features from.  If not provided, features will\r\n * be read from all children.\r\n */\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Feature format for reading data in the TopoJSON format.\r\n *\r\n * @api\r\n */\r\nclass TopoJSON extends JSONFeature {\r\n\r\n  /**\r\n   * @param {module:ol/format/TopoJSON~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    super();\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n    /**\r\n     * @private\r\n     * @type {string|undefined}\r\n     */\r\n    this.layerName_ = options.layerName;\r\n\r\n    /**\r\n     * @private\r\n     * @type {Array.<string>}\r\n     */\r\n    this.layers_ = options.layers ? options.layers : null;\r\n\r\n    /**\r\n     * @inheritDoc\r\n     */\r\n    this.dataProjection = getProjection(\r\n      options.dataProjection ?\r\n        options.dataProjection : 'EPSG:4326');\r\n\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeaturesFromObject(object, opt_options) {\r\n    if (object.type == 'Topology') {\r\n      const topoJSONTopology = /** @type {TopoJSONTopology} */ (object);\r\n      let transform, scale = null, translate = null;\r\n      if (topoJSONTopology.transform) {\r\n        transform = topoJSONTopology.transform;\r\n        scale = transform.scale;\r\n        translate = transform.translate;\r\n      }\r\n      const arcs = topoJSONTopology.arcs;\r\n      if (transform) {\r\n        transformArcs(arcs, scale, translate);\r\n      }\r\n      /** @type {Array.<module:ol/Feature>} */\r\n      const features = [];\r\n      const topoJSONFeatures = topoJSONTopology.objects;\r\n      const property = this.layerName_;\r\n      let feature;\r\n      for (const objectName in topoJSONFeatures) {\r\n        if (this.layers_ && this.layers_.indexOf(objectName) == -1) {\r\n          continue;\r\n        }\r\n        if (topoJSONFeatures[objectName].type === 'GeometryCollection') {\r\n          feature = /** @type {TopoJSONGeometryCollection} */ (topoJSONFeatures[objectName]);\r\n          features.push.apply(features, readFeaturesFromGeometryCollection(\r\n            feature, arcs, scale, translate, property, objectName, opt_options));\r\n        } else {\r\n          feature = /** @type {TopoJSONGeometry} */ (topoJSONFeatures[objectName]);\r\n          features.push(readFeatureFromGeometry(\r\n            feature, arcs, scale, translate, property, objectName, opt_options));\r\n        }\r\n      }\r\n      return features;\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readProjectionFromObject(object) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  writeFeatureObject(feature, opt_options) {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  writeFeaturesObject(features, opt_options) {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @inheritDoc\r\n   */\r\n  writeGeometryObject(geometry, opt_options) {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @override\r\n   */\r\n  readGeometryFromObject() {}\r\n\r\n  /**\r\n   * Not implemented.\r\n   * @override\r\n   */\r\n  readFeatureFromObject() {}\r\n}\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, function(TopoJSONGeometry, Array, ...Array): module:ol/geom/Geometry>}\r\n */\r\nconst GEOMETRY_READERS = {\r\n  'Point': readPointGeometry,\r\n  'LineString': readLineStringGeometry,\r\n  'Polygon': readPolygonGeometry,\r\n  'MultiPoint': readMultiPointGeometry,\r\n  'MultiLineString': readMultiLineStringGeometry,\r\n  'MultiPolygon': readMultiPolygonGeometry\r\n};\r\n\r\n\r\n/**\r\n * Concatenate arcs into a coordinate array.\r\n * @param {Array.<number>} indices Indices of arcs to concatenate.  Negative\r\n *     values indicate arcs need to be reversed.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs (already\r\n *     transformed).\r\n * @return {Array.<module:ol/coordinate~Coordinate>} Coordinates array.\r\n */\r\nfunction concatenateArcs(indices, arcs) {\r\n  /** @type {Array.<module:ol/coordinate~Coordinate>} */\r\n  const coordinates = [];\r\n  let index, arc;\r\n  for (let i = 0, ii = indices.length; i < ii; ++i) {\r\n    index = indices[i];\r\n    if (i > 0) {\r\n      // splicing together arcs, discard last point\r\n      coordinates.pop();\r\n    }\r\n    if (index >= 0) {\r\n      // forward arc\r\n      arc = arcs[index];\r\n    } else {\r\n      // reverse arc\r\n      arc = arcs[~index].slice().reverse();\r\n    }\r\n    coordinates.push.apply(coordinates, arc);\r\n  }\r\n  // provide fresh copies of coordinate arrays\r\n  for (let j = 0, jj = coordinates.length; j < jj; ++j) {\r\n    coordinates[j] = coordinates[j].slice();\r\n  }\r\n  return coordinates;\r\n}\r\n\r\n\r\n/**\r\n * Create a point from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON object.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n * @return {module:ol/geom/Point} Geometry.\r\n */\r\nfunction readPointGeometry(object, scale, translate) {\r\n  const coordinates = object.coordinates;\r\n  if (scale && translate) {\r\n    transformVertex(coordinates, scale, translate);\r\n  }\r\n  return new Point(coordinates);\r\n}\r\n\r\n\r\n/**\r\n * Create a multi-point from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON object.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n * @return {module:ol/geom/MultiPoint} Geometry.\r\n */\r\nfunction readMultiPointGeometry(object, scale, translate) {\r\n  const coordinates = object.coordinates;\r\n  if (scale && translate) {\r\n    for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n      transformVertex(coordinates[i], scale, translate);\r\n    }\r\n  }\r\n  return new MultiPoint(coordinates);\r\n}\r\n\r\n\r\n/**\r\n * Create a linestring from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON object.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @return {module:ol/geom/LineString} Geometry.\r\n */\r\nfunction readLineStringGeometry(object, arcs) {\r\n  const coordinates = concatenateArcs(object.arcs, arcs);\r\n  return new LineString(coordinates);\r\n}\r\n\r\n\r\n/**\r\n * Create a multi-linestring from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON object.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @return {module:ol/geom/MultiLineString} Geometry.\r\n */\r\nfunction readMultiLineStringGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object.arcs.length; i < ii; ++i) {\r\n    coordinates[i] = concatenateArcs(object.arcs[i], arcs);\r\n  }\r\n  return new MultiLineString(coordinates);\r\n}\r\n\r\n\r\n/**\r\n * Create a polygon from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON object.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @return {module:ol/geom/Polygon} Geometry.\r\n */\r\nfunction readPolygonGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object.arcs.length; i < ii; ++i) {\r\n    coordinates[i] = concatenateArcs(object.arcs[i], arcs);\r\n  }\r\n  return new Polygon(coordinates);\r\n}\r\n\r\n\r\n/**\r\n * Create a multi-polygon from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON object.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @return {module:ol/geom/MultiPolygon} Geometry.\r\n */\r\nfunction readMultiPolygonGeometry(object, arcs) {\r\n  const coordinates = [];\r\n  for (let i = 0, ii = object.arcs.length; i < ii; ++i) {\r\n    // for each polygon\r\n    const polyArray = object.arcs[i];\r\n    const ringCoords = [];\r\n    for (let j = 0, jj = polyArray.length; j < jj; ++j) {\r\n      // for each ring\r\n      ringCoords[j] = concatenateArcs(polyArray[j], arcs);\r\n    }\r\n    coordinates[i] = ringCoords;\r\n  }\r\n  return new MultiPolygon(coordinates);\r\n}\r\n\r\n\r\n/**\r\n * Create features from a TopoJSON GeometryCollection object.\r\n *\r\n * @param {TopoJSONGeometryCollection} collection TopoJSON Geometry\r\n *     object.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\r\n *     object to.\r\n * @param {string} name Name of the `Topology`'s child object.\r\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n * @return {Array.<module:ol/Feature>} Array of features.\r\n */\r\nfunction readFeaturesFromGeometryCollection(collection, arcs, scale, translate, property, name, opt_options) {\r\n  const geometries = collection.geometries;\r\n  const features = [];\r\n  for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n    features[i] = readFeatureFromGeometry(\r\n      geometries[i], arcs, scale, translate, property, name, opt_options);\r\n  }\r\n  return features;\r\n}\r\n\r\n\r\n/**\r\n * Create a feature from a TopoJSON geometry object.\r\n *\r\n * @param {TopoJSONGeometry} object TopoJSON geometry object.\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n * @param {string|undefined} property Property to set the `GeometryCollection`'s parent\r\n *     object to.\r\n * @param {string} name Name of the `Topology`'s child object.\r\n * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n * @return {module:ol/Feature} Feature.\r\n */\r\nfunction readFeatureFromGeometry(object, arcs, scale, translate, property, name, opt_options) {\r\n  let geometry;\r\n  const type = object.type;\r\n  const geometryReader = GEOMETRY_READERS[type];\r\n  if ((type === 'Point') || (type === 'MultiPoint')) {\r\n    geometry = geometryReader(object, scale, translate);\r\n  } else {\r\n    geometry = geometryReader(object, arcs);\r\n  }\r\n  const feature = new Feature();\r\n  feature.setGeometry(/** @type {module:ol/geom/Geometry} */ (\r\n    transformWithOptions(geometry, false, opt_options)));\r\n  if (object.id !== undefined) {\r\n    feature.setId(object.id);\r\n  }\r\n  let properties = object.properties;\r\n  if (property) {\r\n    if (!properties) {\r\n      properties = {};\r\n    }\r\n    properties[property] = name;\r\n  }\r\n  if (properties) {\r\n    feature.setProperties(properties);\r\n  }\r\n  return feature;\r\n}\r\n\r\n\r\n/**\r\n * Apply a linear transform to array of arcs.  The provided array of arcs is\r\n * modified in place.\r\n *\r\n * @param {Array.<Array.<module:ol/coordinate~Coordinate>>} arcs Array of arcs.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n */\r\nfunction transformArcs(arcs, scale, translate) {\r\n  for (let i = 0, ii = arcs.length; i < ii; ++i) {\r\n    transformArc(arcs[i], scale, translate);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Apply a linear transform to an arc.  The provided arc is modified in place.\r\n *\r\n * @param {Array.<module:ol/coordinate~Coordinate>} arc Arc.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n */\r\nfunction transformArc(arc, scale, translate) {\r\n  let x = 0;\r\n  let y = 0;\r\n  for (let i = 0, ii = arc.length; i < ii; ++i) {\r\n    const vertex = arc[i];\r\n    x += vertex[0];\r\n    y += vertex[1];\r\n    vertex[0] = x;\r\n    vertex[1] = y;\r\n    transformVertex(vertex, scale, translate);\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Apply a linear transform to a vertex.  The provided vertex is modified in\r\n * place.\r\n *\r\n * @param {module:ol/coordinate~Coordinate} vertex Vertex.\r\n * @param {Array.<number>} scale Scale for each dimension.\r\n * @param {Array.<number>} translate Translation for each dimension.\r\n */\r\nfunction transformVertex(vertex, scale, translate) {\r\n  vertex[0] = vertex[0] * scale[0] + translate[0];\r\n  vertex[1] = vertex[1] * scale[1] + translate[1];\r\n}\r\n\r\n\r\nexport default TopoJSON;\r\n"],"names":["super","const","let","this"],"mappings":"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"}