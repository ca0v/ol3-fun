{"version":3,"file":"JSONFeature.js","sources":["../../../src/ol/format/JSONFeature.js"],"sourcesContent":["/**\r\n * @module ol/format/JSONFeature\r\n */\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport FormatType from '../format/FormatType.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for JSON feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass JSONFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getType() {\r\n    return FormatType.JSON;\r\n  }\r\n\r\n  /**\r\n   * Read a feature.  Only works for a single feature. Use `readFeatures` to\r\n   * read a feature collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {module:ol/Feature} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, opt_options) {\r\n    return this.readFeatureFromObject(\r\n      getObject(source), this.getReadOptions(source, opt_options));\r\n  }\r\n\r\n  /**\r\n   * Read all features.  Works with both a single feature and a feature\r\n   * collection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {Array.<module:ol/Feature>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, opt_options) {\r\n    return this.readFeaturesFromObject(\r\n      getObject(source), this.getReadOptions(source, opt_options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @protected\r\n   * @return {module:ol/Feature} Feature.\r\n   */\r\n  readFeatureFromObject(object, opt_options) {}\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @protected\r\n   * @return {Array.<module:ol/Feature>} Features.\r\n   */\r\n  readFeaturesFromObject(object, opt_options) {}\r\n\r\n  /**\r\n   * Read a geometry.\r\n   *\r\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {module:ol/geom/Geometry} Geometry.\r\n   * @api\r\n   */\r\n  readGeometry(source, opt_options) {\r\n    return this.readGeometryFromObject(\r\n      getObject(source), this.getReadOptions(source, opt_options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @protected\r\n   * @return {module:ol/geom/Geometry} Geometry.\r\n   */\r\n  readGeometryFromObject(object, opt_options) {}\r\n\r\n  /**\r\n   * Read the projection.\r\n   *\r\n   * @param {ArrayBuffer|Document|Node|Object|string} source Source.\r\n   * @return {module:ol/proj/Projection} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    return this.readProjectionFromObject(getObject(source));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Object} object Object.\r\n   * @protected\r\n   * @return {module:ol/proj/Projection} Projection.\r\n   */\r\n  readProjectionFromObject(object) {}\r\n\r\n  /**\r\n   * Encode a feature as string.\r\n   *\r\n   * @param {module:ol/Feature} feature Feature.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Encoded feature.\r\n   * @api\r\n   */\r\n  writeFeature(feature, opt_options) {\r\n    return JSON.stringify(this.writeFeatureObject(feature, opt_options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {module:ol/Feature} feature Feature.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeatureObject(feature, opt_options) {}\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Encoded features.\r\n   * @api\r\n   */\r\n  writeFeatures(features, opt_options) {\r\n    return JSON.stringify(this.writeFeaturesObject(features, opt_options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeFeaturesObject(features, opt_options) {}\r\n\r\n  /**\r\n   * Encode a geometry as string.\r\n   *\r\n   * @param {module:ol/geom/Geometry} geometry Geometry.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Encoded geometry.\r\n   * @api\r\n   */\r\n  writeGeometry(geometry, opt_options) {\r\n    return JSON.stringify(this.writeGeometryObject(geometry, opt_options));\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {module:ol/geom/Geometry} geometry Geometry.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {Object} Object.\r\n   */\r\n  writeGeometryObject(geometry, opt_options) {}\r\n}\r\n\r\n\r\n/**\r\n * @param {Document|Node|Object|string} source Source.\r\n * @return {Object} Object.\r\n */\r\nfunction getObject(source) {\r\n  if (typeof source === 'string') {\r\n    const object = JSON.parse(source);\r\n    return object ? /** @type {Object} */ (object) : null;\r\n  } else if (source !== null) {\r\n    return source;\r\n  } else {\r\n    return null;\r\n  }\r\n}\r\n\r\n\r\nexport default JSONFeature;\r\n"],"names":["super","const"],"mappings":"AAAA;;;AAGA,OAAO,aAAa,MAAM,sBAAsB,CAAC;AACjD,OAAO,UAAU,MAAM,yBAAyB,CAAC;;;;;;;;;;AAUjD,IAAM,WAAW,GAAsB;EACrC,oBAAW,GAAG;IACZA,kBAAK,KAAC,CAAC,CAAC;;;;;kDACT;;;;;wBAKD,2BAAO,GAAG;IACR,OAAO,UAAU,CAAC,IAAI,CAAC;IACxB;;;;;;;;;;;wBAWD,mCAAW,CAAC,MAAM,EAAE,WAAW,EAAE;IAC/B,OAAO,IAAI,CAAC,qBAAqB;MAC/B,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAChE;;;;;;;;;;;wBAWD,qCAAY,CAAC,MAAM,EAAE,WAAW,EAAE;IAChC,OAAO,IAAI,CAAC,sBAAsB;MAChC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAChE;;;;;;;;;wBASD,uDAAqB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;;;;;;;;wBAS7C,yDAAsB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;;;;;;;;;wBAU9C,qCAAY,CAAC,MAAM,EAAE,WAAW,EAAE;IAChC,OAAO,IAAI,CAAC,sBAAsB;MAChC,SAAS,CAAC,MAAM,CAAC,EAAE,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;IAChE;;;;;;;;;wBASD,yDAAsB,CAAC,MAAM,EAAE,WAAW,EAAE,GAAE;;;;;;;;;wBAS9C,yCAAc,CAAC,MAAM,EAAE;IACrB,OAAO,IAAI,CAAC,wBAAwB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IACzD;;;;;;;;wBAQD,6DAAwB,CAAC,MAAM,EAAE,GAAE;;;;;;;;;;wBAUnC,qCAAY,CAAC,OAAO,EAAE,WAAW,EAAE;IACjC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IACtE;;;;;;;;wBAQD,iDAAkB,CAAC,OAAO,EAAE,WAAW,EAAE,GAAE;;;;;;;;;;wBAU3C,uCAAa,CAAC,QAAQ,EAAE,WAAW,EAAE;IACnC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IACxE;;;;;;;;wBAQD,mDAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,GAAE;;;;;;;;;;wBAU7C,uCAAa,CAAC,QAAQ,EAAE,WAAW,EAAE;IACnC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;IACxE;;;;;;;;wBAQD,mDAAmB,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE;;;EA7JrB,gBA8JzB;;;;;;;AAOD,SAAS,SAAS,CAAC,MAAM,EAAE;EACzB,IAAI,OAAO,MAAM,KAAK,QAAQ,EAAE;IAC9BC,GAAK,CAAC,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IAClC,OAAO,MAAM,yBAAyB,CAAC,MAAM,CAAC,GAAG,IAAI,CAAC;GACvD,MAAM,IAAI,MAAM,KAAK,IAAI,EAAE;IAC1B,OAAO,MAAM,CAAC;GACf,MAAM;IACL,OAAO,IAAI,CAAC;GACb;CACF;;;AAGD,eAAe,WAAW,CAAC;"}