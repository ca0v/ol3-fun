{"version":3,"file":"WKT.js","sources":["../../../src/ol/format/WKT.js"],"sourcesContent":["/**\r\n * @module ol/format/WKT\r\n */\r\nimport Feature from '../Feature.js';\r\nimport {transformWithOptions} from '../format/Feature.js';\r\nimport TextFeature from '../format/TextFeature.js';\r\nimport GeometryCollection from '../geom/GeometryCollection.js';\r\nimport GeometryType from '../geom/GeometryType.js';\r\nimport GeometryLayout from '../geom/GeometryLayout.js';\r\nimport LineString from '../geom/LineString.js';\r\nimport MultiLineString from '../geom/MultiLineString.js';\r\nimport MultiPoint from '../geom/MultiPoint.js';\r\nimport MultiPolygon from '../geom/MultiPolygon.js';\r\nimport Point from '../geom/Point.js';\r\nimport Polygon from '../geom/Polygon.js';\r\nimport SimpleGeometry from '../geom/SimpleGeometry.js';\r\n\r\n\r\n/**\r\n * @enum {function (new:module:ol/geom/Geometry, Array, module:ol/geom/GeometryLayout)}\r\n */\r\nconst GeometryConstructor = {\r\n  'POINT': Point,\r\n  'LINESTRING': LineString,\r\n  'POLYGON': Polygon,\r\n  'MULTIPOINT': MultiPoint,\r\n  'MULTILINESTRING': MultiLineString,\r\n  'MULTIPOLYGON': MultiPolygon\r\n};\r\n\r\n\r\n/**\r\n * @typedef {Object} Options\r\n * @property {boolean} [splitCollection=false] Whether to split GeometryCollections into\r\n * multiple features on reading.\r\n */\r\n\r\n/**\r\n * @typedef {Object} Token\r\n * @property {number} type\r\n * @property {number|string} [value]\r\n * @property {number} position\r\n */\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst EMPTY = 'EMPTY';\r\n\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst Z = 'Z';\r\n\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst M = 'M';\r\n\r\n\r\n/**\r\n * @const\r\n * @type {string}\r\n */\r\nconst ZM = 'ZM';\r\n\r\n\r\n/**\r\n * @const\r\n * @enum {number}\r\n */\r\nconst TokenType = {\r\n  TEXT: 1,\r\n  LEFT_PAREN: 2,\r\n  RIGHT_PAREN: 3,\r\n  NUMBER: 4,\r\n  COMMA: 5,\r\n  EOF: 6\r\n};\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, string>}\r\n */\r\nconst WKTGeometryType = {};\r\nfor (const type in GeometryType) {\r\n  WKTGeometryType[type] = GeometryType[type].toUpperCase();\r\n}\r\n\r\n\r\n/**\r\n * Class to tokenize a WKT string.\r\n */\r\nclass Lexer {\r\n\r\n  /**\r\n   * @param {string} wkt WKT string.\r\n   */\r\n  constructor(wkt) {\r\n\r\n    /**\r\n     * @type {string}\r\n     */\r\n    this.wkt = wkt;\r\n\r\n    /**\r\n     * @type {number}\r\n     * @private\r\n     */\r\n    this.index_ = -1;\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @return {boolean} Whether the character is alphabetic.\r\n   * @private\r\n   */\r\n  isAlpha_(c) {\r\n    return c >= 'a' && c <= 'z' || c >= 'A' && c <= 'Z';\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @param {boolean=} opt_decimal Whether the string number\r\n   *     contains a dot, i.e. is a decimal number.\r\n   * @return {boolean} Whether the character is numeric.\r\n   * @private\r\n   */\r\n  isNumeric_(c, opt_decimal) {\r\n    const decimal = opt_decimal !== undefined ? opt_decimal : false;\r\n    return c >= '0' && c <= '9' || c == '.' && !decimal;\r\n  }\r\n\r\n  /**\r\n   * @param {string} c Character.\r\n   * @return {boolean} Whether the character is whitespace.\r\n   * @private\r\n   */\r\n  isWhiteSpace_(c) {\r\n    return c == ' ' || c == '\\t' || c == '\\r' || c == '\\n';\r\n  }\r\n\r\n  /**\r\n   * @return {string} Next string character.\r\n   * @private\r\n   */\r\n  nextChar_() {\r\n    return this.wkt.charAt(++this.index_);\r\n  }\r\n\r\n  /**\r\n   * Fetch and return the next token.\r\n   * @return {!module:ol/format/WKT~Token} Next string token.\r\n   */\r\n  nextToken() {\r\n    const c = this.nextChar_();\r\n    const token = {position: this.index_, value: c};\r\n\r\n    if (c == '(') {\r\n      token.type = TokenType.LEFT_PAREN;\r\n    } else if (c == ',') {\r\n      token.type = TokenType.COMMA;\r\n    } else if (c == ')') {\r\n      token.type = TokenType.RIGHT_PAREN;\r\n    } else if (this.isNumeric_(c) || c == '-') {\r\n      token.type = TokenType.NUMBER;\r\n      token.value = this.readNumber_();\r\n    } else if (this.isAlpha_(c)) {\r\n      token.type = TokenType.TEXT;\r\n      token.value = this.readText_();\r\n    } else if (this.isWhiteSpace_(c)) {\r\n      return this.nextToken();\r\n    } else if (c === '') {\r\n      token.type = TokenType.EOF;\r\n    } else {\r\n      throw new Error('Unexpected character: ' + c);\r\n    }\r\n\r\n    return token;\r\n  }\r\n\r\n  /**\r\n   * @return {number} Numeric token value.\r\n   * @private\r\n   */\r\n  readNumber_() {\r\n    let c;\r\n    const index = this.index_;\r\n    let decimal = false;\r\n    let scientificNotation = false;\r\n    do {\r\n      if (c == '.') {\r\n        decimal = true;\r\n      } else if (c == 'e' || c == 'E') {\r\n        scientificNotation = true;\r\n      }\r\n      c = this.nextChar_();\r\n    } while (\r\n      this.isNumeric_(c, decimal) ||\r\n        // if we haven't detected a scientific number before, 'e' or 'E'\r\n        // hint that we should continue to read\r\n        !scientificNotation && (c == 'e' || c == 'E') ||\r\n        // once we know that we have a scientific number, both '-' and '+'\r\n        // are allowed\r\n        scientificNotation && (c == '-' || c == '+')\r\n    );\r\n    return parseFloat(this.wkt.substring(index, this.index_--));\r\n  }\r\n\r\n  /**\r\n   * @return {string} String token value.\r\n   * @private\r\n   */\r\n  readText_() {\r\n    let c;\r\n    const index = this.index_;\r\n    do {\r\n      c = this.nextChar_();\r\n    } while (this.isAlpha_(c));\r\n    return this.wkt.substring(index, this.index_--).toUpperCase();\r\n  }\r\n}\r\n\r\n/**\r\n * Class to parse the tokens from the WKT string.\r\n */\r\nclass Parser {\r\n\r\n  /**\r\n   * @param {module:ol/format/WKT~Lexer} lexer The lexer.\r\n   */\r\n  constructor(lexer) {\r\n\r\n    /**\r\n     * @type {module:ol/format/WKT~Lexer}\r\n     * @private\r\n     */\r\n    this.lexer_ = lexer;\r\n\r\n    /**\r\n     * @type {module:ol/format/WKT~Token}\r\n     * @private\r\n     */\r\n    this.token_;\r\n\r\n    /**\r\n     * @type {module:ol/geom/GeometryLayout}\r\n     * @private\r\n     */\r\n    this.layout_ = GeometryLayout.XY;\r\n  }\r\n\r\n  /**\r\n   * Fetch the next token form the lexer and replace the active token.\r\n   * @private\r\n   */\r\n  consume_() {\r\n    this.token_ = this.lexer_.nextToken();\r\n  }\r\n\r\n  /**\r\n   * Tests if the given type matches the type of the current token.\r\n   * @param {module:ol/format/WKT~TokenType} type Token type.\r\n   * @return {boolean} Whether the token matches the given type.\r\n   */\r\n  isTokenType(type) {\r\n    const isMatch = this.token_.type == type;\r\n    return isMatch;\r\n  }\r\n\r\n  /**\r\n   * If the given type matches the current token, consume it.\r\n   * @param {module:ol/format/WKT~TokenType} type Token type.\r\n   * @return {boolean} Whether the token matches the given type.\r\n   */\r\n  match(type) {\r\n    const isMatch = this.isTokenType(type);\r\n    if (isMatch) {\r\n      this.consume_();\r\n    }\r\n    return isMatch;\r\n  }\r\n\r\n  /**\r\n   * Try to parse the tokens provided by the lexer.\r\n   * @return {module:ol/geom/Geometry} The geometry.\r\n   */\r\n  parse() {\r\n    this.consume_();\r\n    const geometry = this.parseGeometry_();\r\n    return geometry;\r\n  }\r\n\r\n  /**\r\n   * Try to parse the dimensional info.\r\n   * @return {module:ol/geom/GeometryLayout} The layout.\r\n   * @private\r\n   */\r\n  parseGeometryLayout_() {\r\n    let layout = GeometryLayout.XY;\r\n    const dimToken = this.token_;\r\n    if (this.isTokenType(TokenType.TEXT)) {\r\n      const dimInfo = dimToken.value;\r\n      if (dimInfo === Z) {\r\n        layout = GeometryLayout.XYZ;\r\n      } else if (dimInfo === M) {\r\n        layout = GeometryLayout.XYM;\r\n      } else if (dimInfo === ZM) {\r\n        layout = GeometryLayout.XYZM;\r\n      }\r\n      if (layout !== GeometryLayout.XY) {\r\n        this.consume_();\r\n      }\r\n    }\r\n    return layout;\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<module:ol/geom/Geometry>} A collection of geometries.\r\n   * @private\r\n   */\r\n  parseGeometryCollectionText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const geometries = [];\r\n      do {\r\n        geometries.push(this.parseGeometry_());\r\n      } while (this.match(TokenType.COMMA));\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return geometries;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return [];\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {Array.<number>} All values in a point.\r\n   * @private\r\n   */\r\n  parsePointText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePoint_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return null;\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} All points in a linestring.\r\n   * @private\r\n   */\r\n  parseLineStringText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePointList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return [];\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} All points in a polygon.\r\n   * @private\r\n   */\r\n  parsePolygonText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parseLineStringTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return [];\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} All points in a multipoint.\r\n   * @private\r\n   */\r\n  parseMultiPointText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      let coordinates;\r\n      if (this.token_.type == TokenType.LEFT_PAREN) {\r\n        coordinates = this.parsePointTextList_();\r\n      } else {\r\n        coordinates = this.parsePointList_();\r\n      }\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return [];\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} All linestring points\r\n   *                                        in a multilinestring.\r\n   * @private\r\n   */\r\n  parseMultiLineStringText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parseLineStringTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return [];\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} All polygon points in a multipolygon.\r\n   * @private\r\n   */\r\n  parseMultiPolygonText_() {\r\n    if (this.match(TokenType.LEFT_PAREN)) {\r\n      const coordinates = this.parsePolygonTextList_();\r\n      if (this.match(TokenType.RIGHT_PAREN)) {\r\n        return coordinates;\r\n      }\r\n    } else if (this.isEmptyGeometry_()) {\r\n      return [];\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<number>} A point.\r\n   * @private\r\n   */\r\n  parsePoint_() {\r\n    const coordinates = [];\r\n    const dimensions = this.layout_.length;\r\n    for (let i = 0; i < dimensions; ++i) {\r\n      const token = this.token_;\r\n      if (this.match(TokenType.NUMBER)) {\r\n        coordinates.push(token.value);\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n    if (coordinates.length == dimensions) {\r\n      return coordinates;\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePointList_() {\r\n    const coordinates = [this.parsePoint_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePoint_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePointTextList_() {\r\n    const coordinates = [this.parsePointText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePointText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parseLineStringTextList_() {\r\n    const coordinates = [this.parseLineStringText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parseLineStringText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {!Array.<!Array.<number>>} An array of points.\r\n   * @private\r\n   */\r\n  parsePolygonTextList_() {\r\n    const coordinates = [this.parsePolygonText_()];\r\n    while (this.match(TokenType.COMMA)) {\r\n      coordinates.push(this.parsePolygonText_());\r\n    }\r\n    return coordinates;\r\n  }\r\n\r\n  /**\r\n   * @return {boolean} Whether the token implies an empty geometry.\r\n   * @private\r\n   */\r\n  isEmptyGeometry_() {\r\n    const isEmpty = this.isTokenType(TokenType.TEXT) &&\r\n        this.token_.value == EMPTY;\r\n    if (isEmpty) {\r\n      this.consume_();\r\n    }\r\n    return isEmpty;\r\n  }\r\n\r\n  /**\r\n   * Create an error message for an unexpected token error.\r\n   * @return {string} Error message.\r\n   * @private\r\n   */\r\n  formatErrorMessage_() {\r\n    return 'Unexpected `' + this.token_.value + '` at position ' +\r\n        this.token_.position + ' in `' + this.lexer_.wkt + '`';\r\n  }\r\n\r\n  /**\r\n   * @return {!module:ol/geom/Geometry} The geometry.\r\n   * @private\r\n   */\r\n  parseGeometry_() {\r\n    const token = this.token_;\r\n    if (this.match(TokenType.TEXT)) {\r\n      const geomType = token.value;\r\n      this.layout_ = this.parseGeometryLayout_();\r\n      if (geomType == 'GEOMETRYCOLLECTION') {\r\n        const geometries = this.parseGeometryCollectionText_();\r\n        return new GeometryCollection(geometries);\r\n      } else {\r\n        const ctor = GeometryConstructor[geomType];\r\n        if (!ctor) {\r\n          throw new Error('Invalid geometry type: ' + geomType);\r\n        }\r\n\r\n        let coordinates;\r\n        switch (geomType) {\r\n          case 'POINT': {\r\n            coordinates = this.parsePointText_();\r\n            break;\r\n          }\r\n          case 'LINESTRING': {\r\n            coordinates = this.parseLineStringText_();\r\n            break;\r\n          }\r\n          case 'POLYGON': {\r\n            coordinates = this.parsePolygonText_();\r\n            break;\r\n          }\r\n          case 'MULTIPOINT': {\r\n            coordinates = this.parseMultiPointText_();\r\n            break;\r\n          }\r\n          case 'MULTILINESTRING': {\r\n            coordinates = this.parseMultiLineStringText_();\r\n            break;\r\n          }\r\n          case 'MULTIPOLYGON': {\r\n            coordinates = this.parseMultiPolygonText_();\r\n            break;\r\n          }\r\n          default: {\r\n            throw new Error('Invalid geometry type: ' + geomType);\r\n          }\r\n        }\r\n\r\n        if (!coordinates) {\r\n          if (ctor === GeometryConstructor['POINT']) {\r\n            coordinates = [NaN, NaN];\r\n          } else {\r\n            coordinates = [];\r\n          }\r\n        }\r\n        return new ctor(coordinates, this.layout_);\r\n      }\r\n    }\r\n    throw new Error(this.formatErrorMessage_());\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @classdesc\r\n * Geometry format for reading and writing data in the `WellKnownText` (WKT)\r\n * format.\r\n *\r\n * @api\r\n */\r\nclass WKT extends TextFeature {\r\n\r\n  /**\r\n   * @param {module:ol/format/WKT~Options=} opt_options Options.\r\n   */\r\n  constructor(opt_options) {\r\n    super();\r\n\r\n    const options = opt_options ? opt_options : {};\r\n\r\n\r\n    /**\r\n     * Split GeometryCollection into multiple features.\r\n     * @type {boolean}\r\n     * @private\r\n     */\r\n    this.splitCollection_ = options.splitCollection !== undefined ?\r\n      options.splitCollection : false;\r\n\r\n  }\r\n\r\n  /**\r\n   * Parse a WKT string.\r\n   * @param {string} wkt WKT string.\r\n   * @return {module:ol/geom/Geometry|undefined}\r\n   *     The geometry created.\r\n   * @private\r\n   */\r\n  parse_(wkt) {\r\n    const lexer = new Lexer(wkt);\r\n    const parser = new Parser(lexer);\r\n    return parser.parse();\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeatureFromText(text, opt_options) {\r\n    const geom = this.readGeometryFromText(text, opt_options);\r\n    if (geom) {\r\n      const feature = new Feature();\r\n      feature.setGeometry(geom);\r\n      return feature;\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readFeaturesFromText(text, opt_options) {\r\n    let geometries = [];\r\n    const geometry = this.readGeometryFromText(text, opt_options);\r\n    if (this.splitCollection_ &&\r\n        geometry.getType() == GeometryType.GEOMETRY_COLLECTION) {\r\n      geometries = (/** @type {module:ol/geom/GeometryCollection} */ (geometry))\r\n        .getGeometriesArray();\r\n    } else {\r\n      geometries = [geometry];\r\n    }\r\n    const features = [];\r\n    for (let i = 0, ii = geometries.length; i < ii; ++i) {\r\n      const feature = new Feature();\r\n      feature.setGeometry(geometries[i]);\r\n      features.push(feature);\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readGeometryFromText(text, opt_options) {\r\n    const geometry = this.parse_(text);\r\n    if (geometry) {\r\n      return (\r\n        /** @type {module:ol/geom/Geometry} */ (transformWithOptions(geometry, false, opt_options))\r\n      );\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  writeFeatureText(feature, opt_options) {\r\n    const geometry = feature.getGeometry();\r\n    if (geometry) {\r\n      return this.writeGeometryText(geometry, opt_options);\r\n    }\r\n    return '';\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  writeFeaturesText(features, opt_options) {\r\n    if (features.length == 1) {\r\n      return this.writeFeatureText(features[0], opt_options);\r\n    }\r\n    const geometries = [];\r\n    for (let i = 0, ii = features.length; i < ii; ++i) {\r\n      geometries.push(features[i].getGeometry());\r\n    }\r\n    const collection = new GeometryCollection(geometries);\r\n    return this.writeGeometryText(collection, opt_options);\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  writeGeometryText(geometry, opt_options) {\r\n    return encode(/** @type {module:ol/geom/Geometry} */ (\r\n      transformWithOptions(geometry, true, opt_options)));\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Point} geom Point geometry.\r\n * @return {string} Coordinates part of Point as WKT.\r\n */\r\nfunction encodePointGeometry(geom) {\r\n  const coordinates = geom.getCoordinates();\r\n  if (coordinates.length === 0) {\r\n    return '';\r\n  }\r\n  return coordinates.join(' ');\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/MultiPoint} geom MultiPoint geometry.\r\n * @return {string} Coordinates part of MultiPoint as WKT.\r\n */\r\nfunction encodeMultiPointGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getPoints();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodePointGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/GeometryCollection} geom GeometryCollection geometry.\r\n * @return {string} Coordinates part of GeometryCollection as WKT.\r\n */\r\nfunction encodeGeometryCollectionGeometry(geom) {\r\n  const array = [];\r\n  const geoms = geom.getGeometries();\r\n  for (let i = 0, ii = geoms.length; i < ii; ++i) {\r\n    array.push(encode(geoms[i]));\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/LineString|module:ol/geom/LinearRing} geom LineString geometry.\r\n * @return {string} Coordinates part of LineString as WKT.\r\n */\r\nfunction encodeLineStringGeometry(geom) {\r\n  const coordinates = geom.getCoordinates();\r\n  const array = [];\r\n  for (let i = 0, ii = coordinates.length; i < ii; ++i) {\r\n    array.push(coordinates[i].join(' '));\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/MultiLineString} geom MultiLineString geometry.\r\n * @return {string} Coordinates part of MultiLineString as WKT.\r\n */\r\nfunction encodeMultiLineStringGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getLineStrings();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodeLineStringGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/Polygon} geom Polygon geometry.\r\n * @return {string} Coordinates part of Polygon as WKT.\r\n */\r\nfunction encodePolygonGeometry(geom) {\r\n  const array = [];\r\n  const rings = geom.getLinearRings();\r\n  for (let i = 0, ii = rings.length; i < ii; ++i) {\r\n    array.push('(' + encodeLineStringGeometry(rings[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n\r\n/**\r\n * @param {module:ol/geom/MultiPolygon} geom MultiPolygon geometry.\r\n * @return {string} Coordinates part of MultiPolygon as WKT.\r\n */\r\nfunction encodeMultiPolygonGeometry(geom) {\r\n  const array = [];\r\n  const components = geom.getPolygons();\r\n  for (let i = 0, ii = components.length; i < ii; ++i) {\r\n    array.push('(' + encodePolygonGeometry(components[i]) + ')');\r\n  }\r\n  return array.join(',');\r\n}\r\n\r\n/**\r\n * @param {module:ol/geom/SimpleGeometry} geom SimpleGeometry geometry.\r\n * @return {string} Potential dimensional information for WKT type.\r\n */\r\nfunction encodeGeometryLayout(geom) {\r\n  const layout = geom.getLayout();\r\n  let dimInfo = '';\r\n  if (layout === GeometryLayout.XYZ || layout === GeometryLayout.XYZM) {\r\n    dimInfo += Z;\r\n  }\r\n  if (layout === GeometryLayout.XYM || layout === GeometryLayout.XYZM) {\r\n    dimInfo += M;\r\n  }\r\n  return dimInfo;\r\n}\r\n\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, function(module:ol/geom/Geometry): string>}\r\n */\r\nconst GeometryEncoder = {\r\n  'Point': encodePointGeometry,\r\n  'LineString': encodeLineStringGeometry,\r\n  'Polygon': encodePolygonGeometry,\r\n  'MultiPoint': encodeMultiPointGeometry,\r\n  'MultiLineString': encodeMultiLineStringGeometry,\r\n  'MultiPolygon': encodeMultiPolygonGeometry,\r\n  'GeometryCollection': encodeGeometryCollectionGeometry\r\n};\r\n\r\n\r\n/**\r\n * Encode a geometry as WKT.\r\n * @param {module:ol/geom/Geometry} geom The geometry to encode.\r\n * @return {string} WKT string for the geometry.\r\n */\r\nfunction encode(geom) {\r\n  let type = geom.getType();\r\n  const geometryEncoder = GeometryEncoder[type];\r\n  const enc = geometryEncoder(geom);\r\n  type = type.toUpperCase();\r\n  if (geom instanceof SimpleGeometry) {\r\n    const dimInfo = encodeGeometryLayout(geom);\r\n    if (dimInfo.length > 0) {\r\n      type += ' ' + dimInfo;\r\n    }\r\n  }\r\n  if (enc.length === 0) {\r\n    return type + ' ' + EMPTY;\r\n  }\r\n  return type + '(' + enc + ')';\r\n}\r\n\r\n\r\nexport default WKT;\r\n"],"names":["const","let","this","super"],"mappings":"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"}