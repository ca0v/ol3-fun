{"version":3,"file":"XMLFeature.js","sources":["../../../src/ol/format/XMLFeature.js"],"sourcesContent":["/**\r\n * @module ol/format/XMLFeature\r\n */\r\nimport {extend} from '../array.js';\r\nimport FeatureFormat from '../format/Feature.js';\r\nimport FormatType from '../format/FormatType.js';\r\nimport {isDocument, isNode, parse} from '../xml.js';\r\n\r\n/**\r\n * @classdesc\r\n * Abstract base class; normally only used for creating subclasses and not\r\n * instantiated in apps.\r\n * Base class for XML feature formats.\r\n *\r\n * @abstract\r\n */\r\nclass XMLFeature extends FeatureFormat {\r\n  constructor() {\r\n    super();\r\n\r\n    /**\r\n     * @type {XMLSerializer}\r\n     * @private\r\n     */\r\n    this.xmlSerializer_ = new XMLSerializer();\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  getType() {\r\n    return FormatType.XML;\r\n  }\r\n\r\n  /**\r\n   * Read a single feature.\r\n   *\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Read options.\r\n   * @return {module:ol/Feature} Feature.\r\n   * @api\r\n   */\r\n  readFeature(source, opt_options) {\r\n    if (isDocument(source)) {\r\n      return this.readFeatureFromDocument(/** @type {Document} */ (source), opt_options);\r\n    } else if (isNode(source)) {\r\n      return this.readFeatureFromNode(/** @type {Node} */ (source), opt_options);\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeatureFromDocument(doc, opt_options);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @return {module:ol/Feature} Feature.\r\n   */\r\n  readFeatureFromDocument(doc, opt_options) {\r\n    const features = this.readFeaturesFromDocument(doc, opt_options);\r\n    if (features.length > 0) {\r\n      return features[0];\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @return {module:ol/Feature} Feature.\r\n   */\r\n  readFeatureFromNode(node, opt_options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Read all features from a feature collection.\r\n   *\r\n   * @function\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @return {Array.<module:ol/Feature>} Features.\r\n   * @api\r\n   */\r\n  readFeatures(source, opt_options) {\r\n    if (isDocument(source)) {\r\n      return this.readFeaturesFromDocument(\r\n        /** @type {Document} */ (source), opt_options);\r\n    } else if (isNode(source)) {\r\n      return this.readFeaturesFromNode(/** @type {Node} */ (source), opt_options);\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readFeaturesFromDocument(doc, opt_options);\r\n    } else {\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @protected\r\n   * @return {Array.<module:ol/Feature>} Features.\r\n   */\r\n  readFeaturesFromDocument(doc, opt_options) {\r\n    /** @type {Array.<module:ol/Feature>} */\r\n    const features = [];\r\n    for (let n = doc.firstChild; n; n = n.nextSibling) {\r\n      if (n.nodeType == Node.ELEMENT_NODE) {\r\n        extend(features, this.readFeaturesFromNode(n, opt_options));\r\n      }\r\n    }\r\n    return features;\r\n  }\r\n\r\n  /**\r\n   * @abstract\r\n   * @param {Node} node Node.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @protected\r\n   * @return {Array.<module:ol/Feature>} Features.\r\n   */\r\n  readFeaturesFromNode(node, opt_options) {}\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  readGeometry(source, opt_options) {\r\n    if (isDocument(source)) {\r\n      return this.readGeometryFromDocument(\r\n        /** @type {Document} */ (source), opt_options);\r\n    } else if (isNode(source)) {\r\n      return this.readGeometryFromNode(/** @type {Node} */ (source), opt_options);\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readGeometryFromDocument(doc, opt_options);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @protected\r\n   * @return {module:ol/geom/Geometry} Geometry.\r\n   */\r\n  readGeometryFromDocument(doc, opt_options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @param {module:ol/format/Feature~ReadOptions=} opt_options Options.\r\n   * @protected\r\n   * @return {module:ol/geom/Geometry} Geometry.\r\n   */\r\n  readGeometryFromNode(node, opt_options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Read the projection from the source.\r\n   *\r\n   * @param {Document|Node|Object|string} source Source.\r\n   * @return {module:ol/proj/Projection} Projection.\r\n   * @api\r\n   */\r\n  readProjection(source) {\r\n    if (isDocument(source)) {\r\n      return this.readProjectionFromDocument(/** @type {Document} */ (source));\r\n    } else if (isNode(source)) {\r\n      return this.readProjectionFromNode(/** @type {Node} */ (source));\r\n    } else if (typeof source === 'string') {\r\n      const doc = parse(source);\r\n      return this.readProjectionFromDocument(doc);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {Document} doc Document.\r\n   * @protected\r\n   * @return {module:ol/proj/Projection} Projection.\r\n   */\r\n  readProjectionFromDocument(doc) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * @param {Node} node Node.\r\n   * @protected\r\n   * @return {module:ol/proj/Projection} Projection.\r\n   */\r\n  readProjectionFromNode(node) {\r\n    return this.dataProjection;\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  writeFeature(feature, opt_options) {\r\n    const node = this.writeFeatureNode(feature, opt_options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/Feature} feature Feature.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\r\n   * @protected\r\n   * @return {Node} Node.\r\n   */\r\n  writeFeatureNode(feature, opt_options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * Encode an array of features as string.\r\n   *\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Write options.\r\n   * @return {string} Result.\r\n   * @api\r\n   */\r\n  writeFeatures(features, opt_options) {\r\n    const node = this.writeFeaturesNode(features, opt_options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {Array.<module:ol/Feature>} features Features.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\r\n   * @return {Node} Node.\r\n   */\r\n  writeFeaturesNode(features, opt_options) {\r\n    return null; // not implemented\r\n  }\r\n\r\n  /**\r\n   * @inheritDoc\r\n   */\r\n  writeGeometry(geometry, opt_options) {\r\n    const node = this.writeGeometryNode(geometry, opt_options);\r\n    return this.xmlSerializer_.serializeToString(node);\r\n  }\r\n\r\n  /**\r\n   * @param {module:ol/geom/Geometry} geometry Geometry.\r\n   * @param {module:ol/format/Feature~WriteOptions=} opt_options Options.\r\n   * @return {Node} Node.\r\n   */\r\n  writeGeometryNode(geometry, opt_options) {\r\n    return null; // not implemented\r\n  }\r\n}\r\n\r\n\r\nexport default XMLFeature;\r\n"],"names":["super","const","let","this"],"mappings":"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"}